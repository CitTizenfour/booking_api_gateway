// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.0
// source: review_service.proto

package order_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReviewServiceClient is the client API for ReviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReviewServiceClient interface {
	CreateReview(ctx context.Context, in *CreateReviewReq, opts ...grpc.CallOption) (*CreateReviewResponse, error)
	GetSingleReview(ctx context.Context, in *ReviewId, opts ...grpc.CallOption) (*GetSingleReviewResponse, error)
	GetListReviews(ctx context.Context, in *GetListReviewsReq, opts ...grpc.CallOption) (*GetListReviewsResponse, error)
	UpdateReview(ctx context.Context, in *UpdateReviewReq, opts ...grpc.CallOption) (*UpdateReviewResponse, error)
	DeleteReview(ctx context.Context, in *ReviewId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateReplyReview(ctx context.Context, in *CreateReplyReviewsReq, opts ...grpc.CallOption) (*CreateReplyReviewsResponse, error)
	GetReplyReviews(ctx context.Context, in *ReviewId, opts ...grpc.CallOption) (*GetReplyReviewsResponse, error)
	DeleteReplyReview(ctx context.Context, in *ReviewId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateReplyReview(ctx context.Context, in *UpdateReplyReviewReq, opts ...grpc.CallOption) (*CreateReplyReviewsResponse, error)
}

type reviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewServiceClient(cc grpc.ClientConnInterface) ReviewServiceClient {
	return &reviewServiceClient{cc}
}

func (c *reviewServiceClient) CreateReview(ctx context.Context, in *CreateReviewReq, opts ...grpc.CallOption) (*CreateReviewResponse, error) {
	out := new(CreateReviewResponse)
	err := c.cc.Invoke(ctx, "/order_service.ReviewService/CreateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) GetSingleReview(ctx context.Context, in *ReviewId, opts ...grpc.CallOption) (*GetSingleReviewResponse, error) {
	out := new(GetSingleReviewResponse)
	err := c.cc.Invoke(ctx, "/order_service.ReviewService/GetSingleReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) GetListReviews(ctx context.Context, in *GetListReviewsReq, opts ...grpc.CallOption) (*GetListReviewsResponse, error) {
	out := new(GetListReviewsResponse)
	err := c.cc.Invoke(ctx, "/order_service.ReviewService/GetListReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) UpdateReview(ctx context.Context, in *UpdateReviewReq, opts ...grpc.CallOption) (*UpdateReviewResponse, error) {
	out := new(UpdateReviewResponse)
	err := c.cc.Invoke(ctx, "/order_service.ReviewService/UpdateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) DeleteReview(ctx context.Context, in *ReviewId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/order_service.ReviewService/DeleteReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) CreateReplyReview(ctx context.Context, in *CreateReplyReviewsReq, opts ...grpc.CallOption) (*CreateReplyReviewsResponse, error) {
	out := new(CreateReplyReviewsResponse)
	err := c.cc.Invoke(ctx, "/order_service.ReviewService/CreateReplyReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) GetReplyReviews(ctx context.Context, in *ReviewId, opts ...grpc.CallOption) (*GetReplyReviewsResponse, error) {
	out := new(GetReplyReviewsResponse)
	err := c.cc.Invoke(ctx, "/order_service.ReviewService/GetReplyReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) DeleteReplyReview(ctx context.Context, in *ReviewId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/order_service.ReviewService/DeleteReplyReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) UpdateReplyReview(ctx context.Context, in *UpdateReplyReviewReq, opts ...grpc.CallOption) (*CreateReplyReviewsResponse, error) {
	out := new(CreateReplyReviewsResponse)
	err := c.cc.Invoke(ctx, "/order_service.ReviewService/UpdateReplyReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewServiceServer is the server API for ReviewService service.
// All implementations must embed UnimplementedReviewServiceServer
// for forward compatibility
type ReviewServiceServer interface {
	CreateReview(context.Context, *CreateReviewReq) (*CreateReviewResponse, error)
	GetSingleReview(context.Context, *ReviewId) (*GetSingleReviewResponse, error)
	GetListReviews(context.Context, *GetListReviewsReq) (*GetListReviewsResponse, error)
	UpdateReview(context.Context, *UpdateReviewReq) (*UpdateReviewResponse, error)
	DeleteReview(context.Context, *ReviewId) (*emptypb.Empty, error)
	CreateReplyReview(context.Context, *CreateReplyReviewsReq) (*CreateReplyReviewsResponse, error)
	GetReplyReviews(context.Context, *ReviewId) (*GetReplyReviewsResponse, error)
	DeleteReplyReview(context.Context, *ReviewId) (*emptypb.Empty, error)
	UpdateReplyReview(context.Context, *UpdateReplyReviewReq) (*CreateReplyReviewsResponse, error)
	mustEmbedUnimplementedReviewServiceServer()
}

// UnimplementedReviewServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReviewServiceServer struct {
}

func (UnimplementedReviewServiceServer) CreateReview(context.Context, *CreateReviewReq) (*CreateReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReview not implemented")
}
func (UnimplementedReviewServiceServer) GetSingleReview(context.Context, *ReviewId) (*GetSingleReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleReview not implemented")
}
func (UnimplementedReviewServiceServer) GetListReviews(context.Context, *GetListReviewsReq) (*GetListReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListReviews not implemented")
}
func (UnimplementedReviewServiceServer) UpdateReview(context.Context, *UpdateReviewReq) (*UpdateReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReview not implemented")
}
func (UnimplementedReviewServiceServer) DeleteReview(context.Context, *ReviewId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReview not implemented")
}
func (UnimplementedReviewServiceServer) CreateReplyReview(context.Context, *CreateReplyReviewsReq) (*CreateReplyReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReplyReview not implemented")
}
func (UnimplementedReviewServiceServer) GetReplyReviews(context.Context, *ReviewId) (*GetReplyReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplyReviews not implemented")
}
func (UnimplementedReviewServiceServer) DeleteReplyReview(context.Context, *ReviewId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReplyReview not implemented")
}
func (UnimplementedReviewServiceServer) UpdateReplyReview(context.Context, *UpdateReplyReviewReq) (*CreateReplyReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReplyReview not implemented")
}
func (UnimplementedReviewServiceServer) mustEmbedUnimplementedReviewServiceServer() {}

// UnsafeReviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewServiceServer will
// result in compilation errors.
type UnsafeReviewServiceServer interface {
	mustEmbedUnimplementedReviewServiceServer()
}

func RegisterReviewServiceServer(s grpc.ServiceRegistrar, srv ReviewServiceServer) {
	s.RegisterService(&ReviewService_ServiceDesc, srv)
}

func _ReviewService_CreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).CreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.ReviewService/CreateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).CreateReview(ctx, req.(*CreateReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_GetSingleReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).GetSingleReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.ReviewService/GetSingleReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).GetSingleReview(ctx, req.(*ReviewId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_GetListReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListReviewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).GetListReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.ReviewService/GetListReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).GetListReviews(ctx, req.(*GetListReviewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_UpdateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).UpdateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.ReviewService/UpdateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).UpdateReview(ctx, req.(*UpdateReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_DeleteReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).DeleteReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.ReviewService/DeleteReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).DeleteReview(ctx, req.(*ReviewId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_CreateReplyReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReplyReviewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).CreateReplyReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.ReviewService/CreateReplyReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).CreateReplyReview(ctx, req.(*CreateReplyReviewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_GetReplyReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).GetReplyReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.ReviewService/GetReplyReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).GetReplyReviews(ctx, req.(*ReviewId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_DeleteReplyReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).DeleteReplyReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.ReviewService/DeleteReplyReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).DeleteReplyReview(ctx, req.(*ReviewId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_UpdateReplyReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReplyReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).UpdateReplyReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.ReviewService/UpdateReplyReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).UpdateReplyReview(ctx, req.(*UpdateReplyReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ReviewService_ServiceDesc is the grpc.ServiceDesc for ReviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order_service.ReviewService",
	HandlerType: (*ReviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReview",
			Handler:    _ReviewService_CreateReview_Handler,
		},
		{
			MethodName: "GetSingleReview",
			Handler:    _ReviewService_GetSingleReview_Handler,
		},
		{
			MethodName: "GetListReviews",
			Handler:    _ReviewService_GetListReviews_Handler,
		},
		{
			MethodName: "UpdateReview",
			Handler:    _ReviewService_UpdateReview_Handler,
		},
		{
			MethodName: "DeleteReview",
			Handler:    _ReviewService_DeleteReview_Handler,
		},
		{
			MethodName: "CreateReplyReview",
			Handler:    _ReviewService_CreateReplyReview_Handler,
		},
		{
			MethodName: "GetReplyReviews",
			Handler:    _ReviewService_GetReplyReviews_Handler,
		},
		{
			MethodName: "DeleteReplyReview",
			Handler:    _ReviewService_DeleteReplyReview_Handler,
		},
		{
			MethodName: "UpdateReplyReview",
			Handler:    _ReviewService_UpdateReplyReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "review_service.proto",
}
