// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.17.0
// source: keke.proto

package order_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateKekeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KekeStatus   string  `protobuf:"bytes,1,opt,name=keke_status,json=kekeStatus,proto3" json:"keke_status,omitempty"`
	KekeNumber   string  `protobuf:"bytes,2,opt,name=keke_number,json=kekeNumber,proto3" json:"keke_number,omitempty"`
	StartedPrice float64 `protobuf:"fixed64,3,opt,name=started_price,json=startedPrice,proto3" json:"started_price,omitempty"`
	EndPrice     float64 `protobuf:"fixed64,4,opt,name=end_price,json=endPrice,proto3" json:"end_price,omitempty"`
	PlaceCount   int32   `protobuf:"varint,5,opt,name=place_count,json=placeCount,proto3" json:"place_count,omitempty"`
	Colour       string  `protobuf:"bytes,6,opt,name=colour,proto3" json:"colour,omitempty"`
}

func (x *CreateKekeReq) Reset() {
	*x = CreateKekeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keke_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKekeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKekeReq) ProtoMessage() {}

func (x *CreateKekeReq) ProtoReflect() protoreflect.Message {
	mi := &file_keke_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKekeReq.ProtoReflect.Descriptor instead.
func (*CreateKekeReq) Descriptor() ([]byte, []int) {
	return file_keke_proto_rawDescGZIP(), []int{0}
}

func (x *CreateKekeReq) GetKekeStatus() string {
	if x != nil {
		return x.KekeStatus
	}
	return ""
}

func (x *CreateKekeReq) GetKekeNumber() string {
	if x != nil {
		return x.KekeNumber
	}
	return ""
}

func (x *CreateKekeReq) GetStartedPrice() float64 {
	if x != nil {
		return x.StartedPrice
	}
	return 0
}

func (x *CreateKekeReq) GetEndPrice() float64 {
	if x != nil {
		return x.EndPrice
	}
	return 0
}

func (x *CreateKekeReq) GetPlaceCount() int32 {
	if x != nil {
		return x.PlaceCount
	}
	return 0
}

func (x *CreateKekeReq) GetColour() string {
	if x != nil {
		return x.Colour
	}
	return ""
}

type CreateKekeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KekeStatus   string  `protobuf:"bytes,1,opt,name=keke_status,json=kekeStatus,proto3" json:"keke_status,omitempty"`
	KekeNumber   string  `protobuf:"bytes,2,opt,name=keke_number,json=kekeNumber,proto3" json:"keke_number,omitempty"`
	StartedPrice float64 `protobuf:"fixed64,3,opt,name=started_price,json=startedPrice,proto3" json:"started_price,omitempty"`
	EndPrice     float64 `protobuf:"fixed64,4,opt,name=end_price,json=endPrice,proto3" json:"end_price,omitempty"`
	PlaceCount   int32   `protobuf:"varint,5,opt,name=place_count,json=placeCount,proto3" json:"place_count,omitempty"`
	Colour       string  `protobuf:"bytes,6,opt,name=colour,proto3" json:"colour,omitempty"`
	Id           string  `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt    string  `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    string  `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *CreateKekeResponse) Reset() {
	*x = CreateKekeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keke_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKekeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKekeResponse) ProtoMessage() {}

func (x *CreateKekeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keke_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKekeResponse.ProtoReflect.Descriptor instead.
func (*CreateKekeResponse) Descriptor() ([]byte, []int) {
	return file_keke_proto_rawDescGZIP(), []int{1}
}

func (x *CreateKekeResponse) GetKekeStatus() string {
	if x != nil {
		return x.KekeStatus
	}
	return ""
}

func (x *CreateKekeResponse) GetKekeNumber() string {
	if x != nil {
		return x.KekeNumber
	}
	return ""
}

func (x *CreateKekeResponse) GetStartedPrice() float64 {
	if x != nil {
		return x.StartedPrice
	}
	return 0
}

func (x *CreateKekeResponse) GetEndPrice() float64 {
	if x != nil {
		return x.EndPrice
	}
	return 0
}

func (x *CreateKekeResponse) GetPlaceCount() int32 {
	if x != nil {
		return x.PlaceCount
	}
	return 0
}

func (x *CreateKekeResponse) GetColour() string {
	if x != nil {
		return x.Colour
	}
	return ""
}

func (x *CreateKekeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateKekeResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CreateKekeResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type KekeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KekeId) Reset() {
	*x = KekeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keke_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KekeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KekeId) ProtoMessage() {}

func (x *KekeId) ProtoReflect() protoreflect.Message {
	mi := &file_keke_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KekeId.ProtoReflect.Descriptor instead.
func (*KekeId) Descriptor() ([]byte, []int) {
	return file_keke_proto_rawDescGZIP(), []int{2}
}

func (x *KekeId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSingleKekeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KekeStatus   string  `protobuf:"bytes,1,opt,name=keke_status,json=kekeStatus,proto3" json:"keke_status,omitempty"`
	KekeNumber   string  `protobuf:"bytes,2,opt,name=keke_number,json=kekeNumber,proto3" json:"keke_number,omitempty"`
	StartedPrice float64 `protobuf:"fixed64,3,opt,name=started_price,json=startedPrice,proto3" json:"started_price,omitempty"`
	EndPrice     float64 `protobuf:"fixed64,4,opt,name=end_price,json=endPrice,proto3" json:"end_price,omitempty"`
	PlaceCount   int32   `protobuf:"varint,5,opt,name=place_count,json=placeCount,proto3" json:"place_count,omitempty"`
	Colour       string  `protobuf:"bytes,6,opt,name=colour,proto3" json:"colour,omitempty"`
	Id           string  `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt    string  `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    string  `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *GetSingleKekeResponse) Reset() {
	*x = GetSingleKekeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keke_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSingleKekeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleKekeResponse) ProtoMessage() {}

func (x *GetSingleKekeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keke_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleKekeResponse.ProtoReflect.Descriptor instead.
func (*GetSingleKekeResponse) Descriptor() ([]byte, []int) {
	return file_keke_proto_rawDescGZIP(), []int{3}
}

func (x *GetSingleKekeResponse) GetKekeStatus() string {
	if x != nil {
		return x.KekeStatus
	}
	return ""
}

func (x *GetSingleKekeResponse) GetKekeNumber() string {
	if x != nil {
		return x.KekeNumber
	}
	return ""
}

func (x *GetSingleKekeResponse) GetStartedPrice() float64 {
	if x != nil {
		return x.StartedPrice
	}
	return 0
}

func (x *GetSingleKekeResponse) GetEndPrice() float64 {
	if x != nil {
		return x.EndPrice
	}
	return 0
}

func (x *GetSingleKekeResponse) GetPlaceCount() int32 {
	if x != nil {
		return x.PlaceCount
	}
	return 0
}

func (x *GetSingleKekeResponse) GetColour() string {
	if x != nil {
		return x.Colour
	}
	return ""
}

func (x *GetSingleKekeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetSingleKekeResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetSingleKekeResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type GetListKekesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetListKekesReq) Reset() {
	*x = GetListKekesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keke_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListKekesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListKekesReq) ProtoMessage() {}

func (x *GetListKekesReq) ProtoReflect() protoreflect.Message {
	mi := &file_keke_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListKekesReq.ProtoReflect.Descriptor instead.
func (*GetListKekesReq) Descriptor() ([]byte, []int) {
	return file_keke_proto_rawDescGZIP(), []int{4}
}

func (x *GetListKekesReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetListKekesReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetListKekesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetKekes []*GetSingleKekeResponse `protobuf:"bytes,1,rep,name=getKekes,proto3" json:"getKekes,omitempty"`
	Count    int32                    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetListKekesResponse) Reset() {
	*x = GetListKekesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keke_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListKekesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListKekesResponse) ProtoMessage() {}

func (x *GetListKekesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keke_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListKekesResponse.ProtoReflect.Descriptor instead.
func (*GetListKekesResponse) Descriptor() ([]byte, []int) {
	return file_keke_proto_rawDescGZIP(), []int{5}
}

func (x *GetListKekesResponse) GetGetKekes() []*GetSingleKekeResponse {
	if x != nil {
		return x.GetKekes
	}
	return nil
}

func (x *GetListKekesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type UpdateKekeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KekeStatus   string  `protobuf:"bytes,1,opt,name=keke_status,json=kekeStatus,proto3" json:"keke_status,omitempty"`
	KekeNumber   string  `protobuf:"bytes,2,opt,name=keke_number,json=kekeNumber,proto3" json:"keke_number,omitempty"`
	StartedPrice float64 `protobuf:"fixed64,3,opt,name=started_price,json=startedPrice,proto3" json:"started_price,omitempty"`
	EndPrice     float64 `protobuf:"fixed64,4,opt,name=end_price,json=endPrice,proto3" json:"end_price,omitempty"`
	PlaceCount   int32   `protobuf:"varint,5,opt,name=place_count,json=placeCount,proto3" json:"place_count,omitempty"`
	Colour       string  `protobuf:"bytes,6,opt,name=colour,proto3" json:"colour,omitempty"`
	Id           string  `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UpdateKekeReq) Reset() {
	*x = UpdateKekeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keke_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateKekeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKekeReq) ProtoMessage() {}

func (x *UpdateKekeReq) ProtoReflect() protoreflect.Message {
	mi := &file_keke_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKekeReq.ProtoReflect.Descriptor instead.
func (*UpdateKekeReq) Descriptor() ([]byte, []int) {
	return file_keke_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateKekeReq) GetKekeStatus() string {
	if x != nil {
		return x.KekeStatus
	}
	return ""
}

func (x *UpdateKekeReq) GetKekeNumber() string {
	if x != nil {
		return x.KekeNumber
	}
	return ""
}

func (x *UpdateKekeReq) GetStartedPrice() float64 {
	if x != nil {
		return x.StartedPrice
	}
	return 0
}

func (x *UpdateKekeReq) GetEndPrice() float64 {
	if x != nil {
		return x.EndPrice
	}
	return 0
}

func (x *UpdateKekeReq) GetPlaceCount() int32 {
	if x != nil {
		return x.PlaceCount
	}
	return 0
}

func (x *UpdateKekeReq) GetColour() string {
	if x != nil {
		return x.Colour
	}
	return ""
}

func (x *UpdateKekeReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateKekeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KekeStatus   string  `protobuf:"bytes,1,opt,name=keke_status,json=kekeStatus,proto3" json:"keke_status,omitempty"`
	KekeNumber   string  `protobuf:"bytes,2,opt,name=keke_number,json=kekeNumber,proto3" json:"keke_number,omitempty"`
	StartedPrice float64 `protobuf:"fixed64,3,opt,name=started_price,json=startedPrice,proto3" json:"started_price,omitempty"`
	EndPrice     float64 `protobuf:"fixed64,4,opt,name=end_price,json=endPrice,proto3" json:"end_price,omitempty"`
	PlaceCount   int32   `protobuf:"varint,5,opt,name=place_count,json=placeCount,proto3" json:"place_count,omitempty"`
	Colour       string  `protobuf:"bytes,6,opt,name=colour,proto3" json:"colour,omitempty"`
	Id           string  `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt    string  `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    string  `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *UpdateKekeResponse) Reset() {
	*x = UpdateKekeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keke_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateKekeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKekeResponse) ProtoMessage() {}

func (x *UpdateKekeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keke_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKekeResponse.ProtoReflect.Descriptor instead.
func (*UpdateKekeResponse) Descriptor() ([]byte, []int) {
	return file_keke_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateKekeResponse) GetKekeStatus() string {
	if x != nil {
		return x.KekeStatus
	}
	return ""
}

func (x *UpdateKekeResponse) GetKekeNumber() string {
	if x != nil {
		return x.KekeNumber
	}
	return ""
}

func (x *UpdateKekeResponse) GetStartedPrice() float64 {
	if x != nil {
		return x.StartedPrice
	}
	return 0
}

func (x *UpdateKekeResponse) GetEndPrice() float64 {
	if x != nil {
		return x.EndPrice
	}
	return 0
}

func (x *UpdateKekeResponse) GetPlaceCount() int32 {
	if x != nil {
		return x.PlaceCount
	}
	return 0
}

func (x *UpdateKekeResponse) GetColour() string {
	if x != nil {
		return x.Colour
	}
	return ""
}

func (x *UpdateKekeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateKekeResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *UpdateKekeResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

var File_keke_proto protoreflect.FileDescriptor

var file_keke_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6b, 0x65, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcc, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65,
	0x6b, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6b, 0x65, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6b,
	0x65, 0x6b, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6b, 0x65, 0x6b, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x22, 0x9f, 0x02, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6b, 0x65, 0x6b, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x6b, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x6b, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x18, 0x0a, 0x06, 0x4b, 0x65, 0x6b,
	0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xa2, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x4b, 0x65, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6b, 0x65, 0x6b, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6b, 0x65, 0x6b, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x6b, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x4b, 0x65, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x6e, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x6b, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4b, 0x65, 0x6b,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x67, 0x65, 0x74, 0x4b, 0x65,
	0x6b, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6b,
	0x65, 0x6b, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6b, 0x65, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6b, 0x65, 0x6b, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6b, 0x65, 0x6b, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9f, 0x02, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x6b, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x6b, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x6b, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x18, 0x5a, 0x16, 0x67, 0x65,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_keke_proto_rawDescOnce sync.Once
	file_keke_proto_rawDescData = file_keke_proto_rawDesc
)

func file_keke_proto_rawDescGZIP() []byte {
	file_keke_proto_rawDescOnce.Do(func() {
		file_keke_proto_rawDescData = protoimpl.X.CompressGZIP(file_keke_proto_rawDescData)
	})
	return file_keke_proto_rawDescData
}

var file_keke_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_keke_proto_goTypes = []interface{}{
	(*CreateKekeReq)(nil),         // 0: order_service.CreateKekeReq
	(*CreateKekeResponse)(nil),    // 1: order_service.CreateKekeResponse
	(*KekeId)(nil),                // 2: order_service.KekeId
	(*GetSingleKekeResponse)(nil), // 3: order_service.GetSingleKekeResponse
	(*GetListKekesReq)(nil),       // 4: order_service.GetListKekesReq
	(*GetListKekesResponse)(nil),  // 5: order_service.GetListKekesResponse
	(*UpdateKekeReq)(nil),         // 6: order_service.UpdateKekeReq
	(*UpdateKekeResponse)(nil),    // 7: order_service.UpdateKekeResponse
}
var file_keke_proto_depIdxs = []int32{
	3, // 0: order_service.GetListKekesResponse.getKekes:type_name -> order_service.GetSingleKekeResponse
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_keke_proto_init() }
func file_keke_proto_init() {
	if File_keke_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_keke_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKekeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keke_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKekeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keke_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KekeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keke_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSingleKekeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keke_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListKekesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keke_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListKekesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keke_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateKekeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keke_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateKekeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_keke_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_keke_proto_goTypes,
		DependencyIndexes: file_keke_proto_depIdxs,
		MessageInfos:      file_keke_proto_msgTypes,
	}.Build()
	File_keke_proto = out.File
	file_keke_proto_rawDesc = nil
	file_keke_proto_goTypes = nil
	file_keke_proto_depIdxs = nil
}
