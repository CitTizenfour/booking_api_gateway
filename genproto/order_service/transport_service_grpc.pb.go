// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.0
// source: transport_service.proto

package order_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransportServiceClient is the client API for TransportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransportServiceClient interface {
	// Driver
	CreateDriver(ctx context.Context, in *CreateDriverReq, opts ...grpc.CallOption) (*CreateDriverResponse, error)
	GetSingleDriver(ctx context.Context, in *DriverId, opts ...grpc.CallOption) (*GetSingleDriverResponse, error)
	GetListDrivers(ctx context.Context, in *GetListDriversReq, opts ...grpc.CallOption) (*GetListDriversResponse, error)
	UpdateDriver(ctx context.Context, in *UpdateDriverReq, opts ...grpc.CallOption) (*UpdateDriverResponse, error)
	DeleteDriver(ctx context.Context, in *DriverId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Car
	CreateCar(ctx context.Context, in *CreateCarReq, opts ...grpc.CallOption) (*CreateCarResponse, error)
	GetSingleCar(ctx context.Context, in *CarId, opts ...grpc.CallOption) (*GetSingleCarResponse, error)
	GetListCars(ctx context.Context, in *GetListCarsReq, opts ...grpc.CallOption) (*GetListCarsResponse, error)
	UpdateCar(ctx context.Context, in *UpdateCarReq, opts ...grpc.CallOption) (*UpdateCarResponse, error)
	DeleteCar(ctx context.Context, in *CarId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Keke
	CreateKeke(ctx context.Context, in *CreateKekeReq, opts ...grpc.CallOption) (*CreateKekeResponse, error)
	GetSingleKeke(ctx context.Context, in *KekeId, opts ...grpc.CallOption) (*GetSingleKekeResponse, error)
	GetListKekes(ctx context.Context, in *GetListKekesReq, opts ...grpc.CallOption) (*GetListKekesResponse, error)
	UpdateKeke(ctx context.Context, in *UpdateKekeReq, opts ...grpc.CallOption) (*UpdateKekeResponse, error)
	DeleteKeke(ctx context.Context, in *KekeId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Bike
	CreateBike(ctx context.Context, in *CreateBikeReq, opts ...grpc.CallOption) (*CreateBikeResponse, error)
	GetSingleBike(ctx context.Context, in *BikeId, opts ...grpc.CallOption) (*GetSingleBikeResponse, error)
	GetListBikes(ctx context.Context, in *GetListBikesReq, opts ...grpc.CallOption) (*GetListBikesResponse, error)
	UpdateBike(ctx context.Context, in *UpdateBikeReq, opts ...grpc.CallOption) (*UpdateBikeResponse, error)
	DeleteBike(ctx context.Context, in *BikeId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Bus
	CreateBus(ctx context.Context, in *CreateBusReq, opts ...grpc.CallOption) (*CreateBusResponse, error)
	GetSingleBus(ctx context.Context, in *BusId, opts ...grpc.CallOption) (*GetSingleBusResponse, error)
	GetListBuses(ctx context.Context, in *GetListBusesReq, opts ...grpc.CallOption) (*GetListBusesResponse, error)
	UpdateBus(ctx context.Context, in *UpdateBusReq, opts ...grpc.CallOption) (*UpdateBusResponse, error)
	DeleteBus(ctx context.Context, in *BusId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type transportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportServiceClient(cc grpc.ClientConnInterface) TransportServiceClient {
	return &transportServiceClient{cc}
}

func (c *transportServiceClient) CreateDriver(ctx context.Context, in *CreateDriverReq, opts ...grpc.CallOption) (*CreateDriverResponse, error) {
	out := new(CreateDriverResponse)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/CreateDriver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) GetSingleDriver(ctx context.Context, in *DriverId, opts ...grpc.CallOption) (*GetSingleDriverResponse, error) {
	out := new(GetSingleDriverResponse)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/GetSingleDriver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) GetListDrivers(ctx context.Context, in *GetListDriversReq, opts ...grpc.CallOption) (*GetListDriversResponse, error) {
	out := new(GetListDriversResponse)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/GetListDrivers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) UpdateDriver(ctx context.Context, in *UpdateDriverReq, opts ...grpc.CallOption) (*UpdateDriverResponse, error) {
	out := new(UpdateDriverResponse)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/UpdateDriver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) DeleteDriver(ctx context.Context, in *DriverId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/DeleteDriver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) CreateCar(ctx context.Context, in *CreateCarReq, opts ...grpc.CallOption) (*CreateCarResponse, error) {
	out := new(CreateCarResponse)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/CreateCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) GetSingleCar(ctx context.Context, in *CarId, opts ...grpc.CallOption) (*GetSingleCarResponse, error) {
	out := new(GetSingleCarResponse)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/GetSingleCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) GetListCars(ctx context.Context, in *GetListCarsReq, opts ...grpc.CallOption) (*GetListCarsResponse, error) {
	out := new(GetListCarsResponse)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/GetListCars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) UpdateCar(ctx context.Context, in *UpdateCarReq, opts ...grpc.CallOption) (*UpdateCarResponse, error) {
	out := new(UpdateCarResponse)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/UpdateCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) DeleteCar(ctx context.Context, in *CarId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/DeleteCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) CreateKeke(ctx context.Context, in *CreateKekeReq, opts ...grpc.CallOption) (*CreateKekeResponse, error) {
	out := new(CreateKekeResponse)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/CreateKeke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) GetSingleKeke(ctx context.Context, in *KekeId, opts ...grpc.CallOption) (*GetSingleKekeResponse, error) {
	out := new(GetSingleKekeResponse)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/GetSingleKeke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) GetListKekes(ctx context.Context, in *GetListKekesReq, opts ...grpc.CallOption) (*GetListKekesResponse, error) {
	out := new(GetListKekesResponse)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/GetListKekes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) UpdateKeke(ctx context.Context, in *UpdateKekeReq, opts ...grpc.CallOption) (*UpdateKekeResponse, error) {
	out := new(UpdateKekeResponse)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/UpdateKeke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) DeleteKeke(ctx context.Context, in *KekeId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/DeleteKeke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) CreateBike(ctx context.Context, in *CreateBikeReq, opts ...grpc.CallOption) (*CreateBikeResponse, error) {
	out := new(CreateBikeResponse)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/CreateBike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) GetSingleBike(ctx context.Context, in *BikeId, opts ...grpc.CallOption) (*GetSingleBikeResponse, error) {
	out := new(GetSingleBikeResponse)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/GetSingleBike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) GetListBikes(ctx context.Context, in *GetListBikesReq, opts ...grpc.CallOption) (*GetListBikesResponse, error) {
	out := new(GetListBikesResponse)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/GetListBikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) UpdateBike(ctx context.Context, in *UpdateBikeReq, opts ...grpc.CallOption) (*UpdateBikeResponse, error) {
	out := new(UpdateBikeResponse)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/UpdateBike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) DeleteBike(ctx context.Context, in *BikeId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/DeleteBike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) CreateBus(ctx context.Context, in *CreateBusReq, opts ...grpc.CallOption) (*CreateBusResponse, error) {
	out := new(CreateBusResponse)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/CreateBus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) GetSingleBus(ctx context.Context, in *BusId, opts ...grpc.CallOption) (*GetSingleBusResponse, error) {
	out := new(GetSingleBusResponse)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/GetSingleBus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) GetListBuses(ctx context.Context, in *GetListBusesReq, opts ...grpc.CallOption) (*GetListBusesResponse, error) {
	out := new(GetListBusesResponse)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/GetListBuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) UpdateBus(ctx context.Context, in *UpdateBusReq, opts ...grpc.CallOption) (*UpdateBusResponse, error) {
	out := new(UpdateBusResponse)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/UpdateBus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) DeleteBus(ctx context.Context, in *BusId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/order_service.TransportService/DeleteBus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportServiceServer is the server API for TransportService service.
// All implementations must embed UnimplementedTransportServiceServer
// for forward compatibility
type TransportServiceServer interface {
	// Driver
	CreateDriver(context.Context, *CreateDriverReq) (*CreateDriverResponse, error)
	GetSingleDriver(context.Context, *DriverId) (*GetSingleDriverResponse, error)
	GetListDrivers(context.Context, *GetListDriversReq) (*GetListDriversResponse, error)
	UpdateDriver(context.Context, *UpdateDriverReq) (*UpdateDriverResponse, error)
	DeleteDriver(context.Context, *DriverId) (*emptypb.Empty, error)
	// Car
	CreateCar(context.Context, *CreateCarReq) (*CreateCarResponse, error)
	GetSingleCar(context.Context, *CarId) (*GetSingleCarResponse, error)
	GetListCars(context.Context, *GetListCarsReq) (*GetListCarsResponse, error)
	UpdateCar(context.Context, *UpdateCarReq) (*UpdateCarResponse, error)
	DeleteCar(context.Context, *CarId) (*emptypb.Empty, error)
	// Keke
	CreateKeke(context.Context, *CreateKekeReq) (*CreateKekeResponse, error)
	GetSingleKeke(context.Context, *KekeId) (*GetSingleKekeResponse, error)
	GetListKekes(context.Context, *GetListKekesReq) (*GetListKekesResponse, error)
	UpdateKeke(context.Context, *UpdateKekeReq) (*UpdateKekeResponse, error)
	DeleteKeke(context.Context, *KekeId) (*emptypb.Empty, error)
	// Bike
	CreateBike(context.Context, *CreateBikeReq) (*CreateBikeResponse, error)
	GetSingleBike(context.Context, *BikeId) (*GetSingleBikeResponse, error)
	GetListBikes(context.Context, *GetListBikesReq) (*GetListBikesResponse, error)
	UpdateBike(context.Context, *UpdateBikeReq) (*UpdateBikeResponse, error)
	DeleteBike(context.Context, *BikeId) (*emptypb.Empty, error)
	// Bus
	CreateBus(context.Context, *CreateBusReq) (*CreateBusResponse, error)
	GetSingleBus(context.Context, *BusId) (*GetSingleBusResponse, error)
	GetListBuses(context.Context, *GetListBusesReq) (*GetListBusesResponse, error)
	UpdateBus(context.Context, *UpdateBusReq) (*UpdateBusResponse, error)
	DeleteBus(context.Context, *BusId) (*emptypb.Empty, error)
	mustEmbedUnimplementedTransportServiceServer()
}

// UnimplementedTransportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransportServiceServer struct {
}

func (UnimplementedTransportServiceServer) CreateDriver(context.Context, *CreateDriverReq) (*CreateDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDriver not implemented")
}
func (UnimplementedTransportServiceServer) GetSingleDriver(context.Context, *DriverId) (*GetSingleDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleDriver not implemented")
}
func (UnimplementedTransportServiceServer) GetListDrivers(context.Context, *GetListDriversReq) (*GetListDriversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListDrivers not implemented")
}
func (UnimplementedTransportServiceServer) UpdateDriver(context.Context, *UpdateDriverReq) (*UpdateDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDriver not implemented")
}
func (UnimplementedTransportServiceServer) DeleteDriver(context.Context, *DriverId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDriver not implemented")
}
func (UnimplementedTransportServiceServer) CreateCar(context.Context, *CreateCarReq) (*CreateCarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCar not implemented")
}
func (UnimplementedTransportServiceServer) GetSingleCar(context.Context, *CarId) (*GetSingleCarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleCar not implemented")
}
func (UnimplementedTransportServiceServer) GetListCars(context.Context, *GetListCarsReq) (*GetListCarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListCars not implemented")
}
func (UnimplementedTransportServiceServer) UpdateCar(context.Context, *UpdateCarReq) (*UpdateCarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCar not implemented")
}
func (UnimplementedTransportServiceServer) DeleteCar(context.Context, *CarId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCar not implemented")
}
func (UnimplementedTransportServiceServer) CreateKeke(context.Context, *CreateKekeReq) (*CreateKekeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeke not implemented")
}
func (UnimplementedTransportServiceServer) GetSingleKeke(context.Context, *KekeId) (*GetSingleKekeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleKeke not implemented")
}
func (UnimplementedTransportServiceServer) GetListKekes(context.Context, *GetListKekesReq) (*GetListKekesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListKekes not implemented")
}
func (UnimplementedTransportServiceServer) UpdateKeke(context.Context, *UpdateKekeReq) (*UpdateKekeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeke not implemented")
}
func (UnimplementedTransportServiceServer) DeleteKeke(context.Context, *KekeId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeke not implemented")
}
func (UnimplementedTransportServiceServer) CreateBike(context.Context, *CreateBikeReq) (*CreateBikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBike not implemented")
}
func (UnimplementedTransportServiceServer) GetSingleBike(context.Context, *BikeId) (*GetSingleBikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleBike not implemented")
}
func (UnimplementedTransportServiceServer) GetListBikes(context.Context, *GetListBikesReq) (*GetListBikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListBikes not implemented")
}
func (UnimplementedTransportServiceServer) UpdateBike(context.Context, *UpdateBikeReq) (*UpdateBikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBike not implemented")
}
func (UnimplementedTransportServiceServer) DeleteBike(context.Context, *BikeId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBike not implemented")
}
func (UnimplementedTransportServiceServer) CreateBus(context.Context, *CreateBusReq) (*CreateBusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBus not implemented")
}
func (UnimplementedTransportServiceServer) GetSingleBus(context.Context, *BusId) (*GetSingleBusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleBus not implemented")
}
func (UnimplementedTransportServiceServer) GetListBuses(context.Context, *GetListBusesReq) (*GetListBusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListBuses not implemented")
}
func (UnimplementedTransportServiceServer) UpdateBus(context.Context, *UpdateBusReq) (*UpdateBusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBus not implemented")
}
func (UnimplementedTransportServiceServer) DeleteBus(context.Context, *BusId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBus not implemented")
}
func (UnimplementedTransportServiceServer) mustEmbedUnimplementedTransportServiceServer() {}

// UnsafeTransportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportServiceServer will
// result in compilation errors.
type UnsafeTransportServiceServer interface {
	mustEmbedUnimplementedTransportServiceServer()
}

func RegisterTransportServiceServer(s grpc.ServiceRegistrar, srv TransportServiceServer) {
	s.RegisterService(&TransportService_ServiceDesc, srv)
}

func _TransportService_CreateDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDriverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).CreateDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/CreateDriver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).CreateDriver(ctx, req.(*CreateDriverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_GetSingleDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).GetSingleDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/GetSingleDriver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).GetSingleDriver(ctx, req.(*DriverId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_GetListDrivers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListDriversReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).GetListDrivers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/GetListDrivers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).GetListDrivers(ctx, req.(*GetListDriversReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_UpdateDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDriverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).UpdateDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/UpdateDriver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).UpdateDriver(ctx, req.(*UpdateDriverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_DeleteDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).DeleteDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/DeleteDriver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).DeleteDriver(ctx, req.(*DriverId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_CreateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).CreateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/CreateCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).CreateCar(ctx, req.(*CreateCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_GetSingleCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).GetSingleCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/GetSingleCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).GetSingleCar(ctx, req.(*CarId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_GetListCars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListCarsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).GetListCars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/GetListCars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).GetListCars(ctx, req.(*GetListCarsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_UpdateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).UpdateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/UpdateCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).UpdateCar(ctx, req.(*UpdateCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_DeleteCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).DeleteCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/DeleteCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).DeleteCar(ctx, req.(*CarId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_CreateKeke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKekeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).CreateKeke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/CreateKeke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).CreateKeke(ctx, req.(*CreateKekeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_GetSingleKeke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KekeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).GetSingleKeke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/GetSingleKeke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).GetSingleKeke(ctx, req.(*KekeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_GetListKekes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListKekesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).GetListKekes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/GetListKekes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).GetListKekes(ctx, req.(*GetListKekesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_UpdateKeke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKekeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).UpdateKeke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/UpdateKeke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).UpdateKeke(ctx, req.(*UpdateKekeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_DeleteKeke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KekeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).DeleteKeke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/DeleteKeke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).DeleteKeke(ctx, req.(*KekeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_CreateBike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).CreateBike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/CreateBike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).CreateBike(ctx, req.(*CreateBikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_GetSingleBike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BikeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).GetSingleBike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/GetSingleBike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).GetSingleBike(ctx, req.(*BikeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_GetListBikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListBikesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).GetListBikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/GetListBikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).GetListBikes(ctx, req.(*GetListBikesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_UpdateBike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).UpdateBike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/UpdateBike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).UpdateBike(ctx, req.(*UpdateBikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_DeleteBike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BikeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).DeleteBike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/DeleteBike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).DeleteBike(ctx, req.(*BikeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_CreateBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).CreateBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/CreateBus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).CreateBus(ctx, req.(*CreateBusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_GetSingleBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).GetSingleBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/GetSingleBus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).GetSingleBus(ctx, req.(*BusId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_GetListBuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListBusesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).GetListBuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/GetListBuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).GetListBuses(ctx, req.(*GetListBusesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_UpdateBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).UpdateBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/UpdateBus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).UpdateBus(ctx, req.(*UpdateBusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_DeleteBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).DeleteBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.TransportService/DeleteBus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).DeleteBus(ctx, req.(*BusId))
	}
	return interceptor(ctx, in, info, handler)
}

// TransportService_ServiceDesc is the grpc.ServiceDesc for TransportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order_service.TransportService",
	HandlerType: (*TransportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDriver",
			Handler:    _TransportService_CreateDriver_Handler,
		},
		{
			MethodName: "GetSingleDriver",
			Handler:    _TransportService_GetSingleDriver_Handler,
		},
		{
			MethodName: "GetListDrivers",
			Handler:    _TransportService_GetListDrivers_Handler,
		},
		{
			MethodName: "UpdateDriver",
			Handler:    _TransportService_UpdateDriver_Handler,
		},
		{
			MethodName: "DeleteDriver",
			Handler:    _TransportService_DeleteDriver_Handler,
		},
		{
			MethodName: "CreateCar",
			Handler:    _TransportService_CreateCar_Handler,
		},
		{
			MethodName: "GetSingleCar",
			Handler:    _TransportService_GetSingleCar_Handler,
		},
		{
			MethodName: "GetListCars",
			Handler:    _TransportService_GetListCars_Handler,
		},
		{
			MethodName: "UpdateCar",
			Handler:    _TransportService_UpdateCar_Handler,
		},
		{
			MethodName: "DeleteCar",
			Handler:    _TransportService_DeleteCar_Handler,
		},
		{
			MethodName: "CreateKeke",
			Handler:    _TransportService_CreateKeke_Handler,
		},
		{
			MethodName: "GetSingleKeke",
			Handler:    _TransportService_GetSingleKeke_Handler,
		},
		{
			MethodName: "GetListKekes",
			Handler:    _TransportService_GetListKekes_Handler,
		},
		{
			MethodName: "UpdateKeke",
			Handler:    _TransportService_UpdateKeke_Handler,
		},
		{
			MethodName: "DeleteKeke",
			Handler:    _TransportService_DeleteKeke_Handler,
		},
		{
			MethodName: "CreateBike",
			Handler:    _TransportService_CreateBike_Handler,
		},
		{
			MethodName: "GetSingleBike",
			Handler:    _TransportService_GetSingleBike_Handler,
		},
		{
			MethodName: "GetListBikes",
			Handler:    _TransportService_GetListBikes_Handler,
		},
		{
			MethodName: "UpdateBike",
			Handler:    _TransportService_UpdateBike_Handler,
		},
		{
			MethodName: "DeleteBike",
			Handler:    _TransportService_DeleteBike_Handler,
		},
		{
			MethodName: "CreateBus",
			Handler:    _TransportService_CreateBus_Handler,
		},
		{
			MethodName: "GetSingleBus",
			Handler:    _TransportService_GetSingleBus_Handler,
		},
		{
			MethodName: "GetListBuses",
			Handler:    _TransportService_GetListBuses_Handler,
		},
		{
			MethodName: "UpdateBus",
			Handler:    _TransportService_UpdateBus_Handler,
		},
		{
			MethodName: "DeleteBus",
			Handler:    _TransportService_DeleteBus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport_service.proto",
}
