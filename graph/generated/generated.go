// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bk/bk_api_gateway/graph/model"
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	CreateBikeResponse struct {
		BikeModel    func(childComplexity int) int
		BikeNumber   func(childComplexity int) int
		BikeStatus   func(childComplexity int) int
		Colour       func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		EndPrice     func(childComplexity int) int
		ID           func(childComplexity int) int
		StartedPrice func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	CreateBusResponse struct {
		BookingCount func(childComplexity int) int
		BusName      func(childComplexity int) int
		BusNumber    func(childComplexity int) int
		BusStatus    func(childComplexity int) int
		BusType      func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		DriverID     func(childComplexity int) int
		EndPrice     func(childComplexity int) int
		ID           func(childComplexity int) int
		MerchantID   func(childComplexity int) int
		PlaceCount   func(childComplexity int) int
		RegionID     func(childComplexity int) int
		StartedPrice func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	CreateCarResponse struct {
		CarName      func(childComplexity int) int
		CarNumber    func(childComplexity int) int
		CarStatus    func(childComplexity int) int
		Colour       func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		EndPrice     func(childComplexity int) int
		ID           func(childComplexity int) int
		IsAirCondt   func(childComplexity int) int
		IsCovid      func(childComplexity int) int
		PlaceCount   func(childComplexity int) int
		StartedPrice func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	CreateDriverResponse struct {
		CreatedAt   func(childComplexity int) int
		DriverName  func(childComplexity int) int
		Experience  func(childComplexity int) int
		ID          func(childComplexity int) int
		PhoneNumber func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	CreateKekeResponse struct {
		Colour       func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		EndPrice     func(childComplexity int) int
		ID           func(childComplexity int) int
		KekeNumber   func(childComplexity int) int
		KekeStatus   func(childComplexity int) int
		PlaceCount   func(childComplexity int) int
		StartedPrice func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	CreateMerchantResponse struct {
		CreatedAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
		PaymentHistory func(childComplexity int) int
		PhoneNumber    func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	CreateOrderResponse struct {
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		MerchantID func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		UserID     func(childComplexity int) int
	}

	CreateReviewReplyResponse struct {
		Content   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		ReviewID  func(childComplexity int) int
		SenderID  func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	CreateReviewResponse struct {
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		MerchantID    func(childComplexity int) int
		Rate          func(childComplexity int) int
		ReviewContent func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UserID        func(childComplexity int) int
	}

	CreateUserResponse struct {
		CreatedAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
		PaymentHistory func(childComplexity int) int
		PhoneNumber    func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	GetListBikesResponse struct {
		Count    func(childComplexity int) int
		GetBikes func(childComplexity int) int
	}

	GetListBusesResponse struct {
		Count    func(childComplexity int) int
		GetBuses func(childComplexity int) int
	}

	GetListCarsResponse struct {
		Count   func(childComplexity int) int
		GetCars func(childComplexity int) int
	}

	GetListDriversResponse struct {
		Count      func(childComplexity int) int
		GetDrivers func(childComplexity int) int
	}

	GetListKekesResponse struct {
		Count    func(childComplexity int) int
		GetKekes func(childComplexity int) int
	}

	GetListMerchantResponse struct {
		Count        func(childComplexity int) int
		Getmerchants func(childComplexity int) int
	}

	GetListOrdersResponse struct {
		Count     func(childComplexity int) int
		Getorders func(childComplexity int) int
	}

	GetListReviewsResponse struct {
		Count      func(childComplexity int) int
		GetReviews func(childComplexity int) int
	}

	GetListUsersResponse struct {
		Count    func(childComplexity int) int
		GetUsers func(childComplexity int) int
	}

	GetReplyReviewsResponse struct {
		Count      func(childComplexity int) int
		GetReviews func(childComplexity int) int
	}

	GetSingleBikeResponse struct {
		BikeModel    func(childComplexity int) int
		BikeNumber   func(childComplexity int) int
		BikeStatus   func(childComplexity int) int
		Colour       func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		EndPrice     func(childComplexity int) int
		ID           func(childComplexity int) int
		StartedPrice func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	GetSingleBusResponse struct {
		BookingCount func(childComplexity int) int
		BusName      func(childComplexity int) int
		BusNumber    func(childComplexity int) int
		BusStatus    func(childComplexity int) int
		BusType      func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		DriverID     func(childComplexity int) int
		EndPrice     func(childComplexity int) int
		ID           func(childComplexity int) int
		MerchantID   func(childComplexity int) int
		PlaceCount   func(childComplexity int) int
		RegionID     func(childComplexity int) int
		StartedPrice func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	GetSingleCarResponse struct {
		CarName      func(childComplexity int) int
		CarNumber    func(childComplexity int) int
		CarStatus    func(childComplexity int) int
		Colour       func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		EndPrice     func(childComplexity int) int
		ID           func(childComplexity int) int
		IsAirCondt   func(childComplexity int) int
		IsCovid      func(childComplexity int) int
		PlaceCount   func(childComplexity int) int
		StartedPrice func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	GetSingleDriverResponse struct {
		CreatedAt   func(childComplexity int) int
		DriverName  func(childComplexity int) int
		Experience  func(childComplexity int) int
		ID          func(childComplexity int) int
		PhoneNumber func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	GetSingleKekeResponse struct {
		Colour       func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		EndPrice     func(childComplexity int) int
		ID           func(childComplexity int) int
		KekeNumber   func(childComplexity int) int
		KekeStatus   func(childComplexity int) int
		PlaceCount   func(childComplexity int) int
		StartedPrice func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	GetSingleMerchantResponse struct {
		CreatedAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
		PaymentHistory func(childComplexity int) int
		PhoneNumber    func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	GetSingleOrderResponse struct {
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		MerchantID func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		UserID     func(childComplexity int) int
	}

	GetSingleReviewResponse struct {
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		MerchantID    func(childComplexity int) int
		Rate          func(childComplexity int) int
		ReviewContent func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UserID        func(childComplexity int) int
	}

	GetSingleUserResponse struct {
		CreatedAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
		PaymentHistory func(childComplexity int) int
		PhoneNumber    func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	Mutation struct {
		CreateBike        func(childComplexity int, input *model.CreateBikeReq) int
		CreateBus         func(childComplexity int, input *model.CreateBusReq) int
		CreateCar         func(childComplexity int, input *model.CreateCarReq) int
		CreateDriver      func(childComplexity int, input *model.CreateDriverReq) int
		CreateKeke        func(childComplexity int, input *model.CreateKekeReq) int
		CreateMerchant    func(childComplexity int, input *model.CreateMerchantReq) int
		CreateOrder       func(childComplexity int, input *model.CreateOrderReq) int
		CreateReplyReview func(childComplexity int, input *model.CreateReviewReplyReq) int
		CreateReview      func(childComplexity int, input *model.CreateReviewReq) int
		CreateUser        func(childComplexity int, input *model.CreateUserReq) int
		DeleteBike        func(childComplexity int, id string) int
		DeleteBus         func(childComplexity int, id string) int
		DeleteCar         func(childComplexity int, id string) int
		DeleteDriver      func(childComplexity int, id string) int
		DeleteKeke        func(childComplexity int, id string) int
		DeleteMerchant    func(childComplexity int, id string) int
		DeleteOrder       func(childComplexity int, id string) int
		DeleteReplyReview func(childComplexity int, id string) int
		DeleteReview      func(childComplexity int, id string) int
		DeleteUser        func(childComplexity int, id string) int
		UpdateBike        func(childComplexity int, input *model.UpdateBikeReq) int
		UpdateBus         func(childComplexity int, input *model.UpdateBusReq) int
		UpdateCar         func(childComplexity int, input *model.UpdateCarReq) int
		UpdateDriver      func(childComplexity int, input *model.UpdateDriverReq) int
		UpdateKeke        func(childComplexity int, input *model.UpdateKekeReq) int
		UpdateMerchant    func(childComplexity int, input *model.UpdateMerchantReq) int
		UpdateOrder       func(childComplexity int, input *model.UpdateOrderReq) int
		UpdateReplyReview func(childComplexity int, input *model.UpdateReviewReplyReq) int
		UpdateReview      func(childComplexity int, input *model.UpdateReviewReq) int
		UpdateUser        func(childComplexity int, input *model.UpdateUserReq) int
	}

	Query struct {
		GetListBikes      func(childComplexity int, input model.GetListBikesReq) int
		GetListBuses      func(childComplexity int, input model.GetListBusesReq) int
		GetListCars       func(childComplexity int, input model.GetListCarsReq) int
		GetListDrivers    func(childComplexity int, input model.GetListDriversReq) int
		GetListKekes      func(childComplexity int, input model.GetListKekesReq) int
		GetListMerchant   func(childComplexity int, input model.GetListMerchantReq) int
		GetListOrders     func(childComplexity int, input model.GetListOrdersReq) int
		GetListReviews    func(childComplexity int, input model.GetListReviewsReq) int
		GetListUsers      func(childComplexity int, input model.GetListUsersReq) int
		GetReplyReviews   func(childComplexity int, id string) int
		GetSingleBike     func(childComplexity int, id string) int
		GetSingleBus      func(childComplexity int, id string) int
		GetSingleCar      func(childComplexity int, id string) int
		GetSingleDriver   func(childComplexity int, id string) int
		GetSingleKeke     func(childComplexity int, id string) int
		GetSingleMerchant func(childComplexity int, id string) int
		GetSingleOrder    func(childComplexity int, id string) int
		GetSingleReview   func(childComplexity int, id string) int
		GetSingleUser     func(childComplexity int, id string) int
	}

	ReviewComment struct {
		Content   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		ReviewID  func(childComplexity int) int
		SenderID  func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	UpdateBikeResponse struct {
		BikeModel    func(childComplexity int) int
		BikeNumber   func(childComplexity int) int
		BikeStatus   func(childComplexity int) int
		Colour       func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		EndPrice     func(childComplexity int) int
		ID           func(childComplexity int) int
		StartedPrice func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	UpdateBusResponse struct {
		BookingCount func(childComplexity int) int
		BusName      func(childComplexity int) int
		BusNumber    func(childComplexity int) int
		BusStatus    func(childComplexity int) int
		BusType      func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		EndPrice     func(childComplexity int) int
		ID           func(childComplexity int) int
		PlaceCount   func(childComplexity int) int
		StartedPrice func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	UpdateCarResponse struct {
		CarName      func(childComplexity int) int
		CarNumber    func(childComplexity int) int
		CarStatus    func(childComplexity int) int
		Colour       func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		EndPrice     func(childComplexity int) int
		ID           func(childComplexity int) int
		IsAirCondt   func(childComplexity int) int
		IsCovid      func(childComplexity int) int
		PlaceCount   func(childComplexity int) int
		StartedPrice func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	UpdateDriverResponse struct {
		CreatedAt   func(childComplexity int) int
		DriverName  func(childComplexity int) int
		Experience  func(childComplexity int) int
		ID          func(childComplexity int) int
		PhoneNumber func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	UpdateKekeResponse struct {
		Colour       func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		EndPrice     func(childComplexity int) int
		ID           func(childComplexity int) int
		KekeNumber   func(childComplexity int) int
		KekeStatus   func(childComplexity int) int
		PlaceCount   func(childComplexity int) int
		StartedPrice func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	UpdateMerchantResponse struct {
		CreatedAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
		PaymentHistory func(childComplexity int) int
		PhoneNumber    func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	UpdateOrderResponse struct {
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		MerchantID func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		UserID     func(childComplexity int) int
	}

	UpdateReviewReplyResponse struct {
		Content   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		ReviewID  func(childComplexity int) int
		SenderID  func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	UpdateReviewResponse struct {
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		MerchantID    func(childComplexity int) int
		Rate          func(childComplexity int) int
		ReviewContent func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UserID        func(childComplexity int) int
	}

	UpdateUserResponse struct {
		CreatedAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
		PaymentHistory func(childComplexity int) int
		PhoneNumber    func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreateBike(ctx context.Context, input *model.CreateBikeReq) (*model.CreateBikeResponse, error)
	UpdateBike(ctx context.Context, input *model.UpdateBikeReq) (*model.UpdateBikeResponse, error)
	DeleteBike(ctx context.Context, id string) (string, error)
	CreateBus(ctx context.Context, input *model.CreateBusReq) (*model.CreateBusResponse, error)
	UpdateBus(ctx context.Context, input *model.UpdateBusReq) (*model.UpdateBusResponse, error)
	DeleteBus(ctx context.Context, id string) (string, error)
	CreateCar(ctx context.Context, input *model.CreateCarReq) (*model.CreateCarResponse, error)
	UpdateCar(ctx context.Context, input *model.UpdateCarReq) (*model.UpdateCarResponse, error)
	DeleteCar(ctx context.Context, id string) (string, error)
	CreateUser(ctx context.Context, input *model.CreateUserReq) (*model.CreateUserResponse, error)
	UpdateUser(ctx context.Context, input *model.UpdateUserReq) (*model.UpdateUserResponse, error)
	CreateMerchant(ctx context.Context, input *model.CreateMerchantReq) (*model.CreateMerchantResponse, error)
	UpdateMerchant(ctx context.Context, input *model.UpdateMerchantReq) (*model.UpdateMerchantResponse, error)
	DeleteUser(ctx context.Context, id string) (string, error)
	DeleteMerchant(ctx context.Context, id string) (string, error)
	CreateDriver(ctx context.Context, input *model.CreateDriverReq) (*model.CreateDriverResponse, error)
	UpdateDriver(ctx context.Context, input *model.UpdateDriverReq) (*model.UpdateDriverResponse, error)
	DeleteDriver(ctx context.Context, id string) (string, error)
	CreateKeke(ctx context.Context, input *model.CreateKekeReq) (*model.CreateKekeResponse, error)
	UpdateKeke(ctx context.Context, input *model.UpdateKekeReq) (*model.UpdateKekeResponse, error)
	DeleteKeke(ctx context.Context, id string) (string, error)
	CreateOrder(ctx context.Context, input *model.CreateOrderReq) (*model.CreateOrderResponse, error)
	UpdateOrder(ctx context.Context, input *model.UpdateOrderReq) (*model.UpdateOrderResponse, error)
	DeleteOrder(ctx context.Context, id string) (string, error)
	CreateReview(ctx context.Context, input *model.CreateReviewReq) (*model.CreateReviewResponse, error)
	UpdateReview(ctx context.Context, input *model.UpdateReviewReq) (*model.UpdateReviewResponse, error)
	DeleteReview(ctx context.Context, id string) (string, error)
	CreateReplyReview(ctx context.Context, input *model.CreateReviewReplyReq) (*model.CreateReviewReplyResponse, error)
	UpdateReplyReview(ctx context.Context, input *model.UpdateReviewReplyReq) (*model.UpdateReviewReplyResponse, error)
	DeleteReplyReview(ctx context.Context, id string) (string, error)
}
type QueryResolver interface {
	GetListBikes(ctx context.Context, input model.GetListBikesReq) (*model.GetListBikesResponse, error)
	GetSingleBike(ctx context.Context, id string) (*model.GetSingleBikeResponse, error)
	GetListBuses(ctx context.Context, input model.GetListBusesReq) (*model.GetListBusesResponse, error)
	GetSingleBus(ctx context.Context, id string) (*model.GetSingleBusResponse, error)
	GetListCars(ctx context.Context, input model.GetListCarsReq) (*model.GetListCarsResponse, error)
	GetSingleCar(ctx context.Context, id string) (*model.GetSingleCarResponse, error)
	GetListUsers(ctx context.Context, input model.GetListUsersReq) (*model.GetListUsersResponse, error)
	GetSingleUser(ctx context.Context, id string) (*model.GetSingleUserResponse, error)
	GetListMerchant(ctx context.Context, input model.GetListMerchantReq) (*model.GetListMerchantResponse, error)
	GetSingleMerchant(ctx context.Context, id string) (*model.GetSingleMerchantResponse, error)
	GetListDrivers(ctx context.Context, input model.GetListDriversReq) (*model.GetListDriversResponse, error)
	GetSingleDriver(ctx context.Context, id string) (*model.GetSingleDriverResponse, error)
	GetListKekes(ctx context.Context, input model.GetListKekesReq) (*model.GetListKekesResponse, error)
	GetSingleKeke(ctx context.Context, id string) (*model.GetSingleKekeResponse, error)
	GetListOrders(ctx context.Context, input model.GetListOrdersReq) (*model.GetListOrdersResponse, error)
	GetSingleOrder(ctx context.Context, id string) (*model.GetSingleOrderResponse, error)
	GetListReviews(ctx context.Context, input model.GetListReviewsReq) (*model.GetListReviewsResponse, error)
	GetSingleReview(ctx context.Context, id string) (*model.GetSingleReviewResponse, error)
	GetReplyReviews(ctx context.Context, id string) (*model.GetReplyReviewsResponse, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "CreateBikeResponse.bike_model":
		if e.complexity.CreateBikeResponse.BikeModel == nil {
			break
		}

		return e.complexity.CreateBikeResponse.BikeModel(childComplexity), true

	case "CreateBikeResponse.bike_number":
		if e.complexity.CreateBikeResponse.BikeNumber == nil {
			break
		}

		return e.complexity.CreateBikeResponse.BikeNumber(childComplexity), true

	case "CreateBikeResponse.bike_status":
		if e.complexity.CreateBikeResponse.BikeStatus == nil {
			break
		}

		return e.complexity.CreateBikeResponse.BikeStatus(childComplexity), true

	case "CreateBikeResponse.colour":
		if e.complexity.CreateBikeResponse.Colour == nil {
			break
		}

		return e.complexity.CreateBikeResponse.Colour(childComplexity), true

	case "CreateBikeResponse.created_at":
		if e.complexity.CreateBikeResponse.CreatedAt == nil {
			break
		}

		return e.complexity.CreateBikeResponse.CreatedAt(childComplexity), true

	case "CreateBikeResponse.end_price":
		if e.complexity.CreateBikeResponse.EndPrice == nil {
			break
		}

		return e.complexity.CreateBikeResponse.EndPrice(childComplexity), true

	case "CreateBikeResponse.id":
		if e.complexity.CreateBikeResponse.ID == nil {
			break
		}

		return e.complexity.CreateBikeResponse.ID(childComplexity), true

	case "CreateBikeResponse.started_price":
		if e.complexity.CreateBikeResponse.StartedPrice == nil {
			break
		}

		return e.complexity.CreateBikeResponse.StartedPrice(childComplexity), true

	case "CreateBikeResponse.updated_at":
		if e.complexity.CreateBikeResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.CreateBikeResponse.UpdatedAt(childComplexity), true

	case "CreateBusResponse.booking_count":
		if e.complexity.CreateBusResponse.BookingCount == nil {
			break
		}

		return e.complexity.CreateBusResponse.BookingCount(childComplexity), true

	case "CreateBusResponse.bus_name":
		if e.complexity.CreateBusResponse.BusName == nil {
			break
		}

		return e.complexity.CreateBusResponse.BusName(childComplexity), true

	case "CreateBusResponse.bus_number":
		if e.complexity.CreateBusResponse.BusNumber == nil {
			break
		}

		return e.complexity.CreateBusResponse.BusNumber(childComplexity), true

	case "CreateBusResponse.bus_status":
		if e.complexity.CreateBusResponse.BusStatus == nil {
			break
		}

		return e.complexity.CreateBusResponse.BusStatus(childComplexity), true

	case "CreateBusResponse.bus_type":
		if e.complexity.CreateBusResponse.BusType == nil {
			break
		}

		return e.complexity.CreateBusResponse.BusType(childComplexity), true

	case "CreateBusResponse.created_at":
		if e.complexity.CreateBusResponse.CreatedAt == nil {
			break
		}

		return e.complexity.CreateBusResponse.CreatedAt(childComplexity), true

	case "CreateBusResponse.driver_id":
		if e.complexity.CreateBusResponse.DriverID == nil {
			break
		}

		return e.complexity.CreateBusResponse.DriverID(childComplexity), true

	case "CreateBusResponse.end_price":
		if e.complexity.CreateBusResponse.EndPrice == nil {
			break
		}

		return e.complexity.CreateBusResponse.EndPrice(childComplexity), true

	case "CreateBusResponse.id":
		if e.complexity.CreateBusResponse.ID == nil {
			break
		}

		return e.complexity.CreateBusResponse.ID(childComplexity), true

	case "CreateBusResponse.merchant_id":
		if e.complexity.CreateBusResponse.MerchantID == nil {
			break
		}

		return e.complexity.CreateBusResponse.MerchantID(childComplexity), true

	case "CreateBusResponse.place_count":
		if e.complexity.CreateBusResponse.PlaceCount == nil {
			break
		}

		return e.complexity.CreateBusResponse.PlaceCount(childComplexity), true

	case "CreateBusResponse.region_id":
		if e.complexity.CreateBusResponse.RegionID == nil {
			break
		}

		return e.complexity.CreateBusResponse.RegionID(childComplexity), true

	case "CreateBusResponse.started_price":
		if e.complexity.CreateBusResponse.StartedPrice == nil {
			break
		}

		return e.complexity.CreateBusResponse.StartedPrice(childComplexity), true

	case "CreateBusResponse.updated_at":
		if e.complexity.CreateBusResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.CreateBusResponse.UpdatedAt(childComplexity), true

	case "CreateCarResponse.car_name":
		if e.complexity.CreateCarResponse.CarName == nil {
			break
		}

		return e.complexity.CreateCarResponse.CarName(childComplexity), true

	case "CreateCarResponse.car_number":
		if e.complexity.CreateCarResponse.CarNumber == nil {
			break
		}

		return e.complexity.CreateCarResponse.CarNumber(childComplexity), true

	case "CreateCarResponse.car_status":
		if e.complexity.CreateCarResponse.CarStatus == nil {
			break
		}

		return e.complexity.CreateCarResponse.CarStatus(childComplexity), true

	case "CreateCarResponse.colour":
		if e.complexity.CreateCarResponse.Colour == nil {
			break
		}

		return e.complexity.CreateCarResponse.Colour(childComplexity), true

	case "CreateCarResponse.created_at":
		if e.complexity.CreateCarResponse.CreatedAt == nil {
			break
		}

		return e.complexity.CreateCarResponse.CreatedAt(childComplexity), true

	case "CreateCarResponse.end_price":
		if e.complexity.CreateCarResponse.EndPrice == nil {
			break
		}

		return e.complexity.CreateCarResponse.EndPrice(childComplexity), true

	case "CreateCarResponse.id":
		if e.complexity.CreateCarResponse.ID == nil {
			break
		}

		return e.complexity.CreateCarResponse.ID(childComplexity), true

	case "CreateCarResponse.is_air_condt":
		if e.complexity.CreateCarResponse.IsAirCondt == nil {
			break
		}

		return e.complexity.CreateCarResponse.IsAirCondt(childComplexity), true

	case "CreateCarResponse.is_covid":
		if e.complexity.CreateCarResponse.IsCovid == nil {
			break
		}

		return e.complexity.CreateCarResponse.IsCovid(childComplexity), true

	case "CreateCarResponse.place_count":
		if e.complexity.CreateCarResponse.PlaceCount == nil {
			break
		}

		return e.complexity.CreateCarResponse.PlaceCount(childComplexity), true

	case "CreateCarResponse.started_price":
		if e.complexity.CreateCarResponse.StartedPrice == nil {
			break
		}

		return e.complexity.CreateCarResponse.StartedPrice(childComplexity), true

	case "CreateCarResponse.updated_at":
		if e.complexity.CreateCarResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.CreateCarResponse.UpdatedAt(childComplexity), true

	case "CreateDriverResponse.created_at":
		if e.complexity.CreateDriverResponse.CreatedAt == nil {
			break
		}

		return e.complexity.CreateDriverResponse.CreatedAt(childComplexity), true

	case "CreateDriverResponse.driver_name":
		if e.complexity.CreateDriverResponse.DriverName == nil {
			break
		}

		return e.complexity.CreateDriverResponse.DriverName(childComplexity), true

	case "CreateDriverResponse.experience":
		if e.complexity.CreateDriverResponse.Experience == nil {
			break
		}

		return e.complexity.CreateDriverResponse.Experience(childComplexity), true

	case "CreateDriverResponse.id":
		if e.complexity.CreateDriverResponse.ID == nil {
			break
		}

		return e.complexity.CreateDriverResponse.ID(childComplexity), true

	case "CreateDriverResponse.phone_number":
		if e.complexity.CreateDriverResponse.PhoneNumber == nil {
			break
		}

		return e.complexity.CreateDriverResponse.PhoneNumber(childComplexity), true

	case "CreateDriverResponse.updated_at":
		if e.complexity.CreateDriverResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.CreateDriverResponse.UpdatedAt(childComplexity), true

	case "CreateKekeResponse.colour":
		if e.complexity.CreateKekeResponse.Colour == nil {
			break
		}

		return e.complexity.CreateKekeResponse.Colour(childComplexity), true

	case "CreateKekeResponse.created_at":
		if e.complexity.CreateKekeResponse.CreatedAt == nil {
			break
		}

		return e.complexity.CreateKekeResponse.CreatedAt(childComplexity), true

	case "CreateKekeResponse.end_price":
		if e.complexity.CreateKekeResponse.EndPrice == nil {
			break
		}

		return e.complexity.CreateKekeResponse.EndPrice(childComplexity), true

	case "CreateKekeResponse.id":
		if e.complexity.CreateKekeResponse.ID == nil {
			break
		}

		return e.complexity.CreateKekeResponse.ID(childComplexity), true

	case "CreateKekeResponse.keke_number":
		if e.complexity.CreateKekeResponse.KekeNumber == nil {
			break
		}

		return e.complexity.CreateKekeResponse.KekeNumber(childComplexity), true

	case "CreateKekeResponse.keke_status":
		if e.complexity.CreateKekeResponse.KekeStatus == nil {
			break
		}

		return e.complexity.CreateKekeResponse.KekeStatus(childComplexity), true

	case "CreateKekeResponse.place_count":
		if e.complexity.CreateKekeResponse.PlaceCount == nil {
			break
		}

		return e.complexity.CreateKekeResponse.PlaceCount(childComplexity), true

	case "CreateKekeResponse.started_price":
		if e.complexity.CreateKekeResponse.StartedPrice == nil {
			break
		}

		return e.complexity.CreateKekeResponse.StartedPrice(childComplexity), true

	case "CreateKekeResponse.updated_at":
		if e.complexity.CreateKekeResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.CreateKekeResponse.UpdatedAt(childComplexity), true

	case "CreateMerchantResponse.created_at":
		if e.complexity.CreateMerchantResponse.CreatedAt == nil {
			break
		}

		return e.complexity.CreateMerchantResponse.CreatedAt(childComplexity), true

	case "CreateMerchantResponse.id":
		if e.complexity.CreateMerchantResponse.ID == nil {
			break
		}

		return e.complexity.CreateMerchantResponse.ID(childComplexity), true

	case "CreateMerchantResponse.name":
		if e.complexity.CreateMerchantResponse.Name == nil {
			break
		}

		return e.complexity.CreateMerchantResponse.Name(childComplexity), true

	case "CreateMerchantResponse.payment_history":
		if e.complexity.CreateMerchantResponse.PaymentHistory == nil {
			break
		}

		return e.complexity.CreateMerchantResponse.PaymentHistory(childComplexity), true

	case "CreateMerchantResponse.phone_number":
		if e.complexity.CreateMerchantResponse.PhoneNumber == nil {
			break
		}

		return e.complexity.CreateMerchantResponse.PhoneNumber(childComplexity), true

	case "CreateMerchantResponse.updated_at":
		if e.complexity.CreateMerchantResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.CreateMerchantResponse.UpdatedAt(childComplexity), true

	case "CreateOrderResponse.created_at":
		if e.complexity.CreateOrderResponse.CreatedAt == nil {
			break
		}

		return e.complexity.CreateOrderResponse.CreatedAt(childComplexity), true

	case "CreateOrderResponse.id":
		if e.complexity.CreateOrderResponse.ID == nil {
			break
		}

		return e.complexity.CreateOrderResponse.ID(childComplexity), true

	case "CreateOrderResponse.merchant_id":
		if e.complexity.CreateOrderResponse.MerchantID == nil {
			break
		}

		return e.complexity.CreateOrderResponse.MerchantID(childComplexity), true

	case "CreateOrderResponse.updated_at":
		if e.complexity.CreateOrderResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.CreateOrderResponse.UpdatedAt(childComplexity), true

	case "CreateOrderResponse.user_id":
		if e.complexity.CreateOrderResponse.UserID == nil {
			break
		}

		return e.complexity.CreateOrderResponse.UserID(childComplexity), true

	case "CreateReviewReplyResponse.content":
		if e.complexity.CreateReviewReplyResponse.Content == nil {
			break
		}

		return e.complexity.CreateReviewReplyResponse.Content(childComplexity), true

	case "CreateReviewReplyResponse.created_at":
		if e.complexity.CreateReviewReplyResponse.CreatedAt == nil {
			break
		}

		return e.complexity.CreateReviewReplyResponse.CreatedAt(childComplexity), true

	case "CreateReviewReplyResponse.id":
		if e.complexity.CreateReviewReplyResponse.ID == nil {
			break
		}

		return e.complexity.CreateReviewReplyResponse.ID(childComplexity), true

	case "CreateReviewReplyResponse.review_id":
		if e.complexity.CreateReviewReplyResponse.ReviewID == nil {
			break
		}

		return e.complexity.CreateReviewReplyResponse.ReviewID(childComplexity), true

	case "CreateReviewReplyResponse.sender_id":
		if e.complexity.CreateReviewReplyResponse.SenderID == nil {
			break
		}

		return e.complexity.CreateReviewReplyResponse.SenderID(childComplexity), true

	case "CreateReviewReplyResponse.updated_at":
		if e.complexity.CreateReviewReplyResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.CreateReviewReplyResponse.UpdatedAt(childComplexity), true

	case "CreateReviewResponse.created_at":
		if e.complexity.CreateReviewResponse.CreatedAt == nil {
			break
		}

		return e.complexity.CreateReviewResponse.CreatedAt(childComplexity), true

	case "CreateReviewResponse.id":
		if e.complexity.CreateReviewResponse.ID == nil {
			break
		}

		return e.complexity.CreateReviewResponse.ID(childComplexity), true

	case "CreateReviewResponse.merchant_id":
		if e.complexity.CreateReviewResponse.MerchantID == nil {
			break
		}

		return e.complexity.CreateReviewResponse.MerchantID(childComplexity), true

	case "CreateReviewResponse.rate":
		if e.complexity.CreateReviewResponse.Rate == nil {
			break
		}

		return e.complexity.CreateReviewResponse.Rate(childComplexity), true

	case "CreateReviewResponse.review_content":
		if e.complexity.CreateReviewResponse.ReviewContent == nil {
			break
		}

		return e.complexity.CreateReviewResponse.ReviewContent(childComplexity), true

	case "CreateReviewResponse.updated_at":
		if e.complexity.CreateReviewResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.CreateReviewResponse.UpdatedAt(childComplexity), true

	case "CreateReviewResponse.user_id":
		if e.complexity.CreateReviewResponse.UserID == nil {
			break
		}

		return e.complexity.CreateReviewResponse.UserID(childComplexity), true

	case "CreateUserResponse.created_at":
		if e.complexity.CreateUserResponse.CreatedAt == nil {
			break
		}

		return e.complexity.CreateUserResponse.CreatedAt(childComplexity), true

	case "CreateUserResponse.id":
		if e.complexity.CreateUserResponse.ID == nil {
			break
		}

		return e.complexity.CreateUserResponse.ID(childComplexity), true

	case "CreateUserResponse.name":
		if e.complexity.CreateUserResponse.Name == nil {
			break
		}

		return e.complexity.CreateUserResponse.Name(childComplexity), true

	case "CreateUserResponse.payment_history":
		if e.complexity.CreateUserResponse.PaymentHistory == nil {
			break
		}

		return e.complexity.CreateUserResponse.PaymentHistory(childComplexity), true

	case "CreateUserResponse.phone_number":
		if e.complexity.CreateUserResponse.PhoneNumber == nil {
			break
		}

		return e.complexity.CreateUserResponse.PhoneNumber(childComplexity), true

	case "CreateUserResponse.updated_at":
		if e.complexity.CreateUserResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.CreateUserResponse.UpdatedAt(childComplexity), true

	case "GetListBikesResponse.count":
		if e.complexity.GetListBikesResponse.Count == nil {
			break
		}

		return e.complexity.GetListBikesResponse.Count(childComplexity), true

	case "GetListBikesResponse.getBikes":
		if e.complexity.GetListBikesResponse.GetBikes == nil {
			break
		}

		return e.complexity.GetListBikesResponse.GetBikes(childComplexity), true

	case "GetListBusesResponse.count":
		if e.complexity.GetListBusesResponse.Count == nil {
			break
		}

		return e.complexity.GetListBusesResponse.Count(childComplexity), true

	case "GetListBusesResponse.getBuses":
		if e.complexity.GetListBusesResponse.GetBuses == nil {
			break
		}

		return e.complexity.GetListBusesResponse.GetBuses(childComplexity), true

	case "GetListCarsResponse.count":
		if e.complexity.GetListCarsResponse.Count == nil {
			break
		}

		return e.complexity.GetListCarsResponse.Count(childComplexity), true

	case "GetListCarsResponse.getCars":
		if e.complexity.GetListCarsResponse.GetCars == nil {
			break
		}

		return e.complexity.GetListCarsResponse.GetCars(childComplexity), true

	case "GetListDriversResponse.count":
		if e.complexity.GetListDriversResponse.Count == nil {
			break
		}

		return e.complexity.GetListDriversResponse.Count(childComplexity), true

	case "GetListDriversResponse.getDrivers":
		if e.complexity.GetListDriversResponse.GetDrivers == nil {
			break
		}

		return e.complexity.GetListDriversResponse.GetDrivers(childComplexity), true

	case "GetListKekesResponse.count":
		if e.complexity.GetListKekesResponse.Count == nil {
			break
		}

		return e.complexity.GetListKekesResponse.Count(childComplexity), true

	case "GetListKekesResponse.getKekes":
		if e.complexity.GetListKekesResponse.GetKekes == nil {
			break
		}

		return e.complexity.GetListKekesResponse.GetKekes(childComplexity), true

	case "GetListMerchantResponse.count":
		if e.complexity.GetListMerchantResponse.Count == nil {
			break
		}

		return e.complexity.GetListMerchantResponse.Count(childComplexity), true

	case "GetListMerchantResponse.getmerchants":
		if e.complexity.GetListMerchantResponse.Getmerchants == nil {
			break
		}

		return e.complexity.GetListMerchantResponse.Getmerchants(childComplexity), true

	case "GetListOrdersResponse.count":
		if e.complexity.GetListOrdersResponse.Count == nil {
			break
		}

		return e.complexity.GetListOrdersResponse.Count(childComplexity), true

	case "GetListOrdersResponse.getorders":
		if e.complexity.GetListOrdersResponse.Getorders == nil {
			break
		}

		return e.complexity.GetListOrdersResponse.Getorders(childComplexity), true

	case "GetListReviewsResponse.count":
		if e.complexity.GetListReviewsResponse.Count == nil {
			break
		}

		return e.complexity.GetListReviewsResponse.Count(childComplexity), true

	case "GetListReviewsResponse.getReviews":
		if e.complexity.GetListReviewsResponse.GetReviews == nil {
			break
		}

		return e.complexity.GetListReviewsResponse.GetReviews(childComplexity), true

	case "GetListUsersResponse.count":
		if e.complexity.GetListUsersResponse.Count == nil {
			break
		}

		return e.complexity.GetListUsersResponse.Count(childComplexity), true

	case "GetListUsersResponse.getUsers":
		if e.complexity.GetListUsersResponse.GetUsers == nil {
			break
		}

		return e.complexity.GetListUsersResponse.GetUsers(childComplexity), true

	case "GetReplyReviewsResponse.count":
		if e.complexity.GetReplyReviewsResponse.Count == nil {
			break
		}

		return e.complexity.GetReplyReviewsResponse.Count(childComplexity), true

	case "GetReplyReviewsResponse.getReviews":
		if e.complexity.GetReplyReviewsResponse.GetReviews == nil {
			break
		}

		return e.complexity.GetReplyReviewsResponse.GetReviews(childComplexity), true

	case "GetSingleBikeResponse.bike_model":
		if e.complexity.GetSingleBikeResponse.BikeModel == nil {
			break
		}

		return e.complexity.GetSingleBikeResponse.BikeModel(childComplexity), true

	case "GetSingleBikeResponse.bike_number":
		if e.complexity.GetSingleBikeResponse.BikeNumber == nil {
			break
		}

		return e.complexity.GetSingleBikeResponse.BikeNumber(childComplexity), true

	case "GetSingleBikeResponse.bike_status":
		if e.complexity.GetSingleBikeResponse.BikeStatus == nil {
			break
		}

		return e.complexity.GetSingleBikeResponse.BikeStatus(childComplexity), true

	case "GetSingleBikeResponse.colour":
		if e.complexity.GetSingleBikeResponse.Colour == nil {
			break
		}

		return e.complexity.GetSingleBikeResponse.Colour(childComplexity), true

	case "GetSingleBikeResponse.created_at":
		if e.complexity.GetSingleBikeResponse.CreatedAt == nil {
			break
		}

		return e.complexity.GetSingleBikeResponse.CreatedAt(childComplexity), true

	case "GetSingleBikeResponse.end_price":
		if e.complexity.GetSingleBikeResponse.EndPrice == nil {
			break
		}

		return e.complexity.GetSingleBikeResponse.EndPrice(childComplexity), true

	case "GetSingleBikeResponse.id":
		if e.complexity.GetSingleBikeResponse.ID == nil {
			break
		}

		return e.complexity.GetSingleBikeResponse.ID(childComplexity), true

	case "GetSingleBikeResponse.started_price":
		if e.complexity.GetSingleBikeResponse.StartedPrice == nil {
			break
		}

		return e.complexity.GetSingleBikeResponse.StartedPrice(childComplexity), true

	case "GetSingleBikeResponse.updated_at":
		if e.complexity.GetSingleBikeResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.GetSingleBikeResponse.UpdatedAt(childComplexity), true

	case "GetSingleBusResponse.booking_count":
		if e.complexity.GetSingleBusResponse.BookingCount == nil {
			break
		}

		return e.complexity.GetSingleBusResponse.BookingCount(childComplexity), true

	case "GetSingleBusResponse.bus_name":
		if e.complexity.GetSingleBusResponse.BusName == nil {
			break
		}

		return e.complexity.GetSingleBusResponse.BusName(childComplexity), true

	case "GetSingleBusResponse.bus_number":
		if e.complexity.GetSingleBusResponse.BusNumber == nil {
			break
		}

		return e.complexity.GetSingleBusResponse.BusNumber(childComplexity), true

	case "GetSingleBusResponse.bus_status":
		if e.complexity.GetSingleBusResponse.BusStatus == nil {
			break
		}

		return e.complexity.GetSingleBusResponse.BusStatus(childComplexity), true

	case "GetSingleBusResponse.bus_type":
		if e.complexity.GetSingleBusResponse.BusType == nil {
			break
		}

		return e.complexity.GetSingleBusResponse.BusType(childComplexity), true

	case "GetSingleBusResponse.created_at":
		if e.complexity.GetSingleBusResponse.CreatedAt == nil {
			break
		}

		return e.complexity.GetSingleBusResponse.CreatedAt(childComplexity), true

	case "GetSingleBusResponse.driver_id":
		if e.complexity.GetSingleBusResponse.DriverID == nil {
			break
		}

		return e.complexity.GetSingleBusResponse.DriverID(childComplexity), true

	case "GetSingleBusResponse.end_price":
		if e.complexity.GetSingleBusResponse.EndPrice == nil {
			break
		}

		return e.complexity.GetSingleBusResponse.EndPrice(childComplexity), true

	case "GetSingleBusResponse.id":
		if e.complexity.GetSingleBusResponse.ID == nil {
			break
		}

		return e.complexity.GetSingleBusResponse.ID(childComplexity), true

	case "GetSingleBusResponse.merchant_id":
		if e.complexity.GetSingleBusResponse.MerchantID == nil {
			break
		}

		return e.complexity.GetSingleBusResponse.MerchantID(childComplexity), true

	case "GetSingleBusResponse.place_count":
		if e.complexity.GetSingleBusResponse.PlaceCount == nil {
			break
		}

		return e.complexity.GetSingleBusResponse.PlaceCount(childComplexity), true

	case "GetSingleBusResponse.region_id":
		if e.complexity.GetSingleBusResponse.RegionID == nil {
			break
		}

		return e.complexity.GetSingleBusResponse.RegionID(childComplexity), true

	case "GetSingleBusResponse.started_price":
		if e.complexity.GetSingleBusResponse.StartedPrice == nil {
			break
		}

		return e.complexity.GetSingleBusResponse.StartedPrice(childComplexity), true

	case "GetSingleBusResponse.updated_at":
		if e.complexity.GetSingleBusResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.GetSingleBusResponse.UpdatedAt(childComplexity), true

	case "GetSingleCarResponse.car_name":
		if e.complexity.GetSingleCarResponse.CarName == nil {
			break
		}

		return e.complexity.GetSingleCarResponse.CarName(childComplexity), true

	case "GetSingleCarResponse.car_number":
		if e.complexity.GetSingleCarResponse.CarNumber == nil {
			break
		}

		return e.complexity.GetSingleCarResponse.CarNumber(childComplexity), true

	case "GetSingleCarResponse.car_status":
		if e.complexity.GetSingleCarResponse.CarStatus == nil {
			break
		}

		return e.complexity.GetSingleCarResponse.CarStatus(childComplexity), true

	case "GetSingleCarResponse.colour":
		if e.complexity.GetSingleCarResponse.Colour == nil {
			break
		}

		return e.complexity.GetSingleCarResponse.Colour(childComplexity), true

	case "GetSingleCarResponse.created_at":
		if e.complexity.GetSingleCarResponse.CreatedAt == nil {
			break
		}

		return e.complexity.GetSingleCarResponse.CreatedAt(childComplexity), true

	case "GetSingleCarResponse.end_price":
		if e.complexity.GetSingleCarResponse.EndPrice == nil {
			break
		}

		return e.complexity.GetSingleCarResponse.EndPrice(childComplexity), true

	case "GetSingleCarResponse.id":
		if e.complexity.GetSingleCarResponse.ID == nil {
			break
		}

		return e.complexity.GetSingleCarResponse.ID(childComplexity), true

	case "GetSingleCarResponse.is_air_condt":
		if e.complexity.GetSingleCarResponse.IsAirCondt == nil {
			break
		}

		return e.complexity.GetSingleCarResponse.IsAirCondt(childComplexity), true

	case "GetSingleCarResponse.is_covid":
		if e.complexity.GetSingleCarResponse.IsCovid == nil {
			break
		}

		return e.complexity.GetSingleCarResponse.IsCovid(childComplexity), true

	case "GetSingleCarResponse.place_count":
		if e.complexity.GetSingleCarResponse.PlaceCount == nil {
			break
		}

		return e.complexity.GetSingleCarResponse.PlaceCount(childComplexity), true

	case "GetSingleCarResponse.started_price":
		if e.complexity.GetSingleCarResponse.StartedPrice == nil {
			break
		}

		return e.complexity.GetSingleCarResponse.StartedPrice(childComplexity), true

	case "GetSingleCarResponse.updated_at":
		if e.complexity.GetSingleCarResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.GetSingleCarResponse.UpdatedAt(childComplexity), true

	case "GetSingleDriverResponse.created_at":
		if e.complexity.GetSingleDriverResponse.CreatedAt == nil {
			break
		}

		return e.complexity.GetSingleDriverResponse.CreatedAt(childComplexity), true

	case "GetSingleDriverResponse.driver_name":
		if e.complexity.GetSingleDriverResponse.DriverName == nil {
			break
		}

		return e.complexity.GetSingleDriverResponse.DriverName(childComplexity), true

	case "GetSingleDriverResponse.experience":
		if e.complexity.GetSingleDriverResponse.Experience == nil {
			break
		}

		return e.complexity.GetSingleDriverResponse.Experience(childComplexity), true

	case "GetSingleDriverResponse.id":
		if e.complexity.GetSingleDriverResponse.ID == nil {
			break
		}

		return e.complexity.GetSingleDriverResponse.ID(childComplexity), true

	case "GetSingleDriverResponse.phone_number":
		if e.complexity.GetSingleDriverResponse.PhoneNumber == nil {
			break
		}

		return e.complexity.GetSingleDriverResponse.PhoneNumber(childComplexity), true

	case "GetSingleDriverResponse.updated_at":
		if e.complexity.GetSingleDriverResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.GetSingleDriverResponse.UpdatedAt(childComplexity), true

	case "GetSingleKekeResponse.colour":
		if e.complexity.GetSingleKekeResponse.Colour == nil {
			break
		}

		return e.complexity.GetSingleKekeResponse.Colour(childComplexity), true

	case "GetSingleKekeResponse.created_at":
		if e.complexity.GetSingleKekeResponse.CreatedAt == nil {
			break
		}

		return e.complexity.GetSingleKekeResponse.CreatedAt(childComplexity), true

	case "GetSingleKekeResponse.end_price":
		if e.complexity.GetSingleKekeResponse.EndPrice == nil {
			break
		}

		return e.complexity.GetSingleKekeResponse.EndPrice(childComplexity), true

	case "GetSingleKekeResponse.id":
		if e.complexity.GetSingleKekeResponse.ID == nil {
			break
		}

		return e.complexity.GetSingleKekeResponse.ID(childComplexity), true

	case "GetSingleKekeResponse.keke_number":
		if e.complexity.GetSingleKekeResponse.KekeNumber == nil {
			break
		}

		return e.complexity.GetSingleKekeResponse.KekeNumber(childComplexity), true

	case "GetSingleKekeResponse.keke_status":
		if e.complexity.GetSingleKekeResponse.KekeStatus == nil {
			break
		}

		return e.complexity.GetSingleKekeResponse.KekeStatus(childComplexity), true

	case "GetSingleKekeResponse.place_count":
		if e.complexity.GetSingleKekeResponse.PlaceCount == nil {
			break
		}

		return e.complexity.GetSingleKekeResponse.PlaceCount(childComplexity), true

	case "GetSingleKekeResponse.started_price":
		if e.complexity.GetSingleKekeResponse.StartedPrice == nil {
			break
		}

		return e.complexity.GetSingleKekeResponse.StartedPrice(childComplexity), true

	case "GetSingleKekeResponse.updated_at":
		if e.complexity.GetSingleKekeResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.GetSingleKekeResponse.UpdatedAt(childComplexity), true

	case "GetSingleMerchantResponse.created_at":
		if e.complexity.GetSingleMerchantResponse.CreatedAt == nil {
			break
		}

		return e.complexity.GetSingleMerchantResponse.CreatedAt(childComplexity), true

	case "GetSingleMerchantResponse.id":
		if e.complexity.GetSingleMerchantResponse.ID == nil {
			break
		}

		return e.complexity.GetSingleMerchantResponse.ID(childComplexity), true

	case "GetSingleMerchantResponse.name":
		if e.complexity.GetSingleMerchantResponse.Name == nil {
			break
		}

		return e.complexity.GetSingleMerchantResponse.Name(childComplexity), true

	case "GetSingleMerchantResponse.payment_history":
		if e.complexity.GetSingleMerchantResponse.PaymentHistory == nil {
			break
		}

		return e.complexity.GetSingleMerchantResponse.PaymentHistory(childComplexity), true

	case "GetSingleMerchantResponse.phone_number":
		if e.complexity.GetSingleMerchantResponse.PhoneNumber == nil {
			break
		}

		return e.complexity.GetSingleMerchantResponse.PhoneNumber(childComplexity), true

	case "GetSingleMerchantResponse.updated_at":
		if e.complexity.GetSingleMerchantResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.GetSingleMerchantResponse.UpdatedAt(childComplexity), true

	case "GetSingleOrderResponse.created_at":
		if e.complexity.GetSingleOrderResponse.CreatedAt == nil {
			break
		}

		return e.complexity.GetSingleOrderResponse.CreatedAt(childComplexity), true

	case "GetSingleOrderResponse.id":
		if e.complexity.GetSingleOrderResponse.ID == nil {
			break
		}

		return e.complexity.GetSingleOrderResponse.ID(childComplexity), true

	case "GetSingleOrderResponse.merchant_id":
		if e.complexity.GetSingleOrderResponse.MerchantID == nil {
			break
		}

		return e.complexity.GetSingleOrderResponse.MerchantID(childComplexity), true

	case "GetSingleOrderResponse.updated_at":
		if e.complexity.GetSingleOrderResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.GetSingleOrderResponse.UpdatedAt(childComplexity), true

	case "GetSingleOrderResponse.user_id":
		if e.complexity.GetSingleOrderResponse.UserID == nil {
			break
		}

		return e.complexity.GetSingleOrderResponse.UserID(childComplexity), true

	case "GetSingleReviewResponse.created_at":
		if e.complexity.GetSingleReviewResponse.CreatedAt == nil {
			break
		}

		return e.complexity.GetSingleReviewResponse.CreatedAt(childComplexity), true

	case "GetSingleReviewResponse.id":
		if e.complexity.GetSingleReviewResponse.ID == nil {
			break
		}

		return e.complexity.GetSingleReviewResponse.ID(childComplexity), true

	case "GetSingleReviewResponse.merchant_id":
		if e.complexity.GetSingleReviewResponse.MerchantID == nil {
			break
		}

		return e.complexity.GetSingleReviewResponse.MerchantID(childComplexity), true

	case "GetSingleReviewResponse.rate":
		if e.complexity.GetSingleReviewResponse.Rate == nil {
			break
		}

		return e.complexity.GetSingleReviewResponse.Rate(childComplexity), true

	case "GetSingleReviewResponse.review_content":
		if e.complexity.GetSingleReviewResponse.ReviewContent == nil {
			break
		}

		return e.complexity.GetSingleReviewResponse.ReviewContent(childComplexity), true

	case "GetSingleReviewResponse.updated_at":
		if e.complexity.GetSingleReviewResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.GetSingleReviewResponse.UpdatedAt(childComplexity), true

	case "GetSingleReviewResponse.user_id":
		if e.complexity.GetSingleReviewResponse.UserID == nil {
			break
		}

		return e.complexity.GetSingleReviewResponse.UserID(childComplexity), true

	case "GetSingleUserResponse.created_at":
		if e.complexity.GetSingleUserResponse.CreatedAt == nil {
			break
		}

		return e.complexity.GetSingleUserResponse.CreatedAt(childComplexity), true

	case "GetSingleUserResponse.id":
		if e.complexity.GetSingleUserResponse.ID == nil {
			break
		}

		return e.complexity.GetSingleUserResponse.ID(childComplexity), true

	case "GetSingleUserResponse.name":
		if e.complexity.GetSingleUserResponse.Name == nil {
			break
		}

		return e.complexity.GetSingleUserResponse.Name(childComplexity), true

	case "GetSingleUserResponse.payment_history":
		if e.complexity.GetSingleUserResponse.PaymentHistory == nil {
			break
		}

		return e.complexity.GetSingleUserResponse.PaymentHistory(childComplexity), true

	case "GetSingleUserResponse.phone_number":
		if e.complexity.GetSingleUserResponse.PhoneNumber == nil {
			break
		}

		return e.complexity.GetSingleUserResponse.PhoneNumber(childComplexity), true

	case "GetSingleUserResponse.updated_at":
		if e.complexity.GetSingleUserResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.GetSingleUserResponse.UpdatedAt(childComplexity), true

	case "Mutation.createBike":
		if e.complexity.Mutation.CreateBike == nil {
			break
		}

		args, err := ec.field_Mutation_createBike_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBike(childComplexity, args["input"].(*model.CreateBikeReq)), true

	case "Mutation.createBus":
		if e.complexity.Mutation.CreateBus == nil {
			break
		}

		args, err := ec.field_Mutation_createBus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBus(childComplexity, args["input"].(*model.CreateBusReq)), true

	case "Mutation.createCar":
		if e.complexity.Mutation.CreateCar == nil {
			break
		}

		args, err := ec.field_Mutation_createCar_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCar(childComplexity, args["input"].(*model.CreateCarReq)), true

	case "Mutation.createDriver":
		if e.complexity.Mutation.CreateDriver == nil {
			break
		}

		args, err := ec.field_Mutation_createDriver_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDriver(childComplexity, args["input"].(*model.CreateDriverReq)), true

	case "Mutation.createKeke":
		if e.complexity.Mutation.CreateKeke == nil {
			break
		}

		args, err := ec.field_Mutation_createKeke_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateKeke(childComplexity, args["input"].(*model.CreateKekeReq)), true

	case "Mutation.createMerchant":
		if e.complexity.Mutation.CreateMerchant == nil {
			break
		}

		args, err := ec.field_Mutation_createMerchant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMerchant(childComplexity, args["input"].(*model.CreateMerchantReq)), true

	case "Mutation.createOrder":
		if e.complexity.Mutation.CreateOrder == nil {
			break
		}

		args, err := ec.field_Mutation_createOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrder(childComplexity, args["input"].(*model.CreateOrderReq)), true

	case "Mutation.createReplyReview":
		if e.complexity.Mutation.CreateReplyReview == nil {
			break
		}

		args, err := ec.field_Mutation_createReplyReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateReplyReview(childComplexity, args["input"].(*model.CreateReviewReplyReq)), true

	case "Mutation.createReview":
		if e.complexity.Mutation.CreateReview == nil {
			break
		}

		args, err := ec.field_Mutation_createReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateReview(childComplexity, args["input"].(*model.CreateReviewReq)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(*model.CreateUserReq)), true

	case "Mutation.deleteBike":
		if e.complexity.Mutation.DeleteBike == nil {
			break
		}

		args, err := ec.field_Mutation_deleteBike_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteBike(childComplexity, args["id"].(string)), true

	case "Mutation.deleteBus":
		if e.complexity.Mutation.DeleteBus == nil {
			break
		}

		args, err := ec.field_Mutation_deleteBus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteBus(childComplexity, args["id"].(string)), true

	case "Mutation.deleteCar":
		if e.complexity.Mutation.DeleteCar == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCar_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCar(childComplexity, args["id"].(string)), true

	case "Mutation.deleteDriver":
		if e.complexity.Mutation.DeleteDriver == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDriver_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriver(childComplexity, args["id"].(string)), true

	case "Mutation.deleteKeke":
		if e.complexity.Mutation.DeleteKeke == nil {
			break
		}

		args, err := ec.field_Mutation_deleteKeke_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteKeke(childComplexity, args["id"].(string)), true

	case "Mutation.deleteMerchant":
		if e.complexity.Mutation.DeleteMerchant == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMerchant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMerchant(childComplexity, args["id"].(string)), true

	case "Mutation.deleteOrder":
		if e.complexity.Mutation.DeleteOrder == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOrder(childComplexity, args["id"].(string)), true

	case "Mutation.deleteReplyReview":
		if e.complexity.Mutation.DeleteReplyReview == nil {
			break
		}

		args, err := ec.field_Mutation_deleteReplyReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteReplyReview(childComplexity, args["id"].(string)), true

	case "Mutation.deleteReview":
		if e.complexity.Mutation.DeleteReview == nil {
			break
		}

		args, err := ec.field_Mutation_deleteReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteReview(childComplexity, args["id"].(string)), true

	case "Mutation.deleteUser":
		if e.complexity.Mutation.DeleteUser == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUser(childComplexity, args["id"].(string)), true

	case "Mutation.updateBike":
		if e.complexity.Mutation.UpdateBike == nil {
			break
		}

		args, err := ec.field_Mutation_updateBike_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBike(childComplexity, args["input"].(*model.UpdateBikeReq)), true

	case "Mutation.updateBus":
		if e.complexity.Mutation.UpdateBus == nil {
			break
		}

		args, err := ec.field_Mutation_updateBus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBus(childComplexity, args["input"].(*model.UpdateBusReq)), true

	case "Mutation.updateCar":
		if e.complexity.Mutation.UpdateCar == nil {
			break
		}

		args, err := ec.field_Mutation_updateCar_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCar(childComplexity, args["input"].(*model.UpdateCarReq)), true

	case "Mutation.updateDriver":
		if e.complexity.Mutation.UpdateDriver == nil {
			break
		}

		args, err := ec.field_Mutation_updateDriver_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriver(childComplexity, args["input"].(*model.UpdateDriverReq)), true

	case "Mutation.updateKeke":
		if e.complexity.Mutation.UpdateKeke == nil {
			break
		}

		args, err := ec.field_Mutation_updateKeke_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateKeke(childComplexity, args["input"].(*model.UpdateKekeReq)), true

	case "Mutation.updateMerchant":
		if e.complexity.Mutation.UpdateMerchant == nil {
			break
		}

		args, err := ec.field_Mutation_updateMerchant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMerchant(childComplexity, args["input"].(*model.UpdateMerchantReq)), true

	case "Mutation.updateOrder":
		if e.complexity.Mutation.UpdateOrder == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrder(childComplexity, args["input"].(*model.UpdateOrderReq)), true

	case "Mutation.updateReplyReview":
		if e.complexity.Mutation.UpdateReplyReview == nil {
			break
		}

		args, err := ec.field_Mutation_updateReplyReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateReplyReview(childComplexity, args["input"].(*model.UpdateReviewReplyReq)), true

	case "Mutation.updateReview":
		if e.complexity.Mutation.UpdateReview == nil {
			break
		}

		args, err := ec.field_Mutation_updateReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateReview(childComplexity, args["input"].(*model.UpdateReviewReq)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["input"].(*model.UpdateUserReq)), true

	case "Query.getListBikes":
		if e.complexity.Query.GetListBikes == nil {
			break
		}

		args, err := ec.field_Query_getListBikes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetListBikes(childComplexity, args["input"].(model.GetListBikesReq)), true

	case "Query.getListBuses":
		if e.complexity.Query.GetListBuses == nil {
			break
		}

		args, err := ec.field_Query_getListBuses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetListBuses(childComplexity, args["input"].(model.GetListBusesReq)), true

	case "Query.getListCars":
		if e.complexity.Query.GetListCars == nil {
			break
		}

		args, err := ec.field_Query_getListCars_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetListCars(childComplexity, args["input"].(model.GetListCarsReq)), true

	case "Query.getListDrivers":
		if e.complexity.Query.GetListDrivers == nil {
			break
		}

		args, err := ec.field_Query_getListDrivers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetListDrivers(childComplexity, args["input"].(model.GetListDriversReq)), true

	case "Query.getListKekes":
		if e.complexity.Query.GetListKekes == nil {
			break
		}

		args, err := ec.field_Query_getListKekes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetListKekes(childComplexity, args["input"].(model.GetListKekesReq)), true

	case "Query.getListMerchant":
		if e.complexity.Query.GetListMerchant == nil {
			break
		}

		args, err := ec.field_Query_getListMerchant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetListMerchant(childComplexity, args["input"].(model.GetListMerchantReq)), true

	case "Query.getListOrders":
		if e.complexity.Query.GetListOrders == nil {
			break
		}

		args, err := ec.field_Query_getListOrders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetListOrders(childComplexity, args["input"].(model.GetListOrdersReq)), true

	case "Query.getListReviews":
		if e.complexity.Query.GetListReviews == nil {
			break
		}

		args, err := ec.field_Query_getListReviews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetListReviews(childComplexity, args["input"].(model.GetListReviewsReq)), true

	case "Query.getListUsers":
		if e.complexity.Query.GetListUsers == nil {
			break
		}

		args, err := ec.field_Query_getListUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetListUsers(childComplexity, args["input"].(model.GetListUsersReq)), true

	case "Query.GetReplyReviews":
		if e.complexity.Query.GetReplyReviews == nil {
			break
		}

		args, err := ec.field_Query_GetReplyReviews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetReplyReviews(childComplexity, args["id"].(string)), true

	case "Query.getSingleBike":
		if e.complexity.Query.GetSingleBike == nil {
			break
		}

		args, err := ec.field_Query_getSingleBike_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSingleBike(childComplexity, args["id"].(string)), true

	case "Query.getSingleBus":
		if e.complexity.Query.GetSingleBus == nil {
			break
		}

		args, err := ec.field_Query_getSingleBus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSingleBus(childComplexity, args["id"].(string)), true

	case "Query.getSingleCar":
		if e.complexity.Query.GetSingleCar == nil {
			break
		}

		args, err := ec.field_Query_getSingleCar_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSingleCar(childComplexity, args["id"].(string)), true

	case "Query.getSingleDriver":
		if e.complexity.Query.GetSingleDriver == nil {
			break
		}

		args, err := ec.field_Query_getSingleDriver_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSingleDriver(childComplexity, args["id"].(string)), true

	case "Query.getSingleKeke":
		if e.complexity.Query.GetSingleKeke == nil {
			break
		}

		args, err := ec.field_Query_getSingleKeke_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSingleKeke(childComplexity, args["id"].(string)), true

	case "Query.getSingleMerchant":
		if e.complexity.Query.GetSingleMerchant == nil {
			break
		}

		args, err := ec.field_Query_getSingleMerchant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSingleMerchant(childComplexity, args["id"].(string)), true

	case "Query.getSingleOrder":
		if e.complexity.Query.GetSingleOrder == nil {
			break
		}

		args, err := ec.field_Query_getSingleOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSingleOrder(childComplexity, args["id"].(string)), true

	case "Query.getSingleReview":
		if e.complexity.Query.GetSingleReview == nil {
			break
		}

		args, err := ec.field_Query_getSingleReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSingleReview(childComplexity, args["id"].(string)), true

	case "Query.getSingleUser":
		if e.complexity.Query.GetSingleUser == nil {
			break
		}

		args, err := ec.field_Query_getSingleUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSingleUser(childComplexity, args["id"].(string)), true

	case "ReviewComment.content":
		if e.complexity.ReviewComment.Content == nil {
			break
		}

		return e.complexity.ReviewComment.Content(childComplexity), true

	case "ReviewComment.created_at":
		if e.complexity.ReviewComment.CreatedAt == nil {
			break
		}

		return e.complexity.ReviewComment.CreatedAt(childComplexity), true

	case "ReviewComment.id":
		if e.complexity.ReviewComment.ID == nil {
			break
		}

		return e.complexity.ReviewComment.ID(childComplexity), true

	case "ReviewComment.review_id":
		if e.complexity.ReviewComment.ReviewID == nil {
			break
		}

		return e.complexity.ReviewComment.ReviewID(childComplexity), true

	case "ReviewComment.sender_id":
		if e.complexity.ReviewComment.SenderID == nil {
			break
		}

		return e.complexity.ReviewComment.SenderID(childComplexity), true

	case "ReviewComment.updated_at":
		if e.complexity.ReviewComment.UpdatedAt == nil {
			break
		}

		return e.complexity.ReviewComment.UpdatedAt(childComplexity), true

	case "UpdateBikeResponse.bike_model":
		if e.complexity.UpdateBikeResponse.BikeModel == nil {
			break
		}

		return e.complexity.UpdateBikeResponse.BikeModel(childComplexity), true

	case "UpdateBikeResponse.bike_number":
		if e.complexity.UpdateBikeResponse.BikeNumber == nil {
			break
		}

		return e.complexity.UpdateBikeResponse.BikeNumber(childComplexity), true

	case "UpdateBikeResponse.bike_status":
		if e.complexity.UpdateBikeResponse.BikeStatus == nil {
			break
		}

		return e.complexity.UpdateBikeResponse.BikeStatus(childComplexity), true

	case "UpdateBikeResponse.colour":
		if e.complexity.UpdateBikeResponse.Colour == nil {
			break
		}

		return e.complexity.UpdateBikeResponse.Colour(childComplexity), true

	case "UpdateBikeResponse.created_at":
		if e.complexity.UpdateBikeResponse.CreatedAt == nil {
			break
		}

		return e.complexity.UpdateBikeResponse.CreatedAt(childComplexity), true

	case "UpdateBikeResponse.end_price":
		if e.complexity.UpdateBikeResponse.EndPrice == nil {
			break
		}

		return e.complexity.UpdateBikeResponse.EndPrice(childComplexity), true

	case "UpdateBikeResponse.id":
		if e.complexity.UpdateBikeResponse.ID == nil {
			break
		}

		return e.complexity.UpdateBikeResponse.ID(childComplexity), true

	case "UpdateBikeResponse.started_price":
		if e.complexity.UpdateBikeResponse.StartedPrice == nil {
			break
		}

		return e.complexity.UpdateBikeResponse.StartedPrice(childComplexity), true

	case "UpdateBikeResponse.updated_at":
		if e.complexity.UpdateBikeResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.UpdateBikeResponse.UpdatedAt(childComplexity), true

	case "UpdateBusResponse.booking_count":
		if e.complexity.UpdateBusResponse.BookingCount == nil {
			break
		}

		return e.complexity.UpdateBusResponse.BookingCount(childComplexity), true

	case "UpdateBusResponse.bus_name":
		if e.complexity.UpdateBusResponse.BusName == nil {
			break
		}

		return e.complexity.UpdateBusResponse.BusName(childComplexity), true

	case "UpdateBusResponse.bus_number":
		if e.complexity.UpdateBusResponse.BusNumber == nil {
			break
		}

		return e.complexity.UpdateBusResponse.BusNumber(childComplexity), true

	case "UpdateBusResponse.bus_status":
		if e.complexity.UpdateBusResponse.BusStatus == nil {
			break
		}

		return e.complexity.UpdateBusResponse.BusStatus(childComplexity), true

	case "UpdateBusResponse.bus_type":
		if e.complexity.UpdateBusResponse.BusType == nil {
			break
		}

		return e.complexity.UpdateBusResponse.BusType(childComplexity), true

	case "UpdateBusResponse.created_at":
		if e.complexity.UpdateBusResponse.CreatedAt == nil {
			break
		}

		return e.complexity.UpdateBusResponse.CreatedAt(childComplexity), true

	case "UpdateBusResponse.end_price":
		if e.complexity.UpdateBusResponse.EndPrice == nil {
			break
		}

		return e.complexity.UpdateBusResponse.EndPrice(childComplexity), true

	case "UpdateBusResponse.id":
		if e.complexity.UpdateBusResponse.ID == nil {
			break
		}

		return e.complexity.UpdateBusResponse.ID(childComplexity), true

	case "UpdateBusResponse.place_count":
		if e.complexity.UpdateBusResponse.PlaceCount == nil {
			break
		}

		return e.complexity.UpdateBusResponse.PlaceCount(childComplexity), true

	case "UpdateBusResponse.started_price":
		if e.complexity.UpdateBusResponse.StartedPrice == nil {
			break
		}

		return e.complexity.UpdateBusResponse.StartedPrice(childComplexity), true

	case "UpdateBusResponse.updated_at":
		if e.complexity.UpdateBusResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.UpdateBusResponse.UpdatedAt(childComplexity), true

	case "UpdateCarResponse.car_name":
		if e.complexity.UpdateCarResponse.CarName == nil {
			break
		}

		return e.complexity.UpdateCarResponse.CarName(childComplexity), true

	case "UpdateCarResponse.car_number":
		if e.complexity.UpdateCarResponse.CarNumber == nil {
			break
		}

		return e.complexity.UpdateCarResponse.CarNumber(childComplexity), true

	case "UpdateCarResponse.car_status":
		if e.complexity.UpdateCarResponse.CarStatus == nil {
			break
		}

		return e.complexity.UpdateCarResponse.CarStatus(childComplexity), true

	case "UpdateCarResponse.colour":
		if e.complexity.UpdateCarResponse.Colour == nil {
			break
		}

		return e.complexity.UpdateCarResponse.Colour(childComplexity), true

	case "UpdateCarResponse.created_at":
		if e.complexity.UpdateCarResponse.CreatedAt == nil {
			break
		}

		return e.complexity.UpdateCarResponse.CreatedAt(childComplexity), true

	case "UpdateCarResponse.end_price":
		if e.complexity.UpdateCarResponse.EndPrice == nil {
			break
		}

		return e.complexity.UpdateCarResponse.EndPrice(childComplexity), true

	case "UpdateCarResponse.id":
		if e.complexity.UpdateCarResponse.ID == nil {
			break
		}

		return e.complexity.UpdateCarResponse.ID(childComplexity), true

	case "UpdateCarResponse.is_air_condt":
		if e.complexity.UpdateCarResponse.IsAirCondt == nil {
			break
		}

		return e.complexity.UpdateCarResponse.IsAirCondt(childComplexity), true

	case "UpdateCarResponse.is_covid":
		if e.complexity.UpdateCarResponse.IsCovid == nil {
			break
		}

		return e.complexity.UpdateCarResponse.IsCovid(childComplexity), true

	case "UpdateCarResponse.place_count":
		if e.complexity.UpdateCarResponse.PlaceCount == nil {
			break
		}

		return e.complexity.UpdateCarResponse.PlaceCount(childComplexity), true

	case "UpdateCarResponse.started_price":
		if e.complexity.UpdateCarResponse.StartedPrice == nil {
			break
		}

		return e.complexity.UpdateCarResponse.StartedPrice(childComplexity), true

	case "UpdateCarResponse.updated_at":
		if e.complexity.UpdateCarResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.UpdateCarResponse.UpdatedAt(childComplexity), true

	case "UpdateDriverResponse.created_at":
		if e.complexity.UpdateDriverResponse.CreatedAt == nil {
			break
		}

		return e.complexity.UpdateDriverResponse.CreatedAt(childComplexity), true

	case "UpdateDriverResponse.driver_name":
		if e.complexity.UpdateDriverResponse.DriverName == nil {
			break
		}

		return e.complexity.UpdateDriverResponse.DriverName(childComplexity), true

	case "UpdateDriverResponse.experience":
		if e.complexity.UpdateDriverResponse.Experience == nil {
			break
		}

		return e.complexity.UpdateDriverResponse.Experience(childComplexity), true

	case "UpdateDriverResponse.id":
		if e.complexity.UpdateDriverResponse.ID == nil {
			break
		}

		return e.complexity.UpdateDriverResponse.ID(childComplexity), true

	case "UpdateDriverResponse.phone_number":
		if e.complexity.UpdateDriverResponse.PhoneNumber == nil {
			break
		}

		return e.complexity.UpdateDriverResponse.PhoneNumber(childComplexity), true

	case "UpdateDriverResponse.updated_at":
		if e.complexity.UpdateDriverResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.UpdateDriverResponse.UpdatedAt(childComplexity), true

	case "UpdateKekeResponse.colour":
		if e.complexity.UpdateKekeResponse.Colour == nil {
			break
		}

		return e.complexity.UpdateKekeResponse.Colour(childComplexity), true

	case "UpdateKekeResponse.created_at":
		if e.complexity.UpdateKekeResponse.CreatedAt == nil {
			break
		}

		return e.complexity.UpdateKekeResponse.CreatedAt(childComplexity), true

	case "UpdateKekeResponse.end_price":
		if e.complexity.UpdateKekeResponse.EndPrice == nil {
			break
		}

		return e.complexity.UpdateKekeResponse.EndPrice(childComplexity), true

	case "UpdateKekeResponse.id":
		if e.complexity.UpdateKekeResponse.ID == nil {
			break
		}

		return e.complexity.UpdateKekeResponse.ID(childComplexity), true

	case "UpdateKekeResponse.keke_number":
		if e.complexity.UpdateKekeResponse.KekeNumber == nil {
			break
		}

		return e.complexity.UpdateKekeResponse.KekeNumber(childComplexity), true

	case "UpdateKekeResponse.keke_status":
		if e.complexity.UpdateKekeResponse.KekeStatus == nil {
			break
		}

		return e.complexity.UpdateKekeResponse.KekeStatus(childComplexity), true

	case "UpdateKekeResponse.place_count":
		if e.complexity.UpdateKekeResponse.PlaceCount == nil {
			break
		}

		return e.complexity.UpdateKekeResponse.PlaceCount(childComplexity), true

	case "UpdateKekeResponse.started_price":
		if e.complexity.UpdateKekeResponse.StartedPrice == nil {
			break
		}

		return e.complexity.UpdateKekeResponse.StartedPrice(childComplexity), true

	case "UpdateKekeResponse.updated_at":
		if e.complexity.UpdateKekeResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.UpdateKekeResponse.UpdatedAt(childComplexity), true

	case "UpdateMerchantResponse.created_at":
		if e.complexity.UpdateMerchantResponse.CreatedAt == nil {
			break
		}

		return e.complexity.UpdateMerchantResponse.CreatedAt(childComplexity), true

	case "UpdateMerchantResponse.id":
		if e.complexity.UpdateMerchantResponse.ID == nil {
			break
		}

		return e.complexity.UpdateMerchantResponse.ID(childComplexity), true

	case "UpdateMerchantResponse.name":
		if e.complexity.UpdateMerchantResponse.Name == nil {
			break
		}

		return e.complexity.UpdateMerchantResponse.Name(childComplexity), true

	case "UpdateMerchantResponse.payment_history":
		if e.complexity.UpdateMerchantResponse.PaymentHistory == nil {
			break
		}

		return e.complexity.UpdateMerchantResponse.PaymentHistory(childComplexity), true

	case "UpdateMerchantResponse.phone_number":
		if e.complexity.UpdateMerchantResponse.PhoneNumber == nil {
			break
		}

		return e.complexity.UpdateMerchantResponse.PhoneNumber(childComplexity), true

	case "UpdateMerchantResponse.updated_at":
		if e.complexity.UpdateMerchantResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.UpdateMerchantResponse.UpdatedAt(childComplexity), true

	case "UpdateOrderResponse.created_at":
		if e.complexity.UpdateOrderResponse.CreatedAt == nil {
			break
		}

		return e.complexity.UpdateOrderResponse.CreatedAt(childComplexity), true

	case "UpdateOrderResponse.id":
		if e.complexity.UpdateOrderResponse.ID == nil {
			break
		}

		return e.complexity.UpdateOrderResponse.ID(childComplexity), true

	case "UpdateOrderResponse.merchant_id":
		if e.complexity.UpdateOrderResponse.MerchantID == nil {
			break
		}

		return e.complexity.UpdateOrderResponse.MerchantID(childComplexity), true

	case "UpdateOrderResponse.updated_at":
		if e.complexity.UpdateOrderResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.UpdateOrderResponse.UpdatedAt(childComplexity), true

	case "UpdateOrderResponse.user_id":
		if e.complexity.UpdateOrderResponse.UserID == nil {
			break
		}

		return e.complexity.UpdateOrderResponse.UserID(childComplexity), true

	case "UpdateReviewReplyResponse.content":
		if e.complexity.UpdateReviewReplyResponse.Content == nil {
			break
		}

		return e.complexity.UpdateReviewReplyResponse.Content(childComplexity), true

	case "UpdateReviewReplyResponse.created_at":
		if e.complexity.UpdateReviewReplyResponse.CreatedAt == nil {
			break
		}

		return e.complexity.UpdateReviewReplyResponse.CreatedAt(childComplexity), true

	case "UpdateReviewReplyResponse.id":
		if e.complexity.UpdateReviewReplyResponse.ID == nil {
			break
		}

		return e.complexity.UpdateReviewReplyResponse.ID(childComplexity), true

	case "UpdateReviewReplyResponse.review_id":
		if e.complexity.UpdateReviewReplyResponse.ReviewID == nil {
			break
		}

		return e.complexity.UpdateReviewReplyResponse.ReviewID(childComplexity), true

	case "UpdateReviewReplyResponse.sender_id":
		if e.complexity.UpdateReviewReplyResponse.SenderID == nil {
			break
		}

		return e.complexity.UpdateReviewReplyResponse.SenderID(childComplexity), true

	case "UpdateReviewReplyResponse.updated_at":
		if e.complexity.UpdateReviewReplyResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.UpdateReviewReplyResponse.UpdatedAt(childComplexity), true

	case "UpdateReviewResponse.created_at":
		if e.complexity.UpdateReviewResponse.CreatedAt == nil {
			break
		}

		return e.complexity.UpdateReviewResponse.CreatedAt(childComplexity), true

	case "UpdateReviewResponse.id":
		if e.complexity.UpdateReviewResponse.ID == nil {
			break
		}

		return e.complexity.UpdateReviewResponse.ID(childComplexity), true

	case "UpdateReviewResponse.merchant_id":
		if e.complexity.UpdateReviewResponse.MerchantID == nil {
			break
		}

		return e.complexity.UpdateReviewResponse.MerchantID(childComplexity), true

	case "UpdateReviewResponse.rate":
		if e.complexity.UpdateReviewResponse.Rate == nil {
			break
		}

		return e.complexity.UpdateReviewResponse.Rate(childComplexity), true

	case "UpdateReviewResponse.review_content":
		if e.complexity.UpdateReviewResponse.ReviewContent == nil {
			break
		}

		return e.complexity.UpdateReviewResponse.ReviewContent(childComplexity), true

	case "UpdateReviewResponse.updated_at":
		if e.complexity.UpdateReviewResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.UpdateReviewResponse.UpdatedAt(childComplexity), true

	case "UpdateReviewResponse.user_id":
		if e.complexity.UpdateReviewResponse.UserID == nil {
			break
		}

		return e.complexity.UpdateReviewResponse.UserID(childComplexity), true

	case "UpdateUserResponse.created_at":
		if e.complexity.UpdateUserResponse.CreatedAt == nil {
			break
		}

		return e.complexity.UpdateUserResponse.CreatedAt(childComplexity), true

	case "UpdateUserResponse.id":
		if e.complexity.UpdateUserResponse.ID == nil {
			break
		}

		return e.complexity.UpdateUserResponse.ID(childComplexity), true

	case "UpdateUserResponse.name":
		if e.complexity.UpdateUserResponse.Name == nil {
			break
		}

		return e.complexity.UpdateUserResponse.Name(childComplexity), true

	case "UpdateUserResponse.payment_history":
		if e.complexity.UpdateUserResponse.PaymentHistory == nil {
			break
		}

		return e.complexity.UpdateUserResponse.PaymentHistory(childComplexity), true

	case "UpdateUserResponse.phone_number":
		if e.complexity.UpdateUserResponse.PhoneNumber == nil {
			break
		}

		return e.complexity.UpdateUserResponse.PhoneNumber(childComplexity), true

	case "UpdateUserResponse.updated_at":
		if e.complexity.UpdateUserResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.UpdateUserResponse.UpdatedAt(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputGetListBikesReq,
		ec.unmarshalInputGetListBusesReq,
		ec.unmarshalInputGetListCarsReq,
		ec.unmarshalInputGetListDriversReq,
		ec.unmarshalInputGetListKekesReq,
		ec.unmarshalInputGetListMerchantReq,
		ec.unmarshalInputGetListOrdersReq,
		ec.unmarshalInputGetListReviewsReq,
		ec.unmarshalInputGetListUsersReq,
		ec.unmarshalInputcreateBikeReq,
		ec.unmarshalInputcreateBusReq,
		ec.unmarshalInputcreateCarReq,
		ec.unmarshalInputcreateDriverReq,
		ec.unmarshalInputcreateKekeReq,
		ec.unmarshalInputcreateMerchantReq,
		ec.unmarshalInputcreateOrderReq,
		ec.unmarshalInputcreateReviewReplyReq,
		ec.unmarshalInputcreateReviewReq,
		ec.unmarshalInputcreateUserReq,
		ec.unmarshalInputupdateBikeReq,
		ec.unmarshalInputupdateBusReq,
		ec.unmarshalInputupdateCarReq,
		ec.unmarshalInputupdateDriverReq,
		ec.unmarshalInputupdateKekeReq,
		ec.unmarshalInputupdateMerchantReq,
		ec.unmarshalInputupdateOrderReq,
		ec.unmarshalInputupdateReviewReplyReq,
		ec.unmarshalInputupdateReviewReq,
		ec.unmarshalInputupdateUserReq,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/bike.graphqls", Input: `extend type Mutation {
  createBike(input: createBikeReq): CreateBikeResponse!
  updateBike(input: updateBikeReq): UpdateBikeResponse!
  deleteBike(id: String!): Empty!
}

extend type Query {
  getListBikes(input: GetListBikesReq!): GetListBikesResponse!
  getSingleBike(id: String!): GetSingleBikeResponse!
}

input GetListBikesReq {
    limit: Int!
    offset: Int!
}

type GetListBikesResponse {
    getBikes: [GetSingleBikeResponse!]!
    count: Int!
}

type GetSingleBikeResponse {
    bike_status: String!
    bike_number: String!
    bike_model: String!
    started_price: Float!
    end_price: Float!
    colour: String!
    id: String!
    created_at: String!
    updated_at: String!
}

type CreateBikeResponse {
    bike_status: String!
    bike_number: String!
    bike_model: String!
    started_price: Float!
    end_price: Float!
    colour: String!
    id: String!
    created_at: String!
    updated_at: String!
}

type UpdateBikeResponse {
    bike_status: String!
    bike_number: String!
    bike_model: String!
    started_price: Float!
    end_price: Float!
    colour: String!
    id: String!
    created_at: String!
    updated_at: String!
}

input createBikeReq {
    bike_status: String!
    bike_number: String!
    bike_model: String!
    started_price: Float!
    end_price: Float!
    colour: String!
}

input updateBikeReq {
    bike_status: String!
    bike_number: String!
    bike_model: String!
    started_price: Float!
    end_price: Float!
    colour: String!
    id: String!
}`, BuiltIn: false},
	{Name: "../schema/bus.graphqls", Input: `extend type Mutation {
  createBus(input: createBusReq): CreateBusResponse!
  updateBus(input: updateBusReq): UpdateBusResponse!
  deleteBus(id: String!): Empty!
}

extend type Query {
  getListBuses(input: GetListBusesReq!): GetListBusesResponse!
  getSingleBus(id: String!): GetSingleBusResponse!
}

input GetListBusesReq {
    limit: Int!
    offset: Int!
}

type GetListBusesResponse {
    getBuses: [GetSingleBusResponse!]!
    count: Int!
}

type GetSingleBusResponse {
    id: String!
    driver_id: String!
    merchant_id: String!
    region_id: String!
    bus_status: String!
    bus_name: String!
    bus_number: String!
    bus_type: String!
    started_price: Float!
    end_price: Float!
    booking_count: Int!
    place_count: Int!
    created_at: String!
    updated_at: String!
}

type CreateBusResponse {
    id: String!
    driver_id: String!
    merchant_id: String!
    region_id: String!
    bus_status: String!
    bus_name: String!
    bus_number: String!
    bus_type: String!
    started_price: Float!
    end_price: Float!
    booking_count: Int!
    place_count: Int!
    created_at: String!
    updated_at: String!
}

type UpdateBusResponse {
    id: String!
    bus_status: String!
    bus_name: String!
    bus_number: String!
    bus_type: String!
    started_price: Float!
    end_price: Float!
    booking_count: Int!
    place_count: Int!
    created_at: String!
    updated_at: String!
}

input createBusReq {
    driver_id: String!
    merchant_id: String!
    region_id: String!
    bus_status: String!
    bus_name: String!
    bus_number: String!
    bus_type: String!
    started_price: Float!
    end_price: Float!
    booking_count: Int!
    place_count: Int!
}

input updateBusReq {
    bus_status: String!
    bus_name: String!
    bus_number: String!
    bus_type: String!
    started_price: Float!
    end_price: Float!
    booking_count: Int!
    place_count: Int!
    id: String!
}`, BuiltIn: false},
	{Name: "../schema/car.graphqls", Input: `extend type Mutation {
  createCar(input: createCarReq): CreateCarResponse!
  updateCar(input: updateCarReq): UpdateCarResponse!
  deleteCar(id: String!): Empty!
}

extend type Query {
  getListCars(input: GetListCarsReq!): GetListCarsResponse!
  getSingleCar(id: String!): GetSingleCarResponse!
}

input GetListCarsReq {
    limit: Int!
    offset: Int!
}

type GetListCarsResponse {
    getCars: [GetSingleCarResponse!]!
    count: Int!
}

type GetSingleCarResponse {
    is_covid: Boolean!
    is_air_condt: Boolean!
    car_status: String!
    car_number: String!
    car_name: String!
    started_price: Float!
    end_price: Float!
    place_count: Int!
    colour: String!
    id: String!
    created_at: String!
    updated_at: String!
}

type CreateCarResponse {
    is_covid: Boolean!
    is_air_condt: Boolean!
    car_status: String!
    car_number: String!
    car_name: String!
    started_price: Float!
    end_price: Float!
    place_count: Int!
    colour: String!
    id: String!
    created_at: String!
    updated_at: String!
}

type UpdateCarResponse {
    is_covid: Boolean!
    is_air_condt: Boolean!
    car_status: String!
    car_number: String!
    car_name: String!
    started_price: Float!
    end_price: Float!
    place_count: Int!
    colour: String!
    id: String!
    created_at: String!
    updated_at: String!
}

input createCarReq {
    is_covid: Boolean!
    is_air_condt: Boolean!
    car_status: String!
    car_number: String!
    car_name: String!
    started_price: Float!
    end_price: Float!
    place_count: Int!
    colour: String!
}

input updateCarReq {
    is_covid: Boolean!
    is_air_condt: Boolean!
    car_status: String!
    car_number: String!
    car_name: String!
    started_price: Float!
    end_price: Float!
    place_count: Int!
    colour: String!
    id: String!
}`, BuiltIn: false},
	{Name: "../schema/client.graphqls", Input: `extend type Mutation {
  createUser(input: createUserReq): CreateUserResponse!
  updateUser(input: updateUserReq): UpdateUserResponse!
  createMerchant(input: createMerchantReq): CreateMerchantResponse!
  updateMerchant(input: updateMerchantReq): UpdateMerchantResponse!
  deleteUser(id: String!): Empty!
  deleteMerchant(id: String!): Empty!
}

scalar Empty

extend type Query {
  getListUsers(input: GetListUsersReq!): GetListUsersResponse!
  getSingleUser(id: String!): GetSingleUserResponse!
  getListMerchant(input: GetListMerchantReq!): GetListMerchantResponse!
  getSingleMerchant(id: String!): GetSingleMerchantResponse!
}

type CreateMerchantResponse {
  id: String!
  name: String!
  payment_history: String!
  phone_number: String!
  created_at: String!
  updated_at: String!
}

type UpdateMerchantResponse {
  id: String!
  name: String!
  payment_history: String!
  phone_number: String!
  created_at: String!
  updated_at: String!
}

type CreateUserResponse {
  id: String!
  name: String!
  payment_history: String!
  phone_number: String!
  created_at: String!
  updated_at: String!
}

input createUserReq {
  name: String!
  payment_history: String!
  phone_number: String!
}

input createMerchantReq {
  name: String!
  payment_history: String!
  phone_number: String! 
}

type UpdateUserResponse {
  id: String!
  name: String!
  payment_history: String!
  phone_number: String!
  created_at: String!
  updated_at: String!
}

input updateUserReq {
  id: String!
  name: String!
  payment_history: String!
  phone_number: String! 
}

input updateMerchantReq {
  id: String!
  name: String!
  payment_history: String!
  phone_number: String!   
}

type GetListUsersResponse {
  getUsers: [GetSingleUserResponse!]!
  count: Int!
}

type GetListMerchantResponse {
  getmerchants: [GetSingleMerchantResponse!]!
  count: Int!
}

input GetListUsersReq {
  limit: Int!
  offset: Int!
}

input GetListMerchantReq {
  limit: Int!
  offset: Int!  
}

type GetSingleUserResponse {
  id: String!
  name: String!
  payment_history: String!
  phone_number: String!
  created_at: String!
  updated_at: String!
}

type GetSingleMerchantResponse {
  id: String!
  name: String!
  payment_history: String!
  phone_number: String!
  created_at: String!
  updated_at: String!  
}`, BuiltIn: false},
	{Name: "../schema/driver.graphqls", Input: `extend type Mutation {
  createDriver(input: createDriverReq): CreateDriverResponse!
  updateDriver(input: updateDriverReq): UpdateDriverResponse!
  deleteDriver(id: String!): Empty!
}

extend type Query {
  getListDrivers(input: GetListDriversReq!): GetListDriversResponse!
  getSingleDriver(id: String!): GetSingleDriverResponse!
}

input GetListDriversReq {
    limit: Int!
    offset: Int!
}

type GetListDriversResponse {
    getDrivers: [GetSingleDriverResponse!]!
    count: Int!
}

type GetSingleDriverResponse {
    driver_name: String!
    phone_number: String!
    experience: String!
    id: String!
    created_at: String!
    updated_at: String!
}

type CreateDriverResponse {
    driver_name: String!
    phone_number: String!
    experience: String!
    id: String!
    created_at: String!
    updated_at: String!
}

type UpdateDriverResponse {
    driver_name: String!
    phone_number: String!
    experience: String!
    id: String!
    created_at: String!
    updated_at: String!
}

input createDriverReq {
    driver_name: String!
    phone_number: String!
    experience: String!
}

input updateDriverReq {
    driver_name: String!
    phone_number: String!
    experience: String!
    id: String!
}`, BuiltIn: false},
	{Name: "../schema/keke.graphqls", Input: `extend type Mutation {
  createKeke(input: createKekeReq): CreateKekeResponse!
  updateKeke(input: updateKekeReq): UpdateKekeResponse!
  deleteKeke(id: String!): Empty!
}

extend type Query {
  getListKekes(input: GetListKekesReq!): GetListKekesResponse!
  getSingleKeke(id: String!): GetSingleKekeResponse!
}

input GetListKekesReq {
    limit: Int!
    offset: Int!
}

type GetListKekesResponse {
    getKekes: [GetSingleKekeResponse!]!
    count: Int!
}

type GetSingleKekeResponse {
    keke_status: String!
    keke_number: String!
    started_price: Float!
    end_price: Float!
    place_count: Int!
    colour: String!
    id: String!
    created_at: String!
    updated_at: String!
}

type CreateKekeResponse {
    keke_status: String!
    keke_number: String!
    started_price: Float!
    end_price: Float!
    place_count: Int!
    colour: String!
    id: String!
    created_at: String!
    updated_at: String!
}

type UpdateKekeResponse {
    keke_status: String!
    keke_number: String!
    started_price: Float!
    end_price: Float!
    place_count: Int!
    colour: String!
    id: String!
    created_at: String!
    updated_at: String!
}

input createKekeReq {
    keke_status: String!
    keke_number: String!
    started_price: Float!
    end_price: Float!
    place_count: Int!
    colour: String!
}

input updateKekeReq {
    keke_status: String!
    keke_number: String!
    started_price: Float!
    end_price: Float!
    place_count: Int!
    colour: String!
    id: String!
}`, BuiltIn: false},
	{Name: "../schema/order.graphqls", Input: `extend type Mutation {
  createOrder(input: createOrderReq): CreateOrderResponse!
  updateOrder(input: updateOrderReq): UpdateOrderResponse!
  deleteOrder(id: String!): Empty!  
}

extend type Query {
  getListOrders(input: GetListOrdersReq!): GetListOrdersResponse!
  getSingleOrder(id: String!): GetSingleOrderResponse!
}

type GetListOrdersResponse {
  getorders: [GetSingleOrderResponse!]!
  count: Int!
}

input GetListOrdersReq {
  limit: Int!
  offset: Int!
}

type CreateOrderResponse {
  id: String!
  user_id: String!
  merchant_id: String!
  created_at: String!
  updated_at: String!
}

type UpdateOrderResponse {
  id: String!
  user_id: String!
  merchant_id: String!
  created_at: String!
  updated_at: String!
}


type GetSingleOrderResponse {
  id: String!
  user_id: String!
  merchant_id: String!
  created_at: String!
  updated_at: String!
}

input createOrderReq {
  user_id: String!
  merchant_id: String!
}

input updateOrderReq {
  id: String!
  user_id: String!
  merchant_id: String!    
}`, BuiltIn: false},
	{Name: "../schema/review.graphqls", Input: `extend type Mutation {
  createReview(input: createReviewReq): CreateReviewResponse!
  updateReview(input: updateReviewReq): UpdateReviewResponse!
  deleteReview(id: String!): Empty!
}


extend type Query {
  getListReviews(input: GetListReviewsReq!): GetListReviewsResponse!
  getSingleReview(id: String!): GetSingleReviewResponse!
}


type GetListReviewsResponse {
  getReviews: [GetSingleReviewResponse!]!
  count: Int!
}

input GetListReviewsReq {
  limit: Int!
  offset: Int!
}

type CreateReviewResponse {
  id: String!
  user_id: String!
  merchant_id: String!
  rate: Float!
  review_content: String!
  created_at: String!
  updated_at: String!
}

type UpdateReviewResponse {
  id: String!
  user_id: String!
  merchant_id: String!
  rate: Float!
  review_content: String!
  created_at: String!
  updated_at: String!
}


type GetSingleReviewResponse {
  id: String!
  user_id: String!
  merchant_id: String!
  rate: Float!
  review_content: String!
  created_at: String!
  updated_at: String!
}

input createReviewReq {
  user_id: String!
  merchant_id: String!
  rate: Float!
  review_content: String!
}

input updateReviewReq {
  id: String!
  rate: Float!
  review_content: String!   
}`, BuiltIn: false},
	{Name: "../schema/review_comments.graphqls", Input: `extend type Mutation {
  createReplyReview(input: createReviewReplyReq): CreateReviewReplyResponse!
  updateReplyReview(input: updateReviewReplyReq): UpdateReviewReplyResponse!
  deleteReplyReview(id: String!): Empty!
}


extend type Query {
  GetReplyReviews(id: String!): GetReplyReviewsResponse!
}


type GetReplyReviewsResponse {
  getReviews: [ReviewComment!]!
  count: Int!
}

type ReviewComment {
    id: String!
    review_id: String!
    sender_id: String!
    content: String!
    created_at: String!
    updated_at: String!
}

type CreateReviewReplyResponse {
  id: String!
  sender_id: String!
  review_id: String!
  content: String!
  created_at: String!
  updated_at: String!
}

type UpdateReviewReplyResponse {
  id: String!
  sender_id: String!
  review_id: String!
  content: String!
  created_at: String!
  updated_at: String!
}

input createReviewReplyReq {
  sender_id: String!
  review_id: String!
  content: String!
}

input updateReviewReplyReq {
  id: String!
  sender_id: String!
  content: String!
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createBike_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CreateBikeReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOcreateBikeReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateBikeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createBus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CreateBusReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOcreateBusReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateBusReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCar_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CreateCarReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOcreateCarReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateCarReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createDriver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CreateDriverReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOcreateDriverReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateDriverReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createKeke_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CreateKekeReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOcreateKekeReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateKekeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createMerchant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CreateMerchantReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOcreateMerchantReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateMerchantReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createOrder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CreateOrderReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOcreateOrderReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateOrderReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createReplyReview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CreateReviewReplyReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOcreateReviewReplyReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateReviewReplyReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createReview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CreateReviewReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOcreateReviewReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateReviewReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CreateUserReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOcreateUserReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateUserReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteBike_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteBus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCar_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDriver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteKeke_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMerchant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteOrder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteReplyReview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteReview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateBike_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UpdateBikeReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOupdateBikeReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateBikeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateBus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UpdateBusReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOupdateBusReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateBusReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCar_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UpdateCarReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOupdateCarReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateCarReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDriver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UpdateDriverReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOupdateDriverReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateDriverReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateKeke_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UpdateKekeReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOupdateKekeReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateKekeReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMerchant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UpdateMerchantReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOupdateMerchantReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateMerchantReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UpdateOrderReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOupdateOrderReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateOrderReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateReplyReview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UpdateReviewReplyReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOupdateReviewReplyReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateReviewReplyReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateReview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UpdateReviewReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOupdateReviewReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateReviewReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UpdateUserReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOupdateUserReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateUserReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetReplyReviews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getListBikes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetListBikesReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetListBikesReq2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListBikesReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getListBuses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetListBusesReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetListBusesReq2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListBusesReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getListCars_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetListCarsReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetListCarsReq2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListCarsReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getListDrivers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetListDriversReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetListDriversReq2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListDriversReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getListKekes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetListKekesReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetListKekesReq2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListKekesReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getListMerchant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetListMerchantReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetListMerchantReq2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListMerchantReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getListOrders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetListOrdersReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetListOrdersReq2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListOrdersReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getListReviews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetListReviewsReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetListReviewsReq2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListReviewsReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getListUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetListUsersReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetListUsersReq2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListUsersReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSingleBike_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSingleBus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSingleCar_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSingleDriver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSingleKeke_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSingleMerchant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSingleOrder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSingleReview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSingleUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CreateBikeResponse_bike_status(ctx context.Context, field graphql.CollectedField, obj *model.CreateBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBikeResponse_bike_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BikeStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBikeResponse_bike_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBikeResponse_bike_number(ctx context.Context, field graphql.CollectedField, obj *model.CreateBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBikeResponse_bike_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BikeNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBikeResponse_bike_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBikeResponse_bike_model(ctx context.Context, field graphql.CollectedField, obj *model.CreateBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBikeResponse_bike_model(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BikeModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBikeResponse_bike_model(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBikeResponse_started_price(ctx context.Context, field graphql.CollectedField, obj *model.CreateBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBikeResponse_started_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBikeResponse_started_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBikeResponse_end_price(ctx context.Context, field graphql.CollectedField, obj *model.CreateBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBikeResponse_end_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBikeResponse_end_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBikeResponse_colour(ctx context.Context, field graphql.CollectedField, obj *model.CreateBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBikeResponse_colour(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Colour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBikeResponse_colour(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBikeResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.CreateBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBikeResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBikeResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBikeResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.CreateBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBikeResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBikeResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBikeResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.CreateBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBikeResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBikeResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBusResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.CreateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBusResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBusResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBusResponse_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.CreateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBusResponse_driver_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBusResponse_driver_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBusResponse_merchant_id(ctx context.Context, field graphql.CollectedField, obj *model.CreateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBusResponse_merchant_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MerchantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBusResponse_merchant_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBusResponse_region_id(ctx context.Context, field graphql.CollectedField, obj *model.CreateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBusResponse_region_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBusResponse_region_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBusResponse_bus_status(ctx context.Context, field graphql.CollectedField, obj *model.CreateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBusResponse_bus_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBusResponse_bus_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBusResponse_bus_name(ctx context.Context, field graphql.CollectedField, obj *model.CreateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBusResponse_bus_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBusResponse_bus_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBusResponse_bus_number(ctx context.Context, field graphql.CollectedField, obj *model.CreateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBusResponse_bus_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBusResponse_bus_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBusResponse_bus_type(ctx context.Context, field graphql.CollectedField, obj *model.CreateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBusResponse_bus_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBusResponse_bus_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBusResponse_started_price(ctx context.Context, field graphql.CollectedField, obj *model.CreateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBusResponse_started_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBusResponse_started_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBusResponse_end_price(ctx context.Context, field graphql.CollectedField, obj *model.CreateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBusResponse_end_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBusResponse_end_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBusResponse_booking_count(ctx context.Context, field graphql.CollectedField, obj *model.CreateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBusResponse_booking_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BookingCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBusResponse_booking_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBusResponse_place_count(ctx context.Context, field graphql.CollectedField, obj *model.CreateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBusResponse_place_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlaceCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBusResponse_place_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBusResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.CreateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBusResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBusResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBusResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.CreateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBusResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBusResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCarResponse_is_covid(ctx context.Context, field graphql.CollectedField, obj *model.CreateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCarResponse_is_covid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCovid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCarResponse_is_covid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCarResponse_is_air_condt(ctx context.Context, field graphql.CollectedField, obj *model.CreateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCarResponse_is_air_condt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAirCondt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCarResponse_is_air_condt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCarResponse_car_status(ctx context.Context, field graphql.CollectedField, obj *model.CreateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCarResponse_car_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCarResponse_car_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCarResponse_car_number(ctx context.Context, field graphql.CollectedField, obj *model.CreateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCarResponse_car_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCarResponse_car_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCarResponse_car_name(ctx context.Context, field graphql.CollectedField, obj *model.CreateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCarResponse_car_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCarResponse_car_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCarResponse_started_price(ctx context.Context, field graphql.CollectedField, obj *model.CreateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCarResponse_started_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCarResponse_started_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCarResponse_end_price(ctx context.Context, field graphql.CollectedField, obj *model.CreateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCarResponse_end_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCarResponse_end_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCarResponse_place_count(ctx context.Context, field graphql.CollectedField, obj *model.CreateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCarResponse_place_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlaceCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCarResponse_place_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCarResponse_colour(ctx context.Context, field graphql.CollectedField, obj *model.CreateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCarResponse_colour(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Colour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCarResponse_colour(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCarResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.CreateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCarResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCarResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCarResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.CreateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCarResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCarResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCarResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.CreateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCarResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCarResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDriverResponse_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.CreateDriverResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDriverResponse_driver_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDriverResponse_driver_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDriverResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDriverResponse_phone_number(ctx context.Context, field graphql.CollectedField, obj *model.CreateDriverResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDriverResponse_phone_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDriverResponse_phone_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDriverResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDriverResponse_experience(ctx context.Context, field graphql.CollectedField, obj *model.CreateDriverResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDriverResponse_experience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Experience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDriverResponse_experience(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDriverResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDriverResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.CreateDriverResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDriverResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDriverResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDriverResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDriverResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.CreateDriverResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDriverResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDriverResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDriverResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDriverResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.CreateDriverResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDriverResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDriverResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDriverResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateKekeResponse_keke_status(ctx context.Context, field graphql.CollectedField, obj *model.CreateKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateKekeResponse_keke_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KekeStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateKekeResponse_keke_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateKekeResponse_keke_number(ctx context.Context, field graphql.CollectedField, obj *model.CreateKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateKekeResponse_keke_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KekeNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateKekeResponse_keke_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateKekeResponse_started_price(ctx context.Context, field graphql.CollectedField, obj *model.CreateKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateKekeResponse_started_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateKekeResponse_started_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateKekeResponse_end_price(ctx context.Context, field graphql.CollectedField, obj *model.CreateKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateKekeResponse_end_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateKekeResponse_end_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateKekeResponse_place_count(ctx context.Context, field graphql.CollectedField, obj *model.CreateKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateKekeResponse_place_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlaceCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateKekeResponse_place_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateKekeResponse_colour(ctx context.Context, field graphql.CollectedField, obj *model.CreateKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateKekeResponse_colour(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Colour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateKekeResponse_colour(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateKekeResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.CreateKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateKekeResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateKekeResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateKekeResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.CreateKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateKekeResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateKekeResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateKekeResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.CreateKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateKekeResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateKekeResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMerchantResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.CreateMerchantResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMerchantResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMerchantResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMerchantResponse_name(ctx context.Context, field graphql.CollectedField, obj *model.CreateMerchantResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMerchantResponse_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMerchantResponse_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMerchantResponse_payment_history(ctx context.Context, field graphql.CollectedField, obj *model.CreateMerchantResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMerchantResponse_payment_history(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMerchantResponse_payment_history(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMerchantResponse_phone_number(ctx context.Context, field graphql.CollectedField, obj *model.CreateMerchantResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMerchantResponse_phone_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMerchantResponse_phone_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMerchantResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.CreateMerchantResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMerchantResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMerchantResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMerchantResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.CreateMerchantResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMerchantResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMerchantResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateOrderResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.CreateOrderResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateOrderResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateOrderResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateOrderResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateOrderResponse_user_id(ctx context.Context, field graphql.CollectedField, obj *model.CreateOrderResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateOrderResponse_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateOrderResponse_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateOrderResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateOrderResponse_merchant_id(ctx context.Context, field graphql.CollectedField, obj *model.CreateOrderResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateOrderResponse_merchant_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MerchantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateOrderResponse_merchant_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateOrderResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateOrderResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.CreateOrderResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateOrderResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateOrderResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateOrderResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateOrderResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.CreateOrderResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateOrderResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateOrderResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateOrderResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateReviewReplyResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.CreateReviewReplyResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateReviewReplyResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateReviewReplyResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateReviewReplyResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateReviewReplyResponse_sender_id(ctx context.Context, field graphql.CollectedField, obj *model.CreateReviewReplyResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateReviewReplyResponse_sender_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SenderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateReviewReplyResponse_sender_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateReviewReplyResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateReviewReplyResponse_review_id(ctx context.Context, field graphql.CollectedField, obj *model.CreateReviewReplyResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateReviewReplyResponse_review_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateReviewReplyResponse_review_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateReviewReplyResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateReviewReplyResponse_content(ctx context.Context, field graphql.CollectedField, obj *model.CreateReviewReplyResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateReviewReplyResponse_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateReviewReplyResponse_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateReviewReplyResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateReviewReplyResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.CreateReviewReplyResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateReviewReplyResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateReviewReplyResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateReviewReplyResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateReviewReplyResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.CreateReviewReplyResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateReviewReplyResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateReviewReplyResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateReviewReplyResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateReviewResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.CreateReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateReviewResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateReviewResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateReviewResponse_user_id(ctx context.Context, field graphql.CollectedField, obj *model.CreateReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateReviewResponse_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateReviewResponse_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateReviewResponse_merchant_id(ctx context.Context, field graphql.CollectedField, obj *model.CreateReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateReviewResponse_merchant_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MerchantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateReviewResponse_merchant_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateReviewResponse_rate(ctx context.Context, field graphql.CollectedField, obj *model.CreateReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateReviewResponse_rate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateReviewResponse_rate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateReviewResponse_review_content(ctx context.Context, field graphql.CollectedField, obj *model.CreateReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateReviewResponse_review_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateReviewResponse_review_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateReviewResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.CreateReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateReviewResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateReviewResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateReviewResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.CreateReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateReviewResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateReviewResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateUserResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.CreateUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateUserResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateUserResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateUserResponse_name(ctx context.Context, field graphql.CollectedField, obj *model.CreateUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateUserResponse_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateUserResponse_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateUserResponse_payment_history(ctx context.Context, field graphql.CollectedField, obj *model.CreateUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateUserResponse_payment_history(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateUserResponse_payment_history(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateUserResponse_phone_number(ctx context.Context, field graphql.CollectedField, obj *model.CreateUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateUserResponse_phone_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateUserResponse_phone_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateUserResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.CreateUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateUserResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateUserResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateUserResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.CreateUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateUserResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateUserResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetListBikesResponse_getBikes(ctx context.Context, field graphql.CollectedField, obj *model.GetListBikesResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetListBikesResponse_getBikes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetBikes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.GetSingleBikeResponse)
	fc.Result = res
	return ec.marshalNGetSingleBikeResponse2ᚕᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleBikeResponseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetListBikesResponse_getBikes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetListBikesResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "bike_status":
				return ec.fieldContext_GetSingleBikeResponse_bike_status(ctx, field)
			case "bike_number":
				return ec.fieldContext_GetSingleBikeResponse_bike_number(ctx, field)
			case "bike_model":
				return ec.fieldContext_GetSingleBikeResponse_bike_model(ctx, field)
			case "started_price":
				return ec.fieldContext_GetSingleBikeResponse_started_price(ctx, field)
			case "end_price":
				return ec.fieldContext_GetSingleBikeResponse_end_price(ctx, field)
			case "colour":
				return ec.fieldContext_GetSingleBikeResponse_colour(ctx, field)
			case "id":
				return ec.fieldContext_GetSingleBikeResponse_id(ctx, field)
			case "created_at":
				return ec.fieldContext_GetSingleBikeResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_GetSingleBikeResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetSingleBikeResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetListBikesResponse_count(ctx context.Context, field graphql.CollectedField, obj *model.GetListBikesResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetListBikesResponse_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetListBikesResponse_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetListBikesResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetListBusesResponse_getBuses(ctx context.Context, field graphql.CollectedField, obj *model.GetListBusesResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetListBusesResponse_getBuses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetBuses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.GetSingleBusResponse)
	fc.Result = res
	return ec.marshalNGetSingleBusResponse2ᚕᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleBusResponseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetListBusesResponse_getBuses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetListBusesResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GetSingleBusResponse_id(ctx, field)
			case "driver_id":
				return ec.fieldContext_GetSingleBusResponse_driver_id(ctx, field)
			case "merchant_id":
				return ec.fieldContext_GetSingleBusResponse_merchant_id(ctx, field)
			case "region_id":
				return ec.fieldContext_GetSingleBusResponse_region_id(ctx, field)
			case "bus_status":
				return ec.fieldContext_GetSingleBusResponse_bus_status(ctx, field)
			case "bus_name":
				return ec.fieldContext_GetSingleBusResponse_bus_name(ctx, field)
			case "bus_number":
				return ec.fieldContext_GetSingleBusResponse_bus_number(ctx, field)
			case "bus_type":
				return ec.fieldContext_GetSingleBusResponse_bus_type(ctx, field)
			case "started_price":
				return ec.fieldContext_GetSingleBusResponse_started_price(ctx, field)
			case "end_price":
				return ec.fieldContext_GetSingleBusResponse_end_price(ctx, field)
			case "booking_count":
				return ec.fieldContext_GetSingleBusResponse_booking_count(ctx, field)
			case "place_count":
				return ec.fieldContext_GetSingleBusResponse_place_count(ctx, field)
			case "created_at":
				return ec.fieldContext_GetSingleBusResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_GetSingleBusResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetSingleBusResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetListBusesResponse_count(ctx context.Context, field graphql.CollectedField, obj *model.GetListBusesResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetListBusesResponse_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetListBusesResponse_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetListBusesResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetListCarsResponse_getCars(ctx context.Context, field graphql.CollectedField, obj *model.GetListCarsResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetListCarsResponse_getCars(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetCars, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.GetSingleCarResponse)
	fc.Result = res
	return ec.marshalNGetSingleCarResponse2ᚕᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleCarResponseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetListCarsResponse_getCars(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetListCarsResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "is_covid":
				return ec.fieldContext_GetSingleCarResponse_is_covid(ctx, field)
			case "is_air_condt":
				return ec.fieldContext_GetSingleCarResponse_is_air_condt(ctx, field)
			case "car_status":
				return ec.fieldContext_GetSingleCarResponse_car_status(ctx, field)
			case "car_number":
				return ec.fieldContext_GetSingleCarResponse_car_number(ctx, field)
			case "car_name":
				return ec.fieldContext_GetSingleCarResponse_car_name(ctx, field)
			case "started_price":
				return ec.fieldContext_GetSingleCarResponse_started_price(ctx, field)
			case "end_price":
				return ec.fieldContext_GetSingleCarResponse_end_price(ctx, field)
			case "place_count":
				return ec.fieldContext_GetSingleCarResponse_place_count(ctx, field)
			case "colour":
				return ec.fieldContext_GetSingleCarResponse_colour(ctx, field)
			case "id":
				return ec.fieldContext_GetSingleCarResponse_id(ctx, field)
			case "created_at":
				return ec.fieldContext_GetSingleCarResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_GetSingleCarResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetSingleCarResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetListCarsResponse_count(ctx context.Context, field graphql.CollectedField, obj *model.GetListCarsResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetListCarsResponse_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetListCarsResponse_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetListCarsResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetListDriversResponse_getDrivers(ctx context.Context, field graphql.CollectedField, obj *model.GetListDriversResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetListDriversResponse_getDrivers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetDrivers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.GetSingleDriverResponse)
	fc.Result = res
	return ec.marshalNGetSingleDriverResponse2ᚕᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleDriverResponseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetListDriversResponse_getDrivers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetListDriversResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "driver_name":
				return ec.fieldContext_GetSingleDriverResponse_driver_name(ctx, field)
			case "phone_number":
				return ec.fieldContext_GetSingleDriverResponse_phone_number(ctx, field)
			case "experience":
				return ec.fieldContext_GetSingleDriverResponse_experience(ctx, field)
			case "id":
				return ec.fieldContext_GetSingleDriverResponse_id(ctx, field)
			case "created_at":
				return ec.fieldContext_GetSingleDriverResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_GetSingleDriverResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetSingleDriverResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetListDriversResponse_count(ctx context.Context, field graphql.CollectedField, obj *model.GetListDriversResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetListDriversResponse_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetListDriversResponse_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetListDriversResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetListKekesResponse_getKekes(ctx context.Context, field graphql.CollectedField, obj *model.GetListKekesResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetListKekesResponse_getKekes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetKekes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.GetSingleKekeResponse)
	fc.Result = res
	return ec.marshalNGetSingleKekeResponse2ᚕᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleKekeResponseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetListKekesResponse_getKekes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetListKekesResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "keke_status":
				return ec.fieldContext_GetSingleKekeResponse_keke_status(ctx, field)
			case "keke_number":
				return ec.fieldContext_GetSingleKekeResponse_keke_number(ctx, field)
			case "started_price":
				return ec.fieldContext_GetSingleKekeResponse_started_price(ctx, field)
			case "end_price":
				return ec.fieldContext_GetSingleKekeResponse_end_price(ctx, field)
			case "place_count":
				return ec.fieldContext_GetSingleKekeResponse_place_count(ctx, field)
			case "colour":
				return ec.fieldContext_GetSingleKekeResponse_colour(ctx, field)
			case "id":
				return ec.fieldContext_GetSingleKekeResponse_id(ctx, field)
			case "created_at":
				return ec.fieldContext_GetSingleKekeResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_GetSingleKekeResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetSingleKekeResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetListKekesResponse_count(ctx context.Context, field graphql.CollectedField, obj *model.GetListKekesResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetListKekesResponse_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetListKekesResponse_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetListKekesResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetListMerchantResponse_getmerchants(ctx context.Context, field graphql.CollectedField, obj *model.GetListMerchantResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetListMerchantResponse_getmerchants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Getmerchants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.GetSingleMerchantResponse)
	fc.Result = res
	return ec.marshalNGetSingleMerchantResponse2ᚕᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleMerchantResponseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetListMerchantResponse_getmerchants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetListMerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GetSingleMerchantResponse_id(ctx, field)
			case "name":
				return ec.fieldContext_GetSingleMerchantResponse_name(ctx, field)
			case "payment_history":
				return ec.fieldContext_GetSingleMerchantResponse_payment_history(ctx, field)
			case "phone_number":
				return ec.fieldContext_GetSingleMerchantResponse_phone_number(ctx, field)
			case "created_at":
				return ec.fieldContext_GetSingleMerchantResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_GetSingleMerchantResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetSingleMerchantResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetListMerchantResponse_count(ctx context.Context, field graphql.CollectedField, obj *model.GetListMerchantResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetListMerchantResponse_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetListMerchantResponse_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetListMerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetListOrdersResponse_getorders(ctx context.Context, field graphql.CollectedField, obj *model.GetListOrdersResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetListOrdersResponse_getorders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Getorders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.GetSingleOrderResponse)
	fc.Result = res
	return ec.marshalNGetSingleOrderResponse2ᚕᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleOrderResponseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetListOrdersResponse_getorders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetListOrdersResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GetSingleOrderResponse_id(ctx, field)
			case "user_id":
				return ec.fieldContext_GetSingleOrderResponse_user_id(ctx, field)
			case "merchant_id":
				return ec.fieldContext_GetSingleOrderResponse_merchant_id(ctx, field)
			case "created_at":
				return ec.fieldContext_GetSingleOrderResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_GetSingleOrderResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetSingleOrderResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetListOrdersResponse_count(ctx context.Context, field graphql.CollectedField, obj *model.GetListOrdersResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetListOrdersResponse_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetListOrdersResponse_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetListOrdersResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetListReviewsResponse_getReviews(ctx context.Context, field graphql.CollectedField, obj *model.GetListReviewsResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetListReviewsResponse_getReviews(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetReviews, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.GetSingleReviewResponse)
	fc.Result = res
	return ec.marshalNGetSingleReviewResponse2ᚕᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleReviewResponseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetListReviewsResponse_getReviews(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetListReviewsResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GetSingleReviewResponse_id(ctx, field)
			case "user_id":
				return ec.fieldContext_GetSingleReviewResponse_user_id(ctx, field)
			case "merchant_id":
				return ec.fieldContext_GetSingleReviewResponse_merchant_id(ctx, field)
			case "rate":
				return ec.fieldContext_GetSingleReviewResponse_rate(ctx, field)
			case "review_content":
				return ec.fieldContext_GetSingleReviewResponse_review_content(ctx, field)
			case "created_at":
				return ec.fieldContext_GetSingleReviewResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_GetSingleReviewResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetSingleReviewResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetListReviewsResponse_count(ctx context.Context, field graphql.CollectedField, obj *model.GetListReviewsResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetListReviewsResponse_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetListReviewsResponse_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetListReviewsResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetListUsersResponse_getUsers(ctx context.Context, field graphql.CollectedField, obj *model.GetListUsersResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetListUsersResponse_getUsers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetUsers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.GetSingleUserResponse)
	fc.Result = res
	return ec.marshalNGetSingleUserResponse2ᚕᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleUserResponseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetListUsersResponse_getUsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetListUsersResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GetSingleUserResponse_id(ctx, field)
			case "name":
				return ec.fieldContext_GetSingleUserResponse_name(ctx, field)
			case "payment_history":
				return ec.fieldContext_GetSingleUserResponse_payment_history(ctx, field)
			case "phone_number":
				return ec.fieldContext_GetSingleUserResponse_phone_number(ctx, field)
			case "created_at":
				return ec.fieldContext_GetSingleUserResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_GetSingleUserResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetSingleUserResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetListUsersResponse_count(ctx context.Context, field graphql.CollectedField, obj *model.GetListUsersResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetListUsersResponse_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetListUsersResponse_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetListUsersResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetReplyReviewsResponse_getReviews(ctx context.Context, field graphql.CollectedField, obj *model.GetReplyReviewsResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetReplyReviewsResponse_getReviews(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetReviews, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ReviewComment)
	fc.Result = res
	return ec.marshalNReviewComment2ᚕᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐReviewCommentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetReplyReviewsResponse_getReviews(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetReplyReviewsResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ReviewComment_id(ctx, field)
			case "review_id":
				return ec.fieldContext_ReviewComment_review_id(ctx, field)
			case "sender_id":
				return ec.fieldContext_ReviewComment_sender_id(ctx, field)
			case "content":
				return ec.fieldContext_ReviewComment_content(ctx, field)
			case "created_at":
				return ec.fieldContext_ReviewComment_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_ReviewComment_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReviewComment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetReplyReviewsResponse_count(ctx context.Context, field graphql.CollectedField, obj *model.GetReplyReviewsResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetReplyReviewsResponse_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetReplyReviewsResponse_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetReplyReviewsResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBikeResponse_bike_status(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBikeResponse_bike_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BikeStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBikeResponse_bike_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBikeResponse_bike_number(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBikeResponse_bike_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BikeNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBikeResponse_bike_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBikeResponse_bike_model(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBikeResponse_bike_model(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BikeModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBikeResponse_bike_model(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBikeResponse_started_price(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBikeResponse_started_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBikeResponse_started_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBikeResponse_end_price(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBikeResponse_end_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBikeResponse_end_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBikeResponse_colour(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBikeResponse_colour(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Colour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBikeResponse_colour(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBikeResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBikeResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBikeResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBikeResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBikeResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBikeResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBikeResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBikeResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBikeResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBusResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBusResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBusResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBusResponse_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBusResponse_driver_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBusResponse_driver_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBusResponse_merchant_id(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBusResponse_merchant_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MerchantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBusResponse_merchant_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBusResponse_region_id(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBusResponse_region_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBusResponse_region_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBusResponse_bus_status(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBusResponse_bus_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBusResponse_bus_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBusResponse_bus_name(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBusResponse_bus_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBusResponse_bus_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBusResponse_bus_number(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBusResponse_bus_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBusResponse_bus_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBusResponse_bus_type(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBusResponse_bus_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBusResponse_bus_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBusResponse_started_price(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBusResponse_started_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBusResponse_started_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBusResponse_end_price(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBusResponse_end_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBusResponse_end_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBusResponse_booking_count(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBusResponse_booking_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BookingCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBusResponse_booking_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBusResponse_place_count(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBusResponse_place_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlaceCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBusResponse_place_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBusResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBusResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBusResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleBusResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleBusResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleBusResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleCarResponse_is_covid(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleCarResponse_is_covid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCovid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleCarResponse_is_covid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleCarResponse_is_air_condt(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleCarResponse_is_air_condt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAirCondt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleCarResponse_is_air_condt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleCarResponse_car_status(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleCarResponse_car_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleCarResponse_car_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleCarResponse_car_number(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleCarResponse_car_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleCarResponse_car_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleCarResponse_car_name(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleCarResponse_car_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleCarResponse_car_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleCarResponse_started_price(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleCarResponse_started_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleCarResponse_started_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleCarResponse_end_price(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleCarResponse_end_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleCarResponse_end_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleCarResponse_place_count(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleCarResponse_place_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlaceCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleCarResponse_place_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleCarResponse_colour(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleCarResponse_colour(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Colour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleCarResponse_colour(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleCarResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleCarResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleCarResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleCarResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleCarResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleCarResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleCarResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleCarResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleCarResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleDriverResponse_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleDriverResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleDriverResponse_driver_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleDriverResponse_driver_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleDriverResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleDriverResponse_phone_number(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleDriverResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleDriverResponse_phone_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleDriverResponse_phone_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleDriverResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleDriverResponse_experience(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleDriverResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleDriverResponse_experience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Experience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleDriverResponse_experience(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleDriverResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleDriverResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleDriverResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleDriverResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleDriverResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleDriverResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleDriverResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleDriverResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleDriverResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleDriverResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleDriverResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleDriverResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleDriverResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleDriverResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleDriverResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleDriverResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleKekeResponse_keke_status(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleKekeResponse_keke_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KekeStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleKekeResponse_keke_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleKekeResponse_keke_number(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleKekeResponse_keke_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KekeNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleKekeResponse_keke_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleKekeResponse_started_price(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleKekeResponse_started_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleKekeResponse_started_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleKekeResponse_end_price(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleKekeResponse_end_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleKekeResponse_end_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleKekeResponse_place_count(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleKekeResponse_place_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlaceCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleKekeResponse_place_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleKekeResponse_colour(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleKekeResponse_colour(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Colour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleKekeResponse_colour(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleKekeResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleKekeResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleKekeResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleKekeResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleKekeResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleKekeResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleKekeResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleKekeResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleKekeResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleMerchantResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleMerchantResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleMerchantResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleMerchantResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleMerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleMerchantResponse_name(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleMerchantResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleMerchantResponse_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleMerchantResponse_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleMerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleMerchantResponse_payment_history(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleMerchantResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleMerchantResponse_payment_history(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleMerchantResponse_payment_history(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleMerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleMerchantResponse_phone_number(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleMerchantResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleMerchantResponse_phone_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleMerchantResponse_phone_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleMerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleMerchantResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleMerchantResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleMerchantResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleMerchantResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleMerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleMerchantResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleMerchantResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleMerchantResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleMerchantResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleMerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleOrderResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleOrderResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleOrderResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleOrderResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleOrderResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleOrderResponse_user_id(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleOrderResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleOrderResponse_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleOrderResponse_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleOrderResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleOrderResponse_merchant_id(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleOrderResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleOrderResponse_merchant_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MerchantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleOrderResponse_merchant_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleOrderResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleOrderResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleOrderResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleOrderResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleOrderResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleOrderResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleOrderResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleOrderResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleOrderResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleOrderResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleOrderResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleReviewResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleReviewResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleReviewResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleReviewResponse_user_id(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleReviewResponse_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleReviewResponse_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleReviewResponse_merchant_id(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleReviewResponse_merchant_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MerchantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleReviewResponse_merchant_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleReviewResponse_rate(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleReviewResponse_rate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleReviewResponse_rate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleReviewResponse_review_content(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleReviewResponse_review_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleReviewResponse_review_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleReviewResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleReviewResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleReviewResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleReviewResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleReviewResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleReviewResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleUserResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleUserResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleUserResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleUserResponse_name(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleUserResponse_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleUserResponse_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleUserResponse_payment_history(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleUserResponse_payment_history(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleUserResponse_payment_history(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleUserResponse_phone_number(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleUserResponse_phone_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleUserResponse_phone_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleUserResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleUserResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleUserResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetSingleUserResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.GetSingleUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetSingleUserResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetSingleUserResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetSingleUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createBike(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createBike(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateBike(rctx, fc.Args["input"].(*model.CreateBikeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreateBikeResponse)
	fc.Result = res
	return ec.marshalNCreateBikeResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateBikeResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createBike(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "bike_status":
				return ec.fieldContext_CreateBikeResponse_bike_status(ctx, field)
			case "bike_number":
				return ec.fieldContext_CreateBikeResponse_bike_number(ctx, field)
			case "bike_model":
				return ec.fieldContext_CreateBikeResponse_bike_model(ctx, field)
			case "started_price":
				return ec.fieldContext_CreateBikeResponse_started_price(ctx, field)
			case "end_price":
				return ec.fieldContext_CreateBikeResponse_end_price(ctx, field)
			case "colour":
				return ec.fieldContext_CreateBikeResponse_colour(ctx, field)
			case "id":
				return ec.fieldContext_CreateBikeResponse_id(ctx, field)
			case "created_at":
				return ec.fieldContext_CreateBikeResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CreateBikeResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateBikeResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createBike_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateBike(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateBike(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateBike(rctx, fc.Args["input"].(*model.UpdateBikeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UpdateBikeResponse)
	fc.Result = res
	return ec.marshalNUpdateBikeResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateBikeResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateBike(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "bike_status":
				return ec.fieldContext_UpdateBikeResponse_bike_status(ctx, field)
			case "bike_number":
				return ec.fieldContext_UpdateBikeResponse_bike_number(ctx, field)
			case "bike_model":
				return ec.fieldContext_UpdateBikeResponse_bike_model(ctx, field)
			case "started_price":
				return ec.fieldContext_UpdateBikeResponse_started_price(ctx, field)
			case "end_price":
				return ec.fieldContext_UpdateBikeResponse_end_price(ctx, field)
			case "colour":
				return ec.fieldContext_UpdateBikeResponse_colour(ctx, field)
			case "id":
				return ec.fieldContext_UpdateBikeResponse_id(ctx, field)
			case "created_at":
				return ec.fieldContext_UpdateBikeResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UpdateBikeResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateBikeResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateBike_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteBike(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteBike(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteBike(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNEmpty2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteBike(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Empty does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteBike_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createBus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createBus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateBus(rctx, fc.Args["input"].(*model.CreateBusReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreateBusResponse)
	fc.Result = res
	return ec.marshalNCreateBusResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateBusResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createBus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CreateBusResponse_id(ctx, field)
			case "driver_id":
				return ec.fieldContext_CreateBusResponse_driver_id(ctx, field)
			case "merchant_id":
				return ec.fieldContext_CreateBusResponse_merchant_id(ctx, field)
			case "region_id":
				return ec.fieldContext_CreateBusResponse_region_id(ctx, field)
			case "bus_status":
				return ec.fieldContext_CreateBusResponse_bus_status(ctx, field)
			case "bus_name":
				return ec.fieldContext_CreateBusResponse_bus_name(ctx, field)
			case "bus_number":
				return ec.fieldContext_CreateBusResponse_bus_number(ctx, field)
			case "bus_type":
				return ec.fieldContext_CreateBusResponse_bus_type(ctx, field)
			case "started_price":
				return ec.fieldContext_CreateBusResponse_started_price(ctx, field)
			case "end_price":
				return ec.fieldContext_CreateBusResponse_end_price(ctx, field)
			case "booking_count":
				return ec.fieldContext_CreateBusResponse_booking_count(ctx, field)
			case "place_count":
				return ec.fieldContext_CreateBusResponse_place_count(ctx, field)
			case "created_at":
				return ec.fieldContext_CreateBusResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CreateBusResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateBusResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createBus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateBus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateBus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateBus(rctx, fc.Args["input"].(*model.UpdateBusReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UpdateBusResponse)
	fc.Result = res
	return ec.marshalNUpdateBusResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateBusResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateBus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UpdateBusResponse_id(ctx, field)
			case "bus_status":
				return ec.fieldContext_UpdateBusResponse_bus_status(ctx, field)
			case "bus_name":
				return ec.fieldContext_UpdateBusResponse_bus_name(ctx, field)
			case "bus_number":
				return ec.fieldContext_UpdateBusResponse_bus_number(ctx, field)
			case "bus_type":
				return ec.fieldContext_UpdateBusResponse_bus_type(ctx, field)
			case "started_price":
				return ec.fieldContext_UpdateBusResponse_started_price(ctx, field)
			case "end_price":
				return ec.fieldContext_UpdateBusResponse_end_price(ctx, field)
			case "booking_count":
				return ec.fieldContext_UpdateBusResponse_booking_count(ctx, field)
			case "place_count":
				return ec.fieldContext_UpdateBusResponse_place_count(ctx, field)
			case "created_at":
				return ec.fieldContext_UpdateBusResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UpdateBusResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateBusResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateBus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteBus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteBus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteBus(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNEmpty2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteBus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Empty does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteBus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCar(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCar(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCar(rctx, fc.Args["input"].(*model.CreateCarReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreateCarResponse)
	fc.Result = res
	return ec.marshalNCreateCarResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateCarResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCar(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "is_covid":
				return ec.fieldContext_CreateCarResponse_is_covid(ctx, field)
			case "is_air_condt":
				return ec.fieldContext_CreateCarResponse_is_air_condt(ctx, field)
			case "car_status":
				return ec.fieldContext_CreateCarResponse_car_status(ctx, field)
			case "car_number":
				return ec.fieldContext_CreateCarResponse_car_number(ctx, field)
			case "car_name":
				return ec.fieldContext_CreateCarResponse_car_name(ctx, field)
			case "started_price":
				return ec.fieldContext_CreateCarResponse_started_price(ctx, field)
			case "end_price":
				return ec.fieldContext_CreateCarResponse_end_price(ctx, field)
			case "place_count":
				return ec.fieldContext_CreateCarResponse_place_count(ctx, field)
			case "colour":
				return ec.fieldContext_CreateCarResponse_colour(ctx, field)
			case "id":
				return ec.fieldContext_CreateCarResponse_id(ctx, field)
			case "created_at":
				return ec.fieldContext_CreateCarResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CreateCarResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateCarResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCar_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCar(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCar(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCar(rctx, fc.Args["input"].(*model.UpdateCarReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UpdateCarResponse)
	fc.Result = res
	return ec.marshalNUpdateCarResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateCarResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCar(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "is_covid":
				return ec.fieldContext_UpdateCarResponse_is_covid(ctx, field)
			case "is_air_condt":
				return ec.fieldContext_UpdateCarResponse_is_air_condt(ctx, field)
			case "car_status":
				return ec.fieldContext_UpdateCarResponse_car_status(ctx, field)
			case "car_number":
				return ec.fieldContext_UpdateCarResponse_car_number(ctx, field)
			case "car_name":
				return ec.fieldContext_UpdateCarResponse_car_name(ctx, field)
			case "started_price":
				return ec.fieldContext_UpdateCarResponse_started_price(ctx, field)
			case "end_price":
				return ec.fieldContext_UpdateCarResponse_end_price(ctx, field)
			case "place_count":
				return ec.fieldContext_UpdateCarResponse_place_count(ctx, field)
			case "colour":
				return ec.fieldContext_UpdateCarResponse_colour(ctx, field)
			case "id":
				return ec.fieldContext_UpdateCarResponse_id(ctx, field)
			case "created_at":
				return ec.fieldContext_UpdateCarResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UpdateCarResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateCarResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCar_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteCar(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteCar(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCar(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNEmpty2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteCar(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Empty does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteCar_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUser(rctx, fc.Args["input"].(*model.CreateUserReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreateUserResponse)
	fc.Result = res
	return ec.marshalNCreateUserResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateUserResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CreateUserResponse_id(ctx, field)
			case "name":
				return ec.fieldContext_CreateUserResponse_name(ctx, field)
			case "payment_history":
				return ec.fieldContext_CreateUserResponse_payment_history(ctx, field)
			case "phone_number":
				return ec.fieldContext_CreateUserResponse_phone_number(ctx, field)
			case "created_at":
				return ec.fieldContext_CreateUserResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CreateUserResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateUserResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUser(rctx, fc.Args["input"].(*model.UpdateUserReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UpdateUserResponse)
	fc.Result = res
	return ec.marshalNUpdateUserResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateUserResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UpdateUserResponse_id(ctx, field)
			case "name":
				return ec.fieldContext_UpdateUserResponse_name(ctx, field)
			case "payment_history":
				return ec.fieldContext_UpdateUserResponse_payment_history(ctx, field)
			case "phone_number":
				return ec.fieldContext_UpdateUserResponse_phone_number(ctx, field)
			case "created_at":
				return ec.fieldContext_UpdateUserResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UpdateUserResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateUserResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createMerchant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateMerchant(rctx, fc.Args["input"].(*model.CreateMerchantReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreateMerchantResponse)
	fc.Result = res
	return ec.marshalNCreateMerchantResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateMerchantResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CreateMerchantResponse_id(ctx, field)
			case "name":
				return ec.fieldContext_CreateMerchantResponse_name(ctx, field)
			case "payment_history":
				return ec.fieldContext_CreateMerchantResponse_payment_history(ctx, field)
			case "phone_number":
				return ec.fieldContext_CreateMerchantResponse_phone_number(ctx, field)
			case "created_at":
				return ec.fieldContext_CreateMerchantResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CreateMerchantResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateMerchantResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateMerchant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMerchant(rctx, fc.Args["input"].(*model.UpdateMerchantReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UpdateMerchantResponse)
	fc.Result = res
	return ec.marshalNUpdateMerchantResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateMerchantResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UpdateMerchantResponse_id(ctx, field)
			case "name":
				return ec.fieldContext_UpdateMerchantResponse_name(ctx, field)
			case "payment_history":
				return ec.fieldContext_UpdateMerchantResponse_payment_history(ctx, field)
			case "phone_number":
				return ec.fieldContext_UpdateMerchantResponse_phone_number(ctx, field)
			case "created_at":
				return ec.fieldContext_UpdateMerchantResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UpdateMerchantResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateMerchantResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUser(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNEmpty2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Empty does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteMerchant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMerchant(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNEmpty2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Empty does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createDriver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createDriver(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateDriver(rctx, fc.Args["input"].(*model.CreateDriverReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreateDriverResponse)
	fc.Result = res
	return ec.marshalNCreateDriverResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateDriverResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createDriver(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "driver_name":
				return ec.fieldContext_CreateDriverResponse_driver_name(ctx, field)
			case "phone_number":
				return ec.fieldContext_CreateDriverResponse_phone_number(ctx, field)
			case "experience":
				return ec.fieldContext_CreateDriverResponse_experience(ctx, field)
			case "id":
				return ec.fieldContext_CreateDriverResponse_id(ctx, field)
			case "created_at":
				return ec.fieldContext_CreateDriverResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CreateDriverResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateDriverResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createDriver_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDriver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDriver(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriver(rctx, fc.Args["input"].(*model.UpdateDriverReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UpdateDriverResponse)
	fc.Result = res
	return ec.marshalNUpdateDriverResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateDriverResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDriver(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "driver_name":
				return ec.fieldContext_UpdateDriverResponse_driver_name(ctx, field)
			case "phone_number":
				return ec.fieldContext_UpdateDriverResponse_phone_number(ctx, field)
			case "experience":
				return ec.fieldContext_UpdateDriverResponse_experience(ctx, field)
			case "id":
				return ec.fieldContext_UpdateDriverResponse_id(ctx, field)
			case "created_at":
				return ec.fieldContext_UpdateDriverResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UpdateDriverResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateDriverResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDriver_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteDriver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteDriver(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriver(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNEmpty2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteDriver(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Empty does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteDriver_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createKeke(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createKeke(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateKeke(rctx, fc.Args["input"].(*model.CreateKekeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreateKekeResponse)
	fc.Result = res
	return ec.marshalNCreateKekeResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateKekeResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createKeke(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "keke_status":
				return ec.fieldContext_CreateKekeResponse_keke_status(ctx, field)
			case "keke_number":
				return ec.fieldContext_CreateKekeResponse_keke_number(ctx, field)
			case "started_price":
				return ec.fieldContext_CreateKekeResponse_started_price(ctx, field)
			case "end_price":
				return ec.fieldContext_CreateKekeResponse_end_price(ctx, field)
			case "place_count":
				return ec.fieldContext_CreateKekeResponse_place_count(ctx, field)
			case "colour":
				return ec.fieldContext_CreateKekeResponse_colour(ctx, field)
			case "id":
				return ec.fieldContext_CreateKekeResponse_id(ctx, field)
			case "created_at":
				return ec.fieldContext_CreateKekeResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CreateKekeResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateKekeResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createKeke_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateKeke(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateKeke(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateKeke(rctx, fc.Args["input"].(*model.UpdateKekeReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UpdateKekeResponse)
	fc.Result = res
	return ec.marshalNUpdateKekeResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateKekeResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateKeke(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "keke_status":
				return ec.fieldContext_UpdateKekeResponse_keke_status(ctx, field)
			case "keke_number":
				return ec.fieldContext_UpdateKekeResponse_keke_number(ctx, field)
			case "started_price":
				return ec.fieldContext_UpdateKekeResponse_started_price(ctx, field)
			case "end_price":
				return ec.fieldContext_UpdateKekeResponse_end_price(ctx, field)
			case "place_count":
				return ec.fieldContext_UpdateKekeResponse_place_count(ctx, field)
			case "colour":
				return ec.fieldContext_UpdateKekeResponse_colour(ctx, field)
			case "id":
				return ec.fieldContext_UpdateKekeResponse_id(ctx, field)
			case "created_at":
				return ec.fieldContext_UpdateKekeResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UpdateKekeResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateKekeResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateKeke_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteKeke(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteKeke(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteKeke(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNEmpty2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteKeke(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Empty does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteKeke_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateOrder(rctx, fc.Args["input"].(*model.CreateOrderReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreateOrderResponse)
	fc.Result = res
	return ec.marshalNCreateOrderResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateOrderResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createOrder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CreateOrderResponse_id(ctx, field)
			case "user_id":
				return ec.fieldContext_CreateOrderResponse_user_id(ctx, field)
			case "merchant_id":
				return ec.fieldContext_CreateOrderResponse_merchant_id(ctx, field)
			case "created_at":
				return ec.fieldContext_CreateOrderResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CreateOrderResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateOrderResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createOrder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrder(rctx, fc.Args["input"].(*model.UpdateOrderReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UpdateOrderResponse)
	fc.Result = res
	return ec.marshalNUpdateOrderResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateOrderResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateOrder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UpdateOrderResponse_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UpdateOrderResponse_user_id(ctx, field)
			case "merchant_id":
				return ec.fieldContext_UpdateOrderResponse_merchant_id(ctx, field)
			case "created_at":
				return ec.fieldContext_UpdateOrderResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UpdateOrderResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateOrderResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateOrder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteOrder(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNEmpty2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteOrder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Empty does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteOrder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createReview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateReview(rctx, fc.Args["input"].(*model.CreateReviewReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreateReviewResponse)
	fc.Result = res
	return ec.marshalNCreateReviewResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateReviewResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createReview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CreateReviewResponse_id(ctx, field)
			case "user_id":
				return ec.fieldContext_CreateReviewResponse_user_id(ctx, field)
			case "merchant_id":
				return ec.fieldContext_CreateReviewResponse_merchant_id(ctx, field)
			case "rate":
				return ec.fieldContext_CreateReviewResponse_rate(ctx, field)
			case "review_content":
				return ec.fieldContext_CreateReviewResponse_review_content(ctx, field)
			case "created_at":
				return ec.fieldContext_CreateReviewResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CreateReviewResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateReviewResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createReview_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateReview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateReview(rctx, fc.Args["input"].(*model.UpdateReviewReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UpdateReviewResponse)
	fc.Result = res
	return ec.marshalNUpdateReviewResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateReviewResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateReview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UpdateReviewResponse_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UpdateReviewResponse_user_id(ctx, field)
			case "merchant_id":
				return ec.fieldContext_UpdateReviewResponse_merchant_id(ctx, field)
			case "rate":
				return ec.fieldContext_UpdateReviewResponse_rate(ctx, field)
			case "review_content":
				return ec.fieldContext_UpdateReviewResponse_review_content(ctx, field)
			case "created_at":
				return ec.fieldContext_UpdateReviewResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UpdateReviewResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateReviewResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateReview_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteReview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteReview(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNEmpty2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteReview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Empty does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteReview_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createReplyReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createReplyReview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateReplyReview(rctx, fc.Args["input"].(*model.CreateReviewReplyReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreateReviewReplyResponse)
	fc.Result = res
	return ec.marshalNCreateReviewReplyResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateReviewReplyResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createReplyReview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CreateReviewReplyResponse_id(ctx, field)
			case "sender_id":
				return ec.fieldContext_CreateReviewReplyResponse_sender_id(ctx, field)
			case "review_id":
				return ec.fieldContext_CreateReviewReplyResponse_review_id(ctx, field)
			case "content":
				return ec.fieldContext_CreateReviewReplyResponse_content(ctx, field)
			case "created_at":
				return ec.fieldContext_CreateReviewReplyResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CreateReviewReplyResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateReviewReplyResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createReplyReview_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateReplyReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateReplyReview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateReplyReview(rctx, fc.Args["input"].(*model.UpdateReviewReplyReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UpdateReviewReplyResponse)
	fc.Result = res
	return ec.marshalNUpdateReviewReplyResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateReviewReplyResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateReplyReview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UpdateReviewReplyResponse_id(ctx, field)
			case "sender_id":
				return ec.fieldContext_UpdateReviewReplyResponse_sender_id(ctx, field)
			case "review_id":
				return ec.fieldContext_UpdateReviewReplyResponse_review_id(ctx, field)
			case "content":
				return ec.fieldContext_UpdateReviewReplyResponse_content(ctx, field)
			case "created_at":
				return ec.fieldContext_UpdateReviewReplyResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UpdateReviewReplyResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateReviewReplyResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateReplyReview_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteReplyReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteReplyReview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteReplyReview(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNEmpty2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteReplyReview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Empty does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteReplyReview_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getListBikes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getListBikes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetListBikes(rctx, fc.Args["input"].(model.GetListBikesReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetListBikesResponse)
	fc.Result = res
	return ec.marshalNGetListBikesResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListBikesResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getListBikes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "getBikes":
				return ec.fieldContext_GetListBikesResponse_getBikes(ctx, field)
			case "count":
				return ec.fieldContext_GetListBikesResponse_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetListBikesResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getListBikes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSingleBike(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getSingleBike(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSingleBike(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetSingleBikeResponse)
	fc.Result = res
	return ec.marshalNGetSingleBikeResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleBikeResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getSingleBike(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "bike_status":
				return ec.fieldContext_GetSingleBikeResponse_bike_status(ctx, field)
			case "bike_number":
				return ec.fieldContext_GetSingleBikeResponse_bike_number(ctx, field)
			case "bike_model":
				return ec.fieldContext_GetSingleBikeResponse_bike_model(ctx, field)
			case "started_price":
				return ec.fieldContext_GetSingleBikeResponse_started_price(ctx, field)
			case "end_price":
				return ec.fieldContext_GetSingleBikeResponse_end_price(ctx, field)
			case "colour":
				return ec.fieldContext_GetSingleBikeResponse_colour(ctx, field)
			case "id":
				return ec.fieldContext_GetSingleBikeResponse_id(ctx, field)
			case "created_at":
				return ec.fieldContext_GetSingleBikeResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_GetSingleBikeResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetSingleBikeResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getSingleBike_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getListBuses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getListBuses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetListBuses(rctx, fc.Args["input"].(model.GetListBusesReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetListBusesResponse)
	fc.Result = res
	return ec.marshalNGetListBusesResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListBusesResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getListBuses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "getBuses":
				return ec.fieldContext_GetListBusesResponse_getBuses(ctx, field)
			case "count":
				return ec.fieldContext_GetListBusesResponse_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetListBusesResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getListBuses_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSingleBus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getSingleBus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSingleBus(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetSingleBusResponse)
	fc.Result = res
	return ec.marshalNGetSingleBusResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleBusResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getSingleBus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GetSingleBusResponse_id(ctx, field)
			case "driver_id":
				return ec.fieldContext_GetSingleBusResponse_driver_id(ctx, field)
			case "merchant_id":
				return ec.fieldContext_GetSingleBusResponse_merchant_id(ctx, field)
			case "region_id":
				return ec.fieldContext_GetSingleBusResponse_region_id(ctx, field)
			case "bus_status":
				return ec.fieldContext_GetSingleBusResponse_bus_status(ctx, field)
			case "bus_name":
				return ec.fieldContext_GetSingleBusResponse_bus_name(ctx, field)
			case "bus_number":
				return ec.fieldContext_GetSingleBusResponse_bus_number(ctx, field)
			case "bus_type":
				return ec.fieldContext_GetSingleBusResponse_bus_type(ctx, field)
			case "started_price":
				return ec.fieldContext_GetSingleBusResponse_started_price(ctx, field)
			case "end_price":
				return ec.fieldContext_GetSingleBusResponse_end_price(ctx, field)
			case "booking_count":
				return ec.fieldContext_GetSingleBusResponse_booking_count(ctx, field)
			case "place_count":
				return ec.fieldContext_GetSingleBusResponse_place_count(ctx, field)
			case "created_at":
				return ec.fieldContext_GetSingleBusResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_GetSingleBusResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetSingleBusResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getSingleBus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getListCars(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getListCars(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetListCars(rctx, fc.Args["input"].(model.GetListCarsReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetListCarsResponse)
	fc.Result = res
	return ec.marshalNGetListCarsResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListCarsResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getListCars(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "getCars":
				return ec.fieldContext_GetListCarsResponse_getCars(ctx, field)
			case "count":
				return ec.fieldContext_GetListCarsResponse_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetListCarsResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getListCars_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSingleCar(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getSingleCar(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSingleCar(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetSingleCarResponse)
	fc.Result = res
	return ec.marshalNGetSingleCarResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleCarResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getSingleCar(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "is_covid":
				return ec.fieldContext_GetSingleCarResponse_is_covid(ctx, field)
			case "is_air_condt":
				return ec.fieldContext_GetSingleCarResponse_is_air_condt(ctx, field)
			case "car_status":
				return ec.fieldContext_GetSingleCarResponse_car_status(ctx, field)
			case "car_number":
				return ec.fieldContext_GetSingleCarResponse_car_number(ctx, field)
			case "car_name":
				return ec.fieldContext_GetSingleCarResponse_car_name(ctx, field)
			case "started_price":
				return ec.fieldContext_GetSingleCarResponse_started_price(ctx, field)
			case "end_price":
				return ec.fieldContext_GetSingleCarResponse_end_price(ctx, field)
			case "place_count":
				return ec.fieldContext_GetSingleCarResponse_place_count(ctx, field)
			case "colour":
				return ec.fieldContext_GetSingleCarResponse_colour(ctx, field)
			case "id":
				return ec.fieldContext_GetSingleCarResponse_id(ctx, field)
			case "created_at":
				return ec.fieldContext_GetSingleCarResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_GetSingleCarResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetSingleCarResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getSingleCar_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getListUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getListUsers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetListUsers(rctx, fc.Args["input"].(model.GetListUsersReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetListUsersResponse)
	fc.Result = res
	return ec.marshalNGetListUsersResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListUsersResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getListUsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "getUsers":
				return ec.fieldContext_GetListUsersResponse_getUsers(ctx, field)
			case "count":
				return ec.fieldContext_GetListUsersResponse_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetListUsersResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getListUsers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSingleUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getSingleUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSingleUser(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetSingleUserResponse)
	fc.Result = res
	return ec.marshalNGetSingleUserResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleUserResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getSingleUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GetSingleUserResponse_id(ctx, field)
			case "name":
				return ec.fieldContext_GetSingleUserResponse_name(ctx, field)
			case "payment_history":
				return ec.fieldContext_GetSingleUserResponse_payment_history(ctx, field)
			case "phone_number":
				return ec.fieldContext_GetSingleUserResponse_phone_number(ctx, field)
			case "created_at":
				return ec.fieldContext_GetSingleUserResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_GetSingleUserResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetSingleUserResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getSingleUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getListMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getListMerchant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetListMerchant(rctx, fc.Args["input"].(model.GetListMerchantReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetListMerchantResponse)
	fc.Result = res
	return ec.marshalNGetListMerchantResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListMerchantResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getListMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "getmerchants":
				return ec.fieldContext_GetListMerchantResponse_getmerchants(ctx, field)
			case "count":
				return ec.fieldContext_GetListMerchantResponse_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetListMerchantResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getListMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSingleMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getSingleMerchant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSingleMerchant(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetSingleMerchantResponse)
	fc.Result = res
	return ec.marshalNGetSingleMerchantResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleMerchantResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getSingleMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GetSingleMerchantResponse_id(ctx, field)
			case "name":
				return ec.fieldContext_GetSingleMerchantResponse_name(ctx, field)
			case "payment_history":
				return ec.fieldContext_GetSingleMerchantResponse_payment_history(ctx, field)
			case "phone_number":
				return ec.fieldContext_GetSingleMerchantResponse_phone_number(ctx, field)
			case "created_at":
				return ec.fieldContext_GetSingleMerchantResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_GetSingleMerchantResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetSingleMerchantResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getSingleMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getListDrivers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getListDrivers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetListDrivers(rctx, fc.Args["input"].(model.GetListDriversReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetListDriversResponse)
	fc.Result = res
	return ec.marshalNGetListDriversResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListDriversResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getListDrivers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "getDrivers":
				return ec.fieldContext_GetListDriversResponse_getDrivers(ctx, field)
			case "count":
				return ec.fieldContext_GetListDriversResponse_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetListDriversResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getListDrivers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSingleDriver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getSingleDriver(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSingleDriver(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetSingleDriverResponse)
	fc.Result = res
	return ec.marshalNGetSingleDriverResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleDriverResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getSingleDriver(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "driver_name":
				return ec.fieldContext_GetSingleDriverResponse_driver_name(ctx, field)
			case "phone_number":
				return ec.fieldContext_GetSingleDriverResponse_phone_number(ctx, field)
			case "experience":
				return ec.fieldContext_GetSingleDriverResponse_experience(ctx, field)
			case "id":
				return ec.fieldContext_GetSingleDriverResponse_id(ctx, field)
			case "created_at":
				return ec.fieldContext_GetSingleDriverResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_GetSingleDriverResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetSingleDriverResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getSingleDriver_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getListKekes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getListKekes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetListKekes(rctx, fc.Args["input"].(model.GetListKekesReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetListKekesResponse)
	fc.Result = res
	return ec.marshalNGetListKekesResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListKekesResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getListKekes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "getKekes":
				return ec.fieldContext_GetListKekesResponse_getKekes(ctx, field)
			case "count":
				return ec.fieldContext_GetListKekesResponse_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetListKekesResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getListKekes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSingleKeke(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getSingleKeke(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSingleKeke(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetSingleKekeResponse)
	fc.Result = res
	return ec.marshalNGetSingleKekeResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleKekeResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getSingleKeke(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "keke_status":
				return ec.fieldContext_GetSingleKekeResponse_keke_status(ctx, field)
			case "keke_number":
				return ec.fieldContext_GetSingleKekeResponse_keke_number(ctx, field)
			case "started_price":
				return ec.fieldContext_GetSingleKekeResponse_started_price(ctx, field)
			case "end_price":
				return ec.fieldContext_GetSingleKekeResponse_end_price(ctx, field)
			case "place_count":
				return ec.fieldContext_GetSingleKekeResponse_place_count(ctx, field)
			case "colour":
				return ec.fieldContext_GetSingleKekeResponse_colour(ctx, field)
			case "id":
				return ec.fieldContext_GetSingleKekeResponse_id(ctx, field)
			case "created_at":
				return ec.fieldContext_GetSingleKekeResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_GetSingleKekeResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetSingleKekeResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getSingleKeke_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getListOrders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getListOrders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetListOrders(rctx, fc.Args["input"].(model.GetListOrdersReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetListOrdersResponse)
	fc.Result = res
	return ec.marshalNGetListOrdersResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListOrdersResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getListOrders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "getorders":
				return ec.fieldContext_GetListOrdersResponse_getorders(ctx, field)
			case "count":
				return ec.fieldContext_GetListOrdersResponse_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetListOrdersResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getListOrders_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSingleOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getSingleOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSingleOrder(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetSingleOrderResponse)
	fc.Result = res
	return ec.marshalNGetSingleOrderResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleOrderResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getSingleOrder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GetSingleOrderResponse_id(ctx, field)
			case "user_id":
				return ec.fieldContext_GetSingleOrderResponse_user_id(ctx, field)
			case "merchant_id":
				return ec.fieldContext_GetSingleOrderResponse_merchant_id(ctx, field)
			case "created_at":
				return ec.fieldContext_GetSingleOrderResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_GetSingleOrderResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetSingleOrderResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getSingleOrder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getListReviews(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getListReviews(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetListReviews(rctx, fc.Args["input"].(model.GetListReviewsReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetListReviewsResponse)
	fc.Result = res
	return ec.marshalNGetListReviewsResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListReviewsResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getListReviews(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "getReviews":
				return ec.fieldContext_GetListReviewsResponse_getReviews(ctx, field)
			case "count":
				return ec.fieldContext_GetListReviewsResponse_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetListReviewsResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getListReviews_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSingleReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getSingleReview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSingleReview(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetSingleReviewResponse)
	fc.Result = res
	return ec.marshalNGetSingleReviewResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleReviewResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getSingleReview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GetSingleReviewResponse_id(ctx, field)
			case "user_id":
				return ec.fieldContext_GetSingleReviewResponse_user_id(ctx, field)
			case "merchant_id":
				return ec.fieldContext_GetSingleReviewResponse_merchant_id(ctx, field)
			case "rate":
				return ec.fieldContext_GetSingleReviewResponse_rate(ctx, field)
			case "review_content":
				return ec.fieldContext_GetSingleReviewResponse_review_content(ctx, field)
			case "created_at":
				return ec.fieldContext_GetSingleReviewResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_GetSingleReviewResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetSingleReviewResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getSingleReview_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetReplyReviews(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetReplyReviews(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetReplyReviews(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetReplyReviewsResponse)
	fc.Result = res
	return ec.marshalNGetReplyReviewsResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetReplyReviewsResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetReplyReviews(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "getReviews":
				return ec.fieldContext_GetReplyReviewsResponse_getReviews(ctx, field)
			case "count":
				return ec.fieldContext_GetReplyReviewsResponse_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetReplyReviewsResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetReplyReviews_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewComment_id(ctx context.Context, field graphql.CollectedField, obj *model.ReviewComment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReviewComment_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReviewComment_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewComment_review_id(ctx context.Context, field graphql.CollectedField, obj *model.ReviewComment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReviewComment_review_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReviewComment_review_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewComment_sender_id(ctx context.Context, field graphql.CollectedField, obj *model.ReviewComment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReviewComment_sender_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SenderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReviewComment_sender_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewComment_content(ctx context.Context, field graphql.CollectedField, obj *model.ReviewComment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReviewComment_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReviewComment_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewComment_created_at(ctx context.Context, field graphql.CollectedField, obj *model.ReviewComment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReviewComment_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReviewComment_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewComment_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.ReviewComment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReviewComment_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReviewComment_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBikeResponse_bike_status(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBikeResponse_bike_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BikeStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBikeResponse_bike_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBikeResponse_bike_number(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBikeResponse_bike_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BikeNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBikeResponse_bike_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBikeResponse_bike_model(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBikeResponse_bike_model(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BikeModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBikeResponse_bike_model(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBikeResponse_started_price(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBikeResponse_started_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBikeResponse_started_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBikeResponse_end_price(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBikeResponse_end_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBikeResponse_end_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBikeResponse_colour(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBikeResponse_colour(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Colour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBikeResponse_colour(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBikeResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBikeResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBikeResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBikeResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBikeResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBikeResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBikeResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBikeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBikeResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBikeResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBikeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBusResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBusResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBusResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBusResponse_bus_status(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBusResponse_bus_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBusResponse_bus_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBusResponse_bus_name(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBusResponse_bus_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBusResponse_bus_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBusResponse_bus_number(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBusResponse_bus_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBusResponse_bus_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBusResponse_bus_type(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBusResponse_bus_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBusResponse_bus_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBusResponse_started_price(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBusResponse_started_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBusResponse_started_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBusResponse_end_price(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBusResponse_end_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBusResponse_end_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBusResponse_booking_count(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBusResponse_booking_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BookingCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBusResponse_booking_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBusResponse_place_count(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBusResponse_place_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlaceCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBusResponse_place_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBusResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBusResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBusResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateBusResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateBusResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateBusResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateBusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCarResponse_is_covid(ctx context.Context, field graphql.CollectedField, obj *model.UpdateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCarResponse_is_covid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCovid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCarResponse_is_covid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCarResponse_is_air_condt(ctx context.Context, field graphql.CollectedField, obj *model.UpdateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCarResponse_is_air_condt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAirCondt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCarResponse_is_air_condt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCarResponse_car_status(ctx context.Context, field graphql.CollectedField, obj *model.UpdateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCarResponse_car_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCarResponse_car_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCarResponse_car_number(ctx context.Context, field graphql.CollectedField, obj *model.UpdateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCarResponse_car_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCarResponse_car_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCarResponse_car_name(ctx context.Context, field graphql.CollectedField, obj *model.UpdateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCarResponse_car_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCarResponse_car_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCarResponse_started_price(ctx context.Context, field graphql.CollectedField, obj *model.UpdateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCarResponse_started_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCarResponse_started_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCarResponse_end_price(ctx context.Context, field graphql.CollectedField, obj *model.UpdateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCarResponse_end_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCarResponse_end_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCarResponse_place_count(ctx context.Context, field graphql.CollectedField, obj *model.UpdateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCarResponse_place_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlaceCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCarResponse_place_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCarResponse_colour(ctx context.Context, field graphql.CollectedField, obj *model.UpdateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCarResponse_colour(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Colour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCarResponse_colour(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCarResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.UpdateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCarResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCarResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCarResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UpdateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCarResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCarResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateCarResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UpdateCarResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateCarResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateCarResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateCarResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateDriverResponse_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.UpdateDriverResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateDriverResponse_driver_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateDriverResponse_driver_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateDriverResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateDriverResponse_phone_number(ctx context.Context, field graphql.CollectedField, obj *model.UpdateDriverResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateDriverResponse_phone_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateDriverResponse_phone_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateDriverResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateDriverResponse_experience(ctx context.Context, field graphql.CollectedField, obj *model.UpdateDriverResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateDriverResponse_experience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Experience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateDriverResponse_experience(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateDriverResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateDriverResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.UpdateDriverResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateDriverResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateDriverResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateDriverResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateDriverResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UpdateDriverResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateDriverResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateDriverResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateDriverResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateDriverResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UpdateDriverResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateDriverResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateDriverResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateDriverResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateKekeResponse_keke_status(ctx context.Context, field graphql.CollectedField, obj *model.UpdateKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateKekeResponse_keke_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KekeStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateKekeResponse_keke_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateKekeResponse_keke_number(ctx context.Context, field graphql.CollectedField, obj *model.UpdateKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateKekeResponse_keke_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KekeNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateKekeResponse_keke_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateKekeResponse_started_price(ctx context.Context, field graphql.CollectedField, obj *model.UpdateKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateKekeResponse_started_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateKekeResponse_started_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateKekeResponse_end_price(ctx context.Context, field graphql.CollectedField, obj *model.UpdateKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateKekeResponse_end_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateKekeResponse_end_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateKekeResponse_place_count(ctx context.Context, field graphql.CollectedField, obj *model.UpdateKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateKekeResponse_place_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlaceCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateKekeResponse_place_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateKekeResponse_colour(ctx context.Context, field graphql.CollectedField, obj *model.UpdateKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateKekeResponse_colour(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Colour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateKekeResponse_colour(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateKekeResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.UpdateKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateKekeResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateKekeResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateKekeResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UpdateKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateKekeResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateKekeResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateKekeResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UpdateKekeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateKekeResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateKekeResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateKekeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMerchantResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMerchantResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMerchantResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMerchantResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMerchantResponse_name(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMerchantResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMerchantResponse_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMerchantResponse_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMerchantResponse_payment_history(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMerchantResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMerchantResponse_payment_history(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMerchantResponse_payment_history(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMerchantResponse_phone_number(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMerchantResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMerchantResponse_phone_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMerchantResponse_phone_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMerchantResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMerchantResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMerchantResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMerchantResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMerchantResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMerchantResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMerchantResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMerchantResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateOrderResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.UpdateOrderResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateOrderResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateOrderResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateOrderResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateOrderResponse_user_id(ctx context.Context, field graphql.CollectedField, obj *model.UpdateOrderResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateOrderResponse_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateOrderResponse_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateOrderResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateOrderResponse_merchant_id(ctx context.Context, field graphql.CollectedField, obj *model.UpdateOrderResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateOrderResponse_merchant_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MerchantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateOrderResponse_merchant_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateOrderResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateOrderResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UpdateOrderResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateOrderResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateOrderResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateOrderResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateOrderResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UpdateOrderResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateOrderResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateOrderResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateOrderResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateReviewReplyResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.UpdateReviewReplyResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateReviewReplyResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateReviewReplyResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateReviewReplyResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateReviewReplyResponse_sender_id(ctx context.Context, field graphql.CollectedField, obj *model.UpdateReviewReplyResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateReviewReplyResponse_sender_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SenderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateReviewReplyResponse_sender_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateReviewReplyResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateReviewReplyResponse_review_id(ctx context.Context, field graphql.CollectedField, obj *model.UpdateReviewReplyResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateReviewReplyResponse_review_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateReviewReplyResponse_review_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateReviewReplyResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateReviewReplyResponse_content(ctx context.Context, field graphql.CollectedField, obj *model.UpdateReviewReplyResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateReviewReplyResponse_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateReviewReplyResponse_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateReviewReplyResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateReviewReplyResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UpdateReviewReplyResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateReviewReplyResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateReviewReplyResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateReviewReplyResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateReviewReplyResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UpdateReviewReplyResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateReviewReplyResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateReviewReplyResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateReviewReplyResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateReviewResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.UpdateReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateReviewResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateReviewResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateReviewResponse_user_id(ctx context.Context, field graphql.CollectedField, obj *model.UpdateReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateReviewResponse_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateReviewResponse_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateReviewResponse_merchant_id(ctx context.Context, field graphql.CollectedField, obj *model.UpdateReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateReviewResponse_merchant_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MerchantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateReviewResponse_merchant_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateReviewResponse_rate(ctx context.Context, field graphql.CollectedField, obj *model.UpdateReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateReviewResponse_rate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateReviewResponse_rate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateReviewResponse_review_content(ctx context.Context, field graphql.CollectedField, obj *model.UpdateReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateReviewResponse_review_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateReviewResponse_review_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateReviewResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UpdateReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateReviewResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateReviewResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateReviewResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UpdateReviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateReviewResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateReviewResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateReviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateUserResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.UpdateUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateUserResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateUserResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateUserResponse_name(ctx context.Context, field graphql.CollectedField, obj *model.UpdateUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateUserResponse_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateUserResponse_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateUserResponse_payment_history(ctx context.Context, field graphql.CollectedField, obj *model.UpdateUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateUserResponse_payment_history(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateUserResponse_payment_history(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateUserResponse_phone_number(ctx context.Context, field graphql.CollectedField, obj *model.UpdateUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateUserResponse_phone_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateUserResponse_phone_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateUserResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UpdateUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateUserResponse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateUserResponse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateUserResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UpdateUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateUserResponse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateUserResponse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputGetListBikesReq(ctx context.Context, obj interface{}) (model.GetListBikesReq, error) {
	var it model.GetListBikesReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"limit", "offset"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
			it.Offset, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetListBusesReq(ctx context.Context, obj interface{}) (model.GetListBusesReq, error) {
	var it model.GetListBusesReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"limit", "offset"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
			it.Offset, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetListCarsReq(ctx context.Context, obj interface{}) (model.GetListCarsReq, error) {
	var it model.GetListCarsReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"limit", "offset"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
			it.Offset, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetListDriversReq(ctx context.Context, obj interface{}) (model.GetListDriversReq, error) {
	var it model.GetListDriversReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"limit", "offset"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
			it.Offset, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetListKekesReq(ctx context.Context, obj interface{}) (model.GetListKekesReq, error) {
	var it model.GetListKekesReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"limit", "offset"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
			it.Offset, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetListMerchantReq(ctx context.Context, obj interface{}) (model.GetListMerchantReq, error) {
	var it model.GetListMerchantReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"limit", "offset"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
			it.Offset, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetListOrdersReq(ctx context.Context, obj interface{}) (model.GetListOrdersReq, error) {
	var it model.GetListOrdersReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"limit", "offset"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
			it.Offset, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetListReviewsReq(ctx context.Context, obj interface{}) (model.GetListReviewsReq, error) {
	var it model.GetListReviewsReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"limit", "offset"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
			it.Offset, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetListUsersReq(ctx context.Context, obj interface{}) (model.GetListUsersReq, error) {
	var it model.GetListUsersReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"limit", "offset"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
			it.Offset, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateBikeReq(ctx context.Context, obj interface{}) (model.CreateBikeReq, error) {
	var it model.CreateBikeReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"bike_status", "bike_number", "bike_model", "started_price", "end_price", "colour"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "bike_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bike_status"))
			it.BikeStatus, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bike_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bike_number"))
			it.BikeNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bike_model":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bike_model"))
			it.BikeModel, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "started_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("started_price"))
			it.StartedPrice, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_price"))
			it.EndPrice, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "colour":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colour"))
			it.Colour, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateBusReq(ctx context.Context, obj interface{}) (model.CreateBusReq, error) {
	var it model.CreateBusReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"driver_id", "merchant_id", "region_id", "bus_status", "bus_name", "bus_number", "bus_type", "started_price", "end_price", "booking_count", "place_count"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchant_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchant_id"))
			it.MerchantID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_id"))
			it.RegionID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bus_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bus_status"))
			it.BusStatus, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bus_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bus_name"))
			it.BusName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bus_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bus_number"))
			it.BusNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bus_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bus_type"))
			it.BusType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "started_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("started_price"))
			it.StartedPrice, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_price"))
			it.EndPrice, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "booking_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("booking_count"))
			it.BookingCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "place_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("place_count"))
			it.PlaceCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateCarReq(ctx context.Context, obj interface{}) (model.CreateCarReq, error) {
	var it model.CreateCarReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"is_covid", "is_air_condt", "car_status", "car_number", "car_name", "started_price", "end_price", "place_count", "colour"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "is_covid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_covid"))
			it.IsCovid, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_air_condt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_air_condt"))
			it.IsAirCondt, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_status"))
			it.CarStatus, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_number"))
			it.CarNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_name"))
			it.CarName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "started_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("started_price"))
			it.StartedPrice, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_price"))
			it.EndPrice, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "place_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("place_count"))
			it.PlaceCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "colour":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colour"))
			it.Colour, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateDriverReq(ctx context.Context, obj interface{}) (model.CreateDriverReq, error) {
	var it model.CreateDriverReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"driver_name", "phone_number", "experience"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_number"))
			it.PhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "experience":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("experience"))
			it.Experience, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateKekeReq(ctx context.Context, obj interface{}) (model.CreateKekeReq, error) {
	var it model.CreateKekeReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"keke_status", "keke_number", "started_price", "end_price", "place_count", "colour"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "keke_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keke_status"))
			it.KekeStatus, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "keke_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keke_number"))
			it.KekeNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "started_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("started_price"))
			it.StartedPrice, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_price"))
			it.EndPrice, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "place_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("place_count"))
			it.PlaceCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "colour":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colour"))
			it.Colour, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateMerchantReq(ctx context.Context, obj interface{}) (model.CreateMerchantReq, error) {
	var it model.CreateMerchantReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "payment_history", "phone_number"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_history":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_history"))
			it.PaymentHistory, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_number"))
			it.PhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateOrderReq(ctx context.Context, obj interface{}) (model.CreateOrderReq, error) {
	var it model.CreateOrderReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_id", "merchant_id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchant_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchant_id"))
			it.MerchantID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateReviewReplyReq(ctx context.Context, obj interface{}) (model.CreateReviewReplyReq, error) {
	var it model.CreateReviewReplyReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"sender_id", "review_id", "content"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "sender_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sender_id"))
			it.SenderID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_id"))
			it.ReviewID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateReviewReq(ctx context.Context, obj interface{}) (model.CreateReviewReq, error) {
	var it model.CreateReviewReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_id", "merchant_id", "rate", "review_content"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchant_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchant_id"))
			it.MerchantID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "rate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rate"))
			it.Rate, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_content"))
			it.ReviewContent, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateUserReq(ctx context.Context, obj interface{}) (model.CreateUserReq, error) {
	var it model.CreateUserReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "payment_history", "phone_number"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_history":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_history"))
			it.PaymentHistory, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_number"))
			it.PhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateBikeReq(ctx context.Context, obj interface{}) (model.UpdateBikeReq, error) {
	var it model.UpdateBikeReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"bike_status", "bike_number", "bike_model", "started_price", "end_price", "colour", "id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "bike_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bike_status"))
			it.BikeStatus, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bike_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bike_number"))
			it.BikeNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bike_model":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bike_model"))
			it.BikeModel, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "started_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("started_price"))
			it.StartedPrice, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_price"))
			it.EndPrice, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "colour":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colour"))
			it.Colour, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateBusReq(ctx context.Context, obj interface{}) (model.UpdateBusReq, error) {
	var it model.UpdateBusReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"bus_status", "bus_name", "bus_number", "bus_type", "started_price", "end_price", "booking_count", "place_count", "id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "bus_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bus_status"))
			it.BusStatus, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bus_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bus_name"))
			it.BusName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bus_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bus_number"))
			it.BusNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bus_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bus_type"))
			it.BusType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "started_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("started_price"))
			it.StartedPrice, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_price"))
			it.EndPrice, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "booking_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("booking_count"))
			it.BookingCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "place_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("place_count"))
			it.PlaceCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateCarReq(ctx context.Context, obj interface{}) (model.UpdateCarReq, error) {
	var it model.UpdateCarReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"is_covid", "is_air_condt", "car_status", "car_number", "car_name", "started_price", "end_price", "place_count", "colour", "id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "is_covid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_covid"))
			it.IsCovid, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_air_condt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_air_condt"))
			it.IsAirCondt, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_status"))
			it.CarStatus, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_number"))
			it.CarNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_name"))
			it.CarName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "started_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("started_price"))
			it.StartedPrice, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_price"))
			it.EndPrice, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "place_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("place_count"))
			it.PlaceCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "colour":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colour"))
			it.Colour, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateDriverReq(ctx context.Context, obj interface{}) (model.UpdateDriverReq, error) {
	var it model.UpdateDriverReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"driver_name", "phone_number", "experience", "id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_number"))
			it.PhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "experience":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("experience"))
			it.Experience, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateKekeReq(ctx context.Context, obj interface{}) (model.UpdateKekeReq, error) {
	var it model.UpdateKekeReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"keke_status", "keke_number", "started_price", "end_price", "place_count", "colour", "id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "keke_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keke_status"))
			it.KekeStatus, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "keke_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keke_number"))
			it.KekeNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "started_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("started_price"))
			it.StartedPrice, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_price"))
			it.EndPrice, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "place_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("place_count"))
			it.PlaceCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "colour":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colour"))
			it.Colour, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateMerchantReq(ctx context.Context, obj interface{}) (model.UpdateMerchantReq, error) {
	var it model.UpdateMerchantReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "payment_history", "phone_number"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_history":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_history"))
			it.PaymentHistory, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_number"))
			it.PhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateOrderReq(ctx context.Context, obj interface{}) (model.UpdateOrderReq, error) {
	var it model.UpdateOrderReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "user_id", "merchant_id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchant_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchant_id"))
			it.MerchantID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateReviewReplyReq(ctx context.Context, obj interface{}) (model.UpdateReviewReplyReq, error) {
	var it model.UpdateReviewReplyReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "sender_id", "content"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sender_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sender_id"))
			it.SenderID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateReviewReq(ctx context.Context, obj interface{}) (model.UpdateReviewReq, error) {
	var it model.UpdateReviewReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "rate", "review_content"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "rate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rate"))
			it.Rate, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_content"))
			it.ReviewContent, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateUserReq(ctx context.Context, obj interface{}) (model.UpdateUserReq, error) {
	var it model.UpdateUserReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "payment_history", "phone_number"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_history":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_history"))
			it.PaymentHistory, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_number"))
			it.PhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var createBikeResponseImplementors = []string{"CreateBikeResponse"}

func (ec *executionContext) _CreateBikeResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CreateBikeResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createBikeResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateBikeResponse")
		case "bike_status":

			out.Values[i] = ec._CreateBikeResponse_bike_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bike_number":

			out.Values[i] = ec._CreateBikeResponse_bike_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bike_model":

			out.Values[i] = ec._CreateBikeResponse_bike_model(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "started_price":

			out.Values[i] = ec._CreateBikeResponse_started_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "end_price":

			out.Values[i] = ec._CreateBikeResponse_end_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "colour":

			out.Values[i] = ec._CreateBikeResponse_colour(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._CreateBikeResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._CreateBikeResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._CreateBikeResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createBusResponseImplementors = []string{"CreateBusResponse"}

func (ec *executionContext) _CreateBusResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CreateBusResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createBusResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateBusResponse")
		case "id":

			out.Values[i] = ec._CreateBusResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driver_id":

			out.Values[i] = ec._CreateBusResponse_driver_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "merchant_id":

			out.Values[i] = ec._CreateBusResponse_merchant_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "region_id":

			out.Values[i] = ec._CreateBusResponse_region_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bus_status":

			out.Values[i] = ec._CreateBusResponse_bus_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bus_name":

			out.Values[i] = ec._CreateBusResponse_bus_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bus_number":

			out.Values[i] = ec._CreateBusResponse_bus_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bus_type":

			out.Values[i] = ec._CreateBusResponse_bus_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "started_price":

			out.Values[i] = ec._CreateBusResponse_started_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "end_price":

			out.Values[i] = ec._CreateBusResponse_end_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "booking_count":

			out.Values[i] = ec._CreateBusResponse_booking_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "place_count":

			out.Values[i] = ec._CreateBusResponse_place_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._CreateBusResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._CreateBusResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createCarResponseImplementors = []string{"CreateCarResponse"}

func (ec *executionContext) _CreateCarResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CreateCarResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createCarResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateCarResponse")
		case "is_covid":

			out.Values[i] = ec._CreateCarResponse_is_covid(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_air_condt":

			out.Values[i] = ec._CreateCarResponse_is_air_condt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "car_status":

			out.Values[i] = ec._CreateCarResponse_car_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "car_number":

			out.Values[i] = ec._CreateCarResponse_car_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "car_name":

			out.Values[i] = ec._CreateCarResponse_car_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "started_price":

			out.Values[i] = ec._CreateCarResponse_started_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "end_price":

			out.Values[i] = ec._CreateCarResponse_end_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "place_count":

			out.Values[i] = ec._CreateCarResponse_place_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "colour":

			out.Values[i] = ec._CreateCarResponse_colour(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._CreateCarResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._CreateCarResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._CreateCarResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createDriverResponseImplementors = []string{"CreateDriverResponse"}

func (ec *executionContext) _CreateDriverResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CreateDriverResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createDriverResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateDriverResponse")
		case "driver_name":

			out.Values[i] = ec._CreateDriverResponse_driver_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phone_number":

			out.Values[i] = ec._CreateDriverResponse_phone_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "experience":

			out.Values[i] = ec._CreateDriverResponse_experience(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._CreateDriverResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._CreateDriverResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._CreateDriverResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createKekeResponseImplementors = []string{"CreateKekeResponse"}

func (ec *executionContext) _CreateKekeResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CreateKekeResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createKekeResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateKekeResponse")
		case "keke_status":

			out.Values[i] = ec._CreateKekeResponse_keke_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "keke_number":

			out.Values[i] = ec._CreateKekeResponse_keke_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "started_price":

			out.Values[i] = ec._CreateKekeResponse_started_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "end_price":

			out.Values[i] = ec._CreateKekeResponse_end_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "place_count":

			out.Values[i] = ec._CreateKekeResponse_place_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "colour":

			out.Values[i] = ec._CreateKekeResponse_colour(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._CreateKekeResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._CreateKekeResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._CreateKekeResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createMerchantResponseImplementors = []string{"CreateMerchantResponse"}

func (ec *executionContext) _CreateMerchantResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CreateMerchantResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createMerchantResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateMerchantResponse")
		case "id":

			out.Values[i] = ec._CreateMerchantResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._CreateMerchantResponse_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payment_history":

			out.Values[i] = ec._CreateMerchantResponse_payment_history(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phone_number":

			out.Values[i] = ec._CreateMerchantResponse_phone_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._CreateMerchantResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._CreateMerchantResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createOrderResponseImplementors = []string{"CreateOrderResponse"}

func (ec *executionContext) _CreateOrderResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CreateOrderResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createOrderResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateOrderResponse")
		case "id":

			out.Values[i] = ec._CreateOrderResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_id":

			out.Values[i] = ec._CreateOrderResponse_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "merchant_id":

			out.Values[i] = ec._CreateOrderResponse_merchant_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._CreateOrderResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._CreateOrderResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createReviewReplyResponseImplementors = []string{"CreateReviewReplyResponse"}

func (ec *executionContext) _CreateReviewReplyResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CreateReviewReplyResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createReviewReplyResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateReviewReplyResponse")
		case "id":

			out.Values[i] = ec._CreateReviewReplyResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sender_id":

			out.Values[i] = ec._CreateReviewReplyResponse_sender_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "review_id":

			out.Values[i] = ec._CreateReviewReplyResponse_review_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "content":

			out.Values[i] = ec._CreateReviewReplyResponse_content(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._CreateReviewReplyResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._CreateReviewReplyResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createReviewResponseImplementors = []string{"CreateReviewResponse"}

func (ec *executionContext) _CreateReviewResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CreateReviewResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createReviewResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateReviewResponse")
		case "id":

			out.Values[i] = ec._CreateReviewResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_id":

			out.Values[i] = ec._CreateReviewResponse_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "merchant_id":

			out.Values[i] = ec._CreateReviewResponse_merchant_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rate":

			out.Values[i] = ec._CreateReviewResponse_rate(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "review_content":

			out.Values[i] = ec._CreateReviewResponse_review_content(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._CreateReviewResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._CreateReviewResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createUserResponseImplementors = []string{"CreateUserResponse"}

func (ec *executionContext) _CreateUserResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CreateUserResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createUserResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateUserResponse")
		case "id":

			out.Values[i] = ec._CreateUserResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._CreateUserResponse_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payment_history":

			out.Values[i] = ec._CreateUserResponse_payment_history(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phone_number":

			out.Values[i] = ec._CreateUserResponse_phone_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._CreateUserResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._CreateUserResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getListBikesResponseImplementors = []string{"GetListBikesResponse"}

func (ec *executionContext) _GetListBikesResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetListBikesResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getListBikesResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetListBikesResponse")
		case "getBikes":

			out.Values[i] = ec._GetListBikesResponse_getBikes(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":

			out.Values[i] = ec._GetListBikesResponse_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getListBusesResponseImplementors = []string{"GetListBusesResponse"}

func (ec *executionContext) _GetListBusesResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetListBusesResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getListBusesResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetListBusesResponse")
		case "getBuses":

			out.Values[i] = ec._GetListBusesResponse_getBuses(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":

			out.Values[i] = ec._GetListBusesResponse_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getListCarsResponseImplementors = []string{"GetListCarsResponse"}

func (ec *executionContext) _GetListCarsResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetListCarsResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getListCarsResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetListCarsResponse")
		case "getCars":

			out.Values[i] = ec._GetListCarsResponse_getCars(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":

			out.Values[i] = ec._GetListCarsResponse_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getListDriversResponseImplementors = []string{"GetListDriversResponse"}

func (ec *executionContext) _GetListDriversResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetListDriversResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getListDriversResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetListDriversResponse")
		case "getDrivers":

			out.Values[i] = ec._GetListDriversResponse_getDrivers(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":

			out.Values[i] = ec._GetListDriversResponse_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getListKekesResponseImplementors = []string{"GetListKekesResponse"}

func (ec *executionContext) _GetListKekesResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetListKekesResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getListKekesResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetListKekesResponse")
		case "getKekes":

			out.Values[i] = ec._GetListKekesResponse_getKekes(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":

			out.Values[i] = ec._GetListKekesResponse_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getListMerchantResponseImplementors = []string{"GetListMerchantResponse"}

func (ec *executionContext) _GetListMerchantResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetListMerchantResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getListMerchantResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetListMerchantResponse")
		case "getmerchants":

			out.Values[i] = ec._GetListMerchantResponse_getmerchants(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":

			out.Values[i] = ec._GetListMerchantResponse_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getListOrdersResponseImplementors = []string{"GetListOrdersResponse"}

func (ec *executionContext) _GetListOrdersResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetListOrdersResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getListOrdersResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetListOrdersResponse")
		case "getorders":

			out.Values[i] = ec._GetListOrdersResponse_getorders(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":

			out.Values[i] = ec._GetListOrdersResponse_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getListReviewsResponseImplementors = []string{"GetListReviewsResponse"}

func (ec *executionContext) _GetListReviewsResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetListReviewsResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getListReviewsResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetListReviewsResponse")
		case "getReviews":

			out.Values[i] = ec._GetListReviewsResponse_getReviews(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":

			out.Values[i] = ec._GetListReviewsResponse_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getListUsersResponseImplementors = []string{"GetListUsersResponse"}

func (ec *executionContext) _GetListUsersResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetListUsersResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getListUsersResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetListUsersResponse")
		case "getUsers":

			out.Values[i] = ec._GetListUsersResponse_getUsers(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":

			out.Values[i] = ec._GetListUsersResponse_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getReplyReviewsResponseImplementors = []string{"GetReplyReviewsResponse"}

func (ec *executionContext) _GetReplyReviewsResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetReplyReviewsResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getReplyReviewsResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetReplyReviewsResponse")
		case "getReviews":

			out.Values[i] = ec._GetReplyReviewsResponse_getReviews(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":

			out.Values[i] = ec._GetReplyReviewsResponse_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getSingleBikeResponseImplementors = []string{"GetSingleBikeResponse"}

func (ec *executionContext) _GetSingleBikeResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetSingleBikeResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getSingleBikeResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetSingleBikeResponse")
		case "bike_status":

			out.Values[i] = ec._GetSingleBikeResponse_bike_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bike_number":

			out.Values[i] = ec._GetSingleBikeResponse_bike_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bike_model":

			out.Values[i] = ec._GetSingleBikeResponse_bike_model(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "started_price":

			out.Values[i] = ec._GetSingleBikeResponse_started_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "end_price":

			out.Values[i] = ec._GetSingleBikeResponse_end_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "colour":

			out.Values[i] = ec._GetSingleBikeResponse_colour(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._GetSingleBikeResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._GetSingleBikeResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._GetSingleBikeResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getSingleBusResponseImplementors = []string{"GetSingleBusResponse"}

func (ec *executionContext) _GetSingleBusResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetSingleBusResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getSingleBusResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetSingleBusResponse")
		case "id":

			out.Values[i] = ec._GetSingleBusResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driver_id":

			out.Values[i] = ec._GetSingleBusResponse_driver_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "merchant_id":

			out.Values[i] = ec._GetSingleBusResponse_merchant_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "region_id":

			out.Values[i] = ec._GetSingleBusResponse_region_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bus_status":

			out.Values[i] = ec._GetSingleBusResponse_bus_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bus_name":

			out.Values[i] = ec._GetSingleBusResponse_bus_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bus_number":

			out.Values[i] = ec._GetSingleBusResponse_bus_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bus_type":

			out.Values[i] = ec._GetSingleBusResponse_bus_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "started_price":

			out.Values[i] = ec._GetSingleBusResponse_started_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "end_price":

			out.Values[i] = ec._GetSingleBusResponse_end_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "booking_count":

			out.Values[i] = ec._GetSingleBusResponse_booking_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "place_count":

			out.Values[i] = ec._GetSingleBusResponse_place_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._GetSingleBusResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._GetSingleBusResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getSingleCarResponseImplementors = []string{"GetSingleCarResponse"}

func (ec *executionContext) _GetSingleCarResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetSingleCarResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getSingleCarResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetSingleCarResponse")
		case "is_covid":

			out.Values[i] = ec._GetSingleCarResponse_is_covid(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_air_condt":

			out.Values[i] = ec._GetSingleCarResponse_is_air_condt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "car_status":

			out.Values[i] = ec._GetSingleCarResponse_car_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "car_number":

			out.Values[i] = ec._GetSingleCarResponse_car_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "car_name":

			out.Values[i] = ec._GetSingleCarResponse_car_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "started_price":

			out.Values[i] = ec._GetSingleCarResponse_started_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "end_price":

			out.Values[i] = ec._GetSingleCarResponse_end_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "place_count":

			out.Values[i] = ec._GetSingleCarResponse_place_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "colour":

			out.Values[i] = ec._GetSingleCarResponse_colour(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._GetSingleCarResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._GetSingleCarResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._GetSingleCarResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getSingleDriverResponseImplementors = []string{"GetSingleDriverResponse"}

func (ec *executionContext) _GetSingleDriverResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetSingleDriverResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getSingleDriverResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetSingleDriverResponse")
		case "driver_name":

			out.Values[i] = ec._GetSingleDriverResponse_driver_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phone_number":

			out.Values[i] = ec._GetSingleDriverResponse_phone_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "experience":

			out.Values[i] = ec._GetSingleDriverResponse_experience(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._GetSingleDriverResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._GetSingleDriverResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._GetSingleDriverResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getSingleKekeResponseImplementors = []string{"GetSingleKekeResponse"}

func (ec *executionContext) _GetSingleKekeResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetSingleKekeResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getSingleKekeResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetSingleKekeResponse")
		case "keke_status":

			out.Values[i] = ec._GetSingleKekeResponse_keke_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "keke_number":

			out.Values[i] = ec._GetSingleKekeResponse_keke_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "started_price":

			out.Values[i] = ec._GetSingleKekeResponse_started_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "end_price":

			out.Values[i] = ec._GetSingleKekeResponse_end_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "place_count":

			out.Values[i] = ec._GetSingleKekeResponse_place_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "colour":

			out.Values[i] = ec._GetSingleKekeResponse_colour(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._GetSingleKekeResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._GetSingleKekeResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._GetSingleKekeResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getSingleMerchantResponseImplementors = []string{"GetSingleMerchantResponse"}

func (ec *executionContext) _GetSingleMerchantResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetSingleMerchantResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getSingleMerchantResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetSingleMerchantResponse")
		case "id":

			out.Values[i] = ec._GetSingleMerchantResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._GetSingleMerchantResponse_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payment_history":

			out.Values[i] = ec._GetSingleMerchantResponse_payment_history(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phone_number":

			out.Values[i] = ec._GetSingleMerchantResponse_phone_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._GetSingleMerchantResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._GetSingleMerchantResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getSingleOrderResponseImplementors = []string{"GetSingleOrderResponse"}

func (ec *executionContext) _GetSingleOrderResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetSingleOrderResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getSingleOrderResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetSingleOrderResponse")
		case "id":

			out.Values[i] = ec._GetSingleOrderResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_id":

			out.Values[i] = ec._GetSingleOrderResponse_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "merchant_id":

			out.Values[i] = ec._GetSingleOrderResponse_merchant_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._GetSingleOrderResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._GetSingleOrderResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getSingleReviewResponseImplementors = []string{"GetSingleReviewResponse"}

func (ec *executionContext) _GetSingleReviewResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetSingleReviewResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getSingleReviewResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetSingleReviewResponse")
		case "id":

			out.Values[i] = ec._GetSingleReviewResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_id":

			out.Values[i] = ec._GetSingleReviewResponse_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "merchant_id":

			out.Values[i] = ec._GetSingleReviewResponse_merchant_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rate":

			out.Values[i] = ec._GetSingleReviewResponse_rate(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "review_content":

			out.Values[i] = ec._GetSingleReviewResponse_review_content(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._GetSingleReviewResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._GetSingleReviewResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getSingleUserResponseImplementors = []string{"GetSingleUserResponse"}

func (ec *executionContext) _GetSingleUserResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetSingleUserResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getSingleUserResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetSingleUserResponse")
		case "id":

			out.Values[i] = ec._GetSingleUserResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._GetSingleUserResponse_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payment_history":

			out.Values[i] = ec._GetSingleUserResponse_payment_history(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phone_number":

			out.Values[i] = ec._GetSingleUserResponse_phone_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._GetSingleUserResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._GetSingleUserResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createBike":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createBike(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateBike":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateBike(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteBike":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteBike(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createBus":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createBus(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateBus":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateBus(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteBus":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteBus(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createCar":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCar(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateCar":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCar(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteCar":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCar(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUser(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUser(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createMerchant":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createMerchant(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateMerchant":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMerchant(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteUser(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteMerchant":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMerchant(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createDriver":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createDriver(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateDriver":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDriver(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteDriver":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteDriver(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createKeke":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createKeke(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateKeke":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateKeke(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteKeke":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteKeke(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createOrder":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createOrder(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateOrder":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateOrder(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteOrder":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteOrder(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createReview":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createReview(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateReview":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateReview(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteReview":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteReview(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createReplyReview":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createReplyReview(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateReplyReview":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateReplyReview(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteReplyReview":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteReplyReview(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "getListBikes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getListBikes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getSingleBike":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSingleBike(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getListBuses":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getListBuses(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getSingleBus":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSingleBus(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getListCars":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getListCars(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getSingleCar":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSingleCar(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getListUsers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getListUsers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getSingleUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSingleUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getListMerchant":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getListMerchant(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getSingleMerchant":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSingleMerchant(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getListDrivers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getListDrivers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getSingleDriver":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSingleDriver(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getListKekes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getListKekes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getSingleKeke":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSingleKeke(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getListOrders":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getListOrders(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getSingleOrder":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSingleOrder(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getListReviews":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getListReviews(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getSingleReview":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSingleReview(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetReplyReviews":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetReplyReviews(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var reviewCommentImplementors = []string{"ReviewComment"}

func (ec *executionContext) _ReviewComment(ctx context.Context, sel ast.SelectionSet, obj *model.ReviewComment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reviewCommentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReviewComment")
		case "id":

			out.Values[i] = ec._ReviewComment_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "review_id":

			out.Values[i] = ec._ReviewComment_review_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sender_id":

			out.Values[i] = ec._ReviewComment_sender_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "content":

			out.Values[i] = ec._ReviewComment_content(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._ReviewComment_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._ReviewComment_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateBikeResponseImplementors = []string{"UpdateBikeResponse"}

func (ec *executionContext) _UpdateBikeResponse(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateBikeResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateBikeResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateBikeResponse")
		case "bike_status":

			out.Values[i] = ec._UpdateBikeResponse_bike_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bike_number":

			out.Values[i] = ec._UpdateBikeResponse_bike_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bike_model":

			out.Values[i] = ec._UpdateBikeResponse_bike_model(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "started_price":

			out.Values[i] = ec._UpdateBikeResponse_started_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "end_price":

			out.Values[i] = ec._UpdateBikeResponse_end_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "colour":

			out.Values[i] = ec._UpdateBikeResponse_colour(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._UpdateBikeResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._UpdateBikeResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UpdateBikeResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateBusResponseImplementors = []string{"UpdateBusResponse"}

func (ec *executionContext) _UpdateBusResponse(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateBusResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateBusResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateBusResponse")
		case "id":

			out.Values[i] = ec._UpdateBusResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bus_status":

			out.Values[i] = ec._UpdateBusResponse_bus_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bus_name":

			out.Values[i] = ec._UpdateBusResponse_bus_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bus_number":

			out.Values[i] = ec._UpdateBusResponse_bus_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bus_type":

			out.Values[i] = ec._UpdateBusResponse_bus_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "started_price":

			out.Values[i] = ec._UpdateBusResponse_started_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "end_price":

			out.Values[i] = ec._UpdateBusResponse_end_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "booking_count":

			out.Values[i] = ec._UpdateBusResponse_booking_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "place_count":

			out.Values[i] = ec._UpdateBusResponse_place_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._UpdateBusResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UpdateBusResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateCarResponseImplementors = []string{"UpdateCarResponse"}

func (ec *executionContext) _UpdateCarResponse(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateCarResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateCarResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateCarResponse")
		case "is_covid":

			out.Values[i] = ec._UpdateCarResponse_is_covid(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_air_condt":

			out.Values[i] = ec._UpdateCarResponse_is_air_condt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "car_status":

			out.Values[i] = ec._UpdateCarResponse_car_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "car_number":

			out.Values[i] = ec._UpdateCarResponse_car_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "car_name":

			out.Values[i] = ec._UpdateCarResponse_car_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "started_price":

			out.Values[i] = ec._UpdateCarResponse_started_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "end_price":

			out.Values[i] = ec._UpdateCarResponse_end_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "place_count":

			out.Values[i] = ec._UpdateCarResponse_place_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "colour":

			out.Values[i] = ec._UpdateCarResponse_colour(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._UpdateCarResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._UpdateCarResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UpdateCarResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateDriverResponseImplementors = []string{"UpdateDriverResponse"}

func (ec *executionContext) _UpdateDriverResponse(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateDriverResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateDriverResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateDriverResponse")
		case "driver_name":

			out.Values[i] = ec._UpdateDriverResponse_driver_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phone_number":

			out.Values[i] = ec._UpdateDriverResponse_phone_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "experience":

			out.Values[i] = ec._UpdateDriverResponse_experience(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._UpdateDriverResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._UpdateDriverResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UpdateDriverResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateKekeResponseImplementors = []string{"UpdateKekeResponse"}

func (ec *executionContext) _UpdateKekeResponse(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateKekeResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateKekeResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateKekeResponse")
		case "keke_status":

			out.Values[i] = ec._UpdateKekeResponse_keke_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "keke_number":

			out.Values[i] = ec._UpdateKekeResponse_keke_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "started_price":

			out.Values[i] = ec._UpdateKekeResponse_started_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "end_price":

			out.Values[i] = ec._UpdateKekeResponse_end_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "place_count":

			out.Values[i] = ec._UpdateKekeResponse_place_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "colour":

			out.Values[i] = ec._UpdateKekeResponse_colour(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._UpdateKekeResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._UpdateKekeResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UpdateKekeResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateMerchantResponseImplementors = []string{"UpdateMerchantResponse"}

func (ec *executionContext) _UpdateMerchantResponse(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateMerchantResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateMerchantResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateMerchantResponse")
		case "id":

			out.Values[i] = ec._UpdateMerchantResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._UpdateMerchantResponse_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payment_history":

			out.Values[i] = ec._UpdateMerchantResponse_payment_history(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phone_number":

			out.Values[i] = ec._UpdateMerchantResponse_phone_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._UpdateMerchantResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UpdateMerchantResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateOrderResponseImplementors = []string{"UpdateOrderResponse"}

func (ec *executionContext) _UpdateOrderResponse(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateOrderResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateOrderResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateOrderResponse")
		case "id":

			out.Values[i] = ec._UpdateOrderResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_id":

			out.Values[i] = ec._UpdateOrderResponse_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "merchant_id":

			out.Values[i] = ec._UpdateOrderResponse_merchant_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._UpdateOrderResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UpdateOrderResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateReviewReplyResponseImplementors = []string{"UpdateReviewReplyResponse"}

func (ec *executionContext) _UpdateReviewReplyResponse(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateReviewReplyResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateReviewReplyResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateReviewReplyResponse")
		case "id":

			out.Values[i] = ec._UpdateReviewReplyResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sender_id":

			out.Values[i] = ec._UpdateReviewReplyResponse_sender_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "review_id":

			out.Values[i] = ec._UpdateReviewReplyResponse_review_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "content":

			out.Values[i] = ec._UpdateReviewReplyResponse_content(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._UpdateReviewReplyResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UpdateReviewReplyResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateReviewResponseImplementors = []string{"UpdateReviewResponse"}

func (ec *executionContext) _UpdateReviewResponse(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateReviewResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateReviewResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateReviewResponse")
		case "id":

			out.Values[i] = ec._UpdateReviewResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_id":

			out.Values[i] = ec._UpdateReviewResponse_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "merchant_id":

			out.Values[i] = ec._UpdateReviewResponse_merchant_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rate":

			out.Values[i] = ec._UpdateReviewResponse_rate(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "review_content":

			out.Values[i] = ec._UpdateReviewResponse_review_content(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._UpdateReviewResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UpdateReviewResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateUserResponseImplementors = []string{"UpdateUserResponse"}

func (ec *executionContext) _UpdateUserResponse(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateUserResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateUserResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateUserResponse")
		case "id":

			out.Values[i] = ec._UpdateUserResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._UpdateUserResponse_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payment_history":

			out.Values[i] = ec._UpdateUserResponse_payment_history(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phone_number":

			out.Values[i] = ec._UpdateUserResponse_phone_number(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._UpdateUserResponse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UpdateUserResponse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNCreateBikeResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateBikeResponse(ctx context.Context, sel ast.SelectionSet, v model.CreateBikeResponse) graphql.Marshaler {
	return ec._CreateBikeResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateBikeResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateBikeResponse(ctx context.Context, sel ast.SelectionSet, v *model.CreateBikeResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateBikeResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateBusResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateBusResponse(ctx context.Context, sel ast.SelectionSet, v model.CreateBusResponse) graphql.Marshaler {
	return ec._CreateBusResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateBusResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateBusResponse(ctx context.Context, sel ast.SelectionSet, v *model.CreateBusResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateBusResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateCarResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateCarResponse(ctx context.Context, sel ast.SelectionSet, v model.CreateCarResponse) graphql.Marshaler {
	return ec._CreateCarResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateCarResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateCarResponse(ctx context.Context, sel ast.SelectionSet, v *model.CreateCarResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateCarResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateDriverResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateDriverResponse(ctx context.Context, sel ast.SelectionSet, v model.CreateDriverResponse) graphql.Marshaler {
	return ec._CreateDriverResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateDriverResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateDriverResponse(ctx context.Context, sel ast.SelectionSet, v *model.CreateDriverResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateDriverResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateKekeResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateKekeResponse(ctx context.Context, sel ast.SelectionSet, v model.CreateKekeResponse) graphql.Marshaler {
	return ec._CreateKekeResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateKekeResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateKekeResponse(ctx context.Context, sel ast.SelectionSet, v *model.CreateKekeResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateKekeResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateMerchantResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateMerchantResponse(ctx context.Context, sel ast.SelectionSet, v model.CreateMerchantResponse) graphql.Marshaler {
	return ec._CreateMerchantResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateMerchantResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateMerchantResponse(ctx context.Context, sel ast.SelectionSet, v *model.CreateMerchantResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateMerchantResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateOrderResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateOrderResponse(ctx context.Context, sel ast.SelectionSet, v model.CreateOrderResponse) graphql.Marshaler {
	return ec._CreateOrderResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateOrderResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateOrderResponse(ctx context.Context, sel ast.SelectionSet, v *model.CreateOrderResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateOrderResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateReviewReplyResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateReviewReplyResponse(ctx context.Context, sel ast.SelectionSet, v model.CreateReviewReplyResponse) graphql.Marshaler {
	return ec._CreateReviewReplyResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateReviewReplyResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateReviewReplyResponse(ctx context.Context, sel ast.SelectionSet, v *model.CreateReviewReplyResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateReviewReplyResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateReviewResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateReviewResponse(ctx context.Context, sel ast.SelectionSet, v model.CreateReviewResponse) graphql.Marshaler {
	return ec._CreateReviewResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateReviewResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateReviewResponse(ctx context.Context, sel ast.SelectionSet, v *model.CreateReviewResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateReviewResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateUserResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateUserResponse(ctx context.Context, sel ast.SelectionSet, v model.CreateUserResponse) graphql.Marshaler {
	return ec._CreateUserResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateUserResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateUserResponse(ctx context.Context, sel ast.SelectionSet, v *model.CreateUserResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateUserResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEmpty2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEmpty2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalNGetListBikesReq2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListBikesReq(ctx context.Context, v interface{}) (model.GetListBikesReq, error) {
	res, err := ec.unmarshalInputGetListBikesReq(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGetListBikesResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListBikesResponse(ctx context.Context, sel ast.SelectionSet, v model.GetListBikesResponse) graphql.Marshaler {
	return ec._GetListBikesResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetListBikesResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListBikesResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetListBikesResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GetListBikesResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetListBusesReq2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListBusesReq(ctx context.Context, v interface{}) (model.GetListBusesReq, error) {
	res, err := ec.unmarshalInputGetListBusesReq(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGetListBusesResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListBusesResponse(ctx context.Context, sel ast.SelectionSet, v model.GetListBusesResponse) graphql.Marshaler {
	return ec._GetListBusesResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetListBusesResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListBusesResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetListBusesResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GetListBusesResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetListCarsReq2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListCarsReq(ctx context.Context, v interface{}) (model.GetListCarsReq, error) {
	res, err := ec.unmarshalInputGetListCarsReq(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGetListCarsResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListCarsResponse(ctx context.Context, sel ast.SelectionSet, v model.GetListCarsResponse) graphql.Marshaler {
	return ec._GetListCarsResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetListCarsResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListCarsResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetListCarsResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GetListCarsResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetListDriversReq2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListDriversReq(ctx context.Context, v interface{}) (model.GetListDriversReq, error) {
	res, err := ec.unmarshalInputGetListDriversReq(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGetListDriversResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListDriversResponse(ctx context.Context, sel ast.SelectionSet, v model.GetListDriversResponse) graphql.Marshaler {
	return ec._GetListDriversResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetListDriversResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListDriversResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetListDriversResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GetListDriversResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetListKekesReq2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListKekesReq(ctx context.Context, v interface{}) (model.GetListKekesReq, error) {
	res, err := ec.unmarshalInputGetListKekesReq(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGetListKekesResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListKekesResponse(ctx context.Context, sel ast.SelectionSet, v model.GetListKekesResponse) graphql.Marshaler {
	return ec._GetListKekesResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetListKekesResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListKekesResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetListKekesResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GetListKekesResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetListMerchantReq2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListMerchantReq(ctx context.Context, v interface{}) (model.GetListMerchantReq, error) {
	res, err := ec.unmarshalInputGetListMerchantReq(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGetListMerchantResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListMerchantResponse(ctx context.Context, sel ast.SelectionSet, v model.GetListMerchantResponse) graphql.Marshaler {
	return ec._GetListMerchantResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetListMerchantResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListMerchantResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetListMerchantResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GetListMerchantResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetListOrdersReq2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListOrdersReq(ctx context.Context, v interface{}) (model.GetListOrdersReq, error) {
	res, err := ec.unmarshalInputGetListOrdersReq(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGetListOrdersResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListOrdersResponse(ctx context.Context, sel ast.SelectionSet, v model.GetListOrdersResponse) graphql.Marshaler {
	return ec._GetListOrdersResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetListOrdersResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListOrdersResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetListOrdersResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GetListOrdersResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetListReviewsReq2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListReviewsReq(ctx context.Context, v interface{}) (model.GetListReviewsReq, error) {
	res, err := ec.unmarshalInputGetListReviewsReq(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGetListReviewsResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListReviewsResponse(ctx context.Context, sel ast.SelectionSet, v model.GetListReviewsResponse) graphql.Marshaler {
	return ec._GetListReviewsResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetListReviewsResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListReviewsResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetListReviewsResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GetListReviewsResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetListUsersReq2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListUsersReq(ctx context.Context, v interface{}) (model.GetListUsersReq, error) {
	res, err := ec.unmarshalInputGetListUsersReq(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGetListUsersResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListUsersResponse(ctx context.Context, sel ast.SelectionSet, v model.GetListUsersResponse) graphql.Marshaler {
	return ec._GetListUsersResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetListUsersResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetListUsersResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetListUsersResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GetListUsersResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNGetReplyReviewsResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetReplyReviewsResponse(ctx context.Context, sel ast.SelectionSet, v model.GetReplyReviewsResponse) graphql.Marshaler {
	return ec._GetReplyReviewsResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetReplyReviewsResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetReplyReviewsResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetReplyReviewsResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GetReplyReviewsResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNGetSingleBikeResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleBikeResponse(ctx context.Context, sel ast.SelectionSet, v model.GetSingleBikeResponse) graphql.Marshaler {
	return ec._GetSingleBikeResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetSingleBikeResponse2ᚕᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleBikeResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GetSingleBikeResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGetSingleBikeResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleBikeResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGetSingleBikeResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleBikeResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetSingleBikeResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GetSingleBikeResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNGetSingleBusResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleBusResponse(ctx context.Context, sel ast.SelectionSet, v model.GetSingleBusResponse) graphql.Marshaler {
	return ec._GetSingleBusResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetSingleBusResponse2ᚕᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleBusResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GetSingleBusResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGetSingleBusResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleBusResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGetSingleBusResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleBusResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetSingleBusResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GetSingleBusResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNGetSingleCarResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleCarResponse(ctx context.Context, sel ast.SelectionSet, v model.GetSingleCarResponse) graphql.Marshaler {
	return ec._GetSingleCarResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetSingleCarResponse2ᚕᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleCarResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GetSingleCarResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGetSingleCarResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleCarResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGetSingleCarResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleCarResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetSingleCarResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GetSingleCarResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNGetSingleDriverResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleDriverResponse(ctx context.Context, sel ast.SelectionSet, v model.GetSingleDriverResponse) graphql.Marshaler {
	return ec._GetSingleDriverResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetSingleDriverResponse2ᚕᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleDriverResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GetSingleDriverResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGetSingleDriverResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleDriverResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGetSingleDriverResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleDriverResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetSingleDriverResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GetSingleDriverResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNGetSingleKekeResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleKekeResponse(ctx context.Context, sel ast.SelectionSet, v model.GetSingleKekeResponse) graphql.Marshaler {
	return ec._GetSingleKekeResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetSingleKekeResponse2ᚕᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleKekeResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GetSingleKekeResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGetSingleKekeResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleKekeResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGetSingleKekeResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleKekeResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetSingleKekeResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GetSingleKekeResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNGetSingleMerchantResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleMerchantResponse(ctx context.Context, sel ast.SelectionSet, v model.GetSingleMerchantResponse) graphql.Marshaler {
	return ec._GetSingleMerchantResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetSingleMerchantResponse2ᚕᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleMerchantResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GetSingleMerchantResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGetSingleMerchantResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleMerchantResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGetSingleMerchantResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleMerchantResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetSingleMerchantResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GetSingleMerchantResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNGetSingleOrderResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleOrderResponse(ctx context.Context, sel ast.SelectionSet, v model.GetSingleOrderResponse) graphql.Marshaler {
	return ec._GetSingleOrderResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetSingleOrderResponse2ᚕᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleOrderResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GetSingleOrderResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGetSingleOrderResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleOrderResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGetSingleOrderResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleOrderResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetSingleOrderResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GetSingleOrderResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNGetSingleReviewResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleReviewResponse(ctx context.Context, sel ast.SelectionSet, v model.GetSingleReviewResponse) graphql.Marshaler {
	return ec._GetSingleReviewResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetSingleReviewResponse2ᚕᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleReviewResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GetSingleReviewResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGetSingleReviewResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleReviewResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGetSingleReviewResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleReviewResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetSingleReviewResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GetSingleReviewResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNGetSingleUserResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleUserResponse(ctx context.Context, sel ast.SelectionSet, v model.GetSingleUserResponse) graphql.Marshaler {
	return ec._GetSingleUserResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetSingleUserResponse2ᚕᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleUserResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GetSingleUserResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGetSingleUserResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleUserResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGetSingleUserResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐGetSingleUserResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetSingleUserResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GetSingleUserResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNReviewComment2ᚕᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐReviewCommentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ReviewComment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReviewComment2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐReviewComment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNReviewComment2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐReviewComment(ctx context.Context, sel ast.SelectionSet, v *model.ReviewComment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ReviewComment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNUpdateBikeResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateBikeResponse(ctx context.Context, sel ast.SelectionSet, v model.UpdateBikeResponse) graphql.Marshaler {
	return ec._UpdateBikeResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateBikeResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateBikeResponse(ctx context.Context, sel ast.SelectionSet, v *model.UpdateBikeResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateBikeResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateBusResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateBusResponse(ctx context.Context, sel ast.SelectionSet, v model.UpdateBusResponse) graphql.Marshaler {
	return ec._UpdateBusResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateBusResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateBusResponse(ctx context.Context, sel ast.SelectionSet, v *model.UpdateBusResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateBusResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateCarResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateCarResponse(ctx context.Context, sel ast.SelectionSet, v model.UpdateCarResponse) graphql.Marshaler {
	return ec._UpdateCarResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateCarResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateCarResponse(ctx context.Context, sel ast.SelectionSet, v *model.UpdateCarResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateCarResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateDriverResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateDriverResponse(ctx context.Context, sel ast.SelectionSet, v model.UpdateDriverResponse) graphql.Marshaler {
	return ec._UpdateDriverResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateDriverResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateDriverResponse(ctx context.Context, sel ast.SelectionSet, v *model.UpdateDriverResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateDriverResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateKekeResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateKekeResponse(ctx context.Context, sel ast.SelectionSet, v model.UpdateKekeResponse) graphql.Marshaler {
	return ec._UpdateKekeResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateKekeResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateKekeResponse(ctx context.Context, sel ast.SelectionSet, v *model.UpdateKekeResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateKekeResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateMerchantResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateMerchantResponse(ctx context.Context, sel ast.SelectionSet, v model.UpdateMerchantResponse) graphql.Marshaler {
	return ec._UpdateMerchantResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateMerchantResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateMerchantResponse(ctx context.Context, sel ast.SelectionSet, v *model.UpdateMerchantResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateMerchantResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateOrderResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateOrderResponse(ctx context.Context, sel ast.SelectionSet, v model.UpdateOrderResponse) graphql.Marshaler {
	return ec._UpdateOrderResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateOrderResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateOrderResponse(ctx context.Context, sel ast.SelectionSet, v *model.UpdateOrderResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateOrderResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateReviewReplyResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateReviewReplyResponse(ctx context.Context, sel ast.SelectionSet, v model.UpdateReviewReplyResponse) graphql.Marshaler {
	return ec._UpdateReviewReplyResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateReviewReplyResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateReviewReplyResponse(ctx context.Context, sel ast.SelectionSet, v *model.UpdateReviewReplyResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateReviewReplyResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateReviewResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateReviewResponse(ctx context.Context, sel ast.SelectionSet, v model.UpdateReviewResponse) graphql.Marshaler {
	return ec._UpdateReviewResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateReviewResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateReviewResponse(ctx context.Context, sel ast.SelectionSet, v *model.UpdateReviewResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateReviewResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateUserResponse2bkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateUserResponse(ctx context.Context, sel ast.SelectionSet, v model.UpdateUserResponse) graphql.Marshaler {
	return ec._UpdateUserResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateUserResponse2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateUserResponse(ctx context.Context, sel ast.SelectionSet, v *model.UpdateUserResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateUserResponse(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalOcreateBikeReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateBikeReq(ctx context.Context, v interface{}) (*model.CreateBikeReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputcreateBikeReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOcreateBusReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateBusReq(ctx context.Context, v interface{}) (*model.CreateBusReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputcreateBusReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOcreateCarReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateCarReq(ctx context.Context, v interface{}) (*model.CreateCarReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputcreateCarReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOcreateDriverReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateDriverReq(ctx context.Context, v interface{}) (*model.CreateDriverReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputcreateDriverReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOcreateKekeReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateKekeReq(ctx context.Context, v interface{}) (*model.CreateKekeReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputcreateKekeReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOcreateMerchantReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateMerchantReq(ctx context.Context, v interface{}) (*model.CreateMerchantReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputcreateMerchantReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOcreateOrderReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateOrderReq(ctx context.Context, v interface{}) (*model.CreateOrderReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputcreateOrderReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOcreateReviewReplyReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateReviewReplyReq(ctx context.Context, v interface{}) (*model.CreateReviewReplyReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputcreateReviewReplyReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOcreateReviewReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateReviewReq(ctx context.Context, v interface{}) (*model.CreateReviewReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputcreateReviewReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOcreateUserReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐCreateUserReq(ctx context.Context, v interface{}) (*model.CreateUserReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputcreateUserReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOupdateBikeReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateBikeReq(ctx context.Context, v interface{}) (*model.UpdateBikeReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputupdateBikeReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOupdateBusReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateBusReq(ctx context.Context, v interface{}) (*model.UpdateBusReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputupdateBusReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOupdateCarReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateCarReq(ctx context.Context, v interface{}) (*model.UpdateCarReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputupdateCarReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOupdateDriverReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateDriverReq(ctx context.Context, v interface{}) (*model.UpdateDriverReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputupdateDriverReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOupdateKekeReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateKekeReq(ctx context.Context, v interface{}) (*model.UpdateKekeReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputupdateKekeReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOupdateMerchantReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateMerchantReq(ctx context.Context, v interface{}) (*model.UpdateMerchantReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputupdateMerchantReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOupdateOrderReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateOrderReq(ctx context.Context, v interface{}) (*model.UpdateOrderReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputupdateOrderReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOupdateReviewReplyReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateReviewReplyReq(ctx context.Context, v interface{}) (*model.UpdateReviewReplyReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputupdateReviewReplyReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOupdateReviewReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateReviewReq(ctx context.Context, v interface{}) (*model.UpdateReviewReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputupdateReviewReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOupdateUserReq2ᚖbkᚋbk_api_gatewayᚋgraphᚋmodelᚐUpdateUserReq(ctx context.Context, v interface{}) (*model.UpdateUserReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputupdateUserReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
